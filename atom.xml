<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Calios&#39; Eden</title>
  <subtitle>Stedfast as thou art.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.calios.gq/"/>
  <updated>2017-06-06T06:20:45.000Z</updated>
  <id>http://www.calios.gq/</id>
  
  <author>
    <name>Calios</name>
    <email>calios_1124@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>KVO &amp; KVC 知识点小结</title>
    <link href="http://www.calios.gq/2017/05/12/KVO-KVC-missing-points/"/>
    <id>http://www.calios.gq/2017/05/12/KVO-KVC-missing-points/</id>
    <published>2017-05-12T05:25:43.000Z</published>
    <updated>2017-06-06T06:20:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-KVO"><a href="#1-KVO" class="headerlink" title="1.KVO"></a>1.KVO</h3><h5 id="1-1-属性依赖的机制"><a href="#1-1-属性依赖的机制" class="headerlink" title="1.1 属性依赖的机制"></a>1.1 属性依赖的机制</h5><p>在objc.io讲解KVC和KVO的一篇<a href="https://www.objc.io/issues/7-foundation/key-value-coding-and-observing/" target="_blank" rel="external">文章</a>中，举了一个体现属性依赖机制的例子，例子的逻辑结构如下图。完整代码见<a href="https://github.com/objcio/issue-7-lab-color-space-explorer" target="_blank" rel="external">github</a>。</p>
<a id="more"></a>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/1.1%20PropertyDependency.png" alt="属性依赖机制"></p>
<p><strong>图解：</strong></p>
<ul>
<li>该图表现了通过改变L、a、b的滑块，更新上图右侧view的背景颜色的实现原理。</li>
<li>L、a、b代表Lab色彩空间中颜色的三种影响因素。</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (<span class="name">NSSet&lt;NSString</span> *&gt;) keyPathsForValuesAffectingValueForKey: (NSString *)key<span class="comment">;</span></div></pre></td></tr></table></figure>
<ul>
<li>key：受key path影响的key。</li>
<li>return：返回影响指定key的一组key path。</li>
<li>使用：<code>+ (NSSet&lt;NSString *&gt;) keyPathsForValuesAffecting&lt;Key&gt;</code>。</li>
</ul>
<p><strong>详解：</strong></p>
<ul>
<li>red的变化受L影响，green变化受L和a影响，blue变化受L和b影响，最终red、green和blue共同决定color属性，即view显示的背景颜色。</li>
<li>通过实现对应的+keyPathsForValuesAffectingRedComponent/GreenComponent/BlueComponent/Color来指定各个属性之间的依赖关系。</li>
<li>添加属性后，会在代码提示中自动生成如下名称的方法，选择一个就好了。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSSet</span> *)keyPathsForValuesAffectingRedComponent</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObject:<span class="string">@"lComponent"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSSet</span> *)keyPathsForValuesAffectingGreenComponent</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@"lComponent"</span>, <span class="string">@"aComponent"</span>, <span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSSet</span> *)keyPathsForValuesAffectingBlueComponent</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@"lComponent"</span>, <span class="string">@"bComponent"</span>, <span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSSet</span> *)keyPathsForValuesAffectingColor</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@"redComponent"</span>, <span class="string">@"greenComponent"</span>, <span class="string">@"blueComponent"</span>, <span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-2-KVO"><a href="#1-2-KVO" class="headerlink" title="1.2 KVO"></a>1.2 KVO</h5><p>添加对LabColor的实例对象labColor的属性color的观察者，并添加相应的响应事件，更新view的backgroundColor。</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>addObserver:<span class="params">(NSObject *)</span>anObserver</div><div class="line">         forKeyPath:<span class="params">(NSString *)</span>keyPath</div><div class="line">            options:<span class="params">(NSKeyValueObservingOptions)</span>options</div><div class="line">            context:<span class="params">(void *)</span>context</div><div class="line">- <span class="params">(void)</span>observeValueForKeyPath:<span class="params">(NSString *)</span>keyPath</div><div class="line">                      ofObject:<span class="params">(id)</span>object</div><div class="line">                        change:<span class="params">(NSDictionary *)</span>change</div><div class="line">                       context:<span class="params">(void *)</span>context</div></pre></td></tr></table></figure>
<p>对于options的几个可选值：</p>
<ul>
<li>获取变化之前的值用NSKeyValueObservingOptionOld，获取变化之后的值用NSKeyValueObservingOptionNew，二者都取用按位或。</li>
<li>在添加观察者之前就立即发送变化的通知用NSKeyValueObservingOptionInitial，可以通过这种一次性的通知确定被观察者某属性的初始值。</li>
<li>在即将发生变化之前发送通知用NSKeyValueObservingOptionPrior（通常都是发生变化后发送通知）。<br>建议设置Context，避免子类和父类观察同一对象的同一属性。</li>
</ul>
<p><strong>注意：</strong> KVO的add方法并不对观察对象、被观察对象和context持有强引用，所以要自行确保对于观察对象、被观察对象和context的强引用。</p>
<h5 id="1-3-手动通知"><a href="#1-3-手动通知" class="headerlink" title="1.3 手动通知"></a>1.3 手动通知</h5><ul>
<li>如何手动通知？</li>
</ul>
<p>当我们需要override 属性的setter方法时，有时候需要添加一些自定义的控制，再进行赋值。这时需要关闭系统自动调用 <code>-willChangeValueForKey:</code>和 <code>-didChangeValueForKey:</code>的行为，改为手动调用这两个方法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)automaticallyNotifiesObserversForLComponent;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setLComponent:(<span class="keyword">double</span>)lComponent;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (_lComponent == lComponent) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"lComponent"</span>];</div><div class="line">    _lComponent = lComponent;</div><div class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"lComponent"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>何时需要手动通知？<ul>
<li>使用 <code>-will|didChangeValueForKey:</code>的正确方式是，当你没有通过KVO兼容的accessor或setter改变property时，这种情况下KVO机制是不会捕获到变化的，需要手动触发。</li>
<li>只要触发setter，即使当前值没有改变，也会产生KVO的通知。当处于效率考虑、希望避免这种无用通知时可以考虑手动通知。</li>
</ul>
</li>
</ul>
<h5 id="1-4-KVO与线程"><a href="#1-4-KVO与线程" class="headerlink" title="1.4 KVO与线程"></a>1.4 KVO与线程</h5><p>通常来说，不推荐把KVO和多线程混合使用。因为KVO的行为是同步的，发生变化的线程和处理变化的线程应该是同一个线程。如果要使用多队列或是线程，我们不应该跨队列或是跨线程使用KVO。</p>
<h5 id="1-5-KVO实现细节"><a href="#1-5-KVO实现细节" class="headerlink" title="1.5 KVO实现细节"></a>1.5 KVO实现细节</h5><p>自动的KVO是通过一种叫<code>isa-swizzling</code>的技术实现的。isa指针通常是指向对象的类，类的分发表中包含着指向该类实现的方法的一些指针。<br>当观察者被注册为要观察对象的某个属性时，被观察者对象isa指针就被改变了，它不再指向实际的类，而是指向一个中间类。因此isa指针并不能反映实例所属的真正类。如果想要获取实例对象的类，应该使用class方法。</p>
<p>（然而，在Mike Ash一篇<a href="https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html" target="_blank" rel="external">谈论KVO在runtime层面如何实现的文章</a>中谈到，当你第一次观察指定类的对象时，KVO会在runtime创建一个全新的、继承自你的class的子类。在这个全新的类中，它override了任何被观察key的set方法，然后把你的对象的isa指针转移，这样你的对象就成为了这个新类的实例。被override的方法正是通知观察者实现的本质。逻辑是这样的：对于key的改变必须走key的set方法。通过override它的set方法，就可以劫持它，并且在它被调用的时候发送通知给观察者。苹果公司实在是不想将这个机制暴露出来，因此，除了setter之外，那个动态的子类还override了<code>-class</code>方法，来向你返回原始的类。如果你不仔细研究的话，KVO改变的对象就像没有被观察一样。私以为，Mike说得更接近真相。毕竟，真相只有一个。:P）</p>
<h5 id="1-6-KVO相关API"><a href="#1-6-KVO相关API" class="headerlink" title="1.6 KVO相关API"></a>1.6 KVO相关API</h5><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/KVO%20API.png" alt="KVO API"></p>
<h3 id="2-KVC"><a href="#2-KVC" class="headerlink" title="2.KVC"></a>2.KVC</h3><h5 id="2-1-不需要-property的KVC"><a href="#2-1-不需要-property的KVC" class="headerlink" title="2.1 不需要@property的KVC"></a>2.1 不需要@property的KVC</h5><ul>
<li>直接添加 <code>-&lt;key&gt;</code> 和 <code>-set&lt;Key&gt;:</code> 方法；</li>
<li>要正确处理nil，需要override <code>-setNilValueForKey:</code> 方法；</li>
<li>还可以通过override如下方法来让一个类支持KVC，但是会影响性能。</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(id)</span>valueForUndefinedKey:<span class="params">(NSString *)</span>key;</div><div class="line">- <span class="params">(void)</span>setValue:<span class="params">(id)</span>value forUndefinedKey:<span class="params">(NSString *)</span>key;</div></pre></td></tr></table></figure>
<ul>
<li>Foundation 框架支持直接访问实例变量。请小心的使用这个特性。你可以去查看 <code>+accessInstanceVariablesDirectly</code> 的文档。这个值默认是 <code>YES</code> 的时候，Foundation 会按照 <code>_&lt;key&gt;</code>, <code>_is&lt;Key&gt;</code>, <code>&lt;key&gt;</code>和 <code>is&lt;Key&gt;</code> 的顺序查找实例变量。</li>
</ul>
<h5 id="2-2-通过集合代理对象实现KVC"><a href="#2-2-通过集合代理对象实现KVC" class="headerlink" title="2.2 通过集合代理对象实现KVC"></a>2.2 通过集合代理对象实现KVC</h5><h5 id="2-3-常见错误"><a href="#2-3-常见错误" class="headerlink" title="2.3 常见错误"></a>2.3 常见错误</h5><ul>
<li>KVO 旨在观察 <em>关系 (relationship)</em> 而不是集合。我们不能观察 NSArray，我们只能观察一个对象的属性——而这个属性有可能是 NSArray。相似地，观察 self 不是永远都生效的。而且这不是一个好的设计。</li>
</ul>
<h5 id="2-4-KVV（键值验证）"><a href="#2-4-KVV（键值验证）" class="headerlink" title="2.4 KVV（键值验证）"></a>2.4 KVV（键值验证）</h5><ul>
<li>KVV 也是 KVC API 的一部分。这是一个用来验证属性值的 API，只是它光靠自己很难提供逻辑和功能。</li>
<li>用 KVV 验证 model 类的值是 Cocoa 的惯例。</li>
<li>需要在model中提供 <code>-validate&lt;Key&gt;:error:</code>方法。</li>
</ul>
<h5 id="2-5-KVC相关API"><a href="#2-5-KVC相关API" class="headerlink" title="2.5 KVC相关API"></a>2.5 KVC相关API</h5><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/KVC%20API.png" alt="KVC API"></p>
<h5 id="2-6-valueForKey-实现过程"><a href="#2-6-valueForKey-实现过程" class="headerlink" title="2.6 -valueForKey: 实现过程"></a>2.6 <code>-valueForKey:</code> 实现过程</h5><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/KVC%20Process.jpg" alt="valueForKey:"></p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref:"></a>Ref:</h3><ul>
<li><a href="https://www.objc.io/issues/7-foundation/key-value-coding-and-observing/" target="_blank" rel="external">https://www.objc.io/issues/7-foundation/key-value-coding-and-observing/</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html</a></li>
<li><a href="https://stackoverflow.com/q/3018242/1594792" target="_blank" rel="external">https://stackoverflow.com/q/3018242/1594792</a></li>
<li><a href="https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html" target="_blank" rel="external">https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-KVO&quot;&gt;&lt;a href=&quot;#1-KVO&quot; class=&quot;headerlink&quot; title=&quot;1.KVO&quot;&gt;&lt;/a&gt;1.KVO&lt;/h3&gt;&lt;h5 id=&quot;1-1-属性依赖的机制&quot;&gt;&lt;a href=&quot;#1-1-属性依赖的机制&quot; class=&quot;headerlink&quot; title=&quot;1.1 属性依赖的机制&quot;&gt;&lt;/a&gt;1.1 属性依赖的机制&lt;/h5&gt;&lt;p&gt;在objc.io讲解KVC和KVO的一篇&lt;a href=&quot;https://www.objc.io/issues/7-foundation/key-value-coding-and-observing/&quot;&gt;文章&lt;/a&gt;中，举了一个体现属性依赖机制的例子，例子的逻辑结构如下图。完整代码见&lt;a href=&quot;https://github.com/objcio/issue-7-lab-color-space-explorer&quot;&gt;github&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="KVC" scheme="http://www.calios.gq/tags/KVC/"/>
    
      <category term="KVO" scheme="http://www.calios.gq/tags/KVO/"/>
    
  </entry>
  
  <entry>
    <title>随笔一则-0422</title>
    <link href="http://www.calios.gq/2017/04/23/%E9%9A%8F%E7%AC%94%E4%B8%80%E5%88%99-0422/"/>
    <id>http://www.calios.gq/2017/04/23/随笔一则-0422/</id>
    <published>2017-04-23T05:32:43.000Z</published>
    <updated>2017-06-12T05:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个兴起参加了美团周末的技术沙龙，技术上的收获不敢说有多少，感想倒是有一些。</p>
<h3 id="所谓长见识，无非是“走出去”和“走进来”"><a href="#所谓长见识，无非是“走出去”和“走进来”" class="headerlink" title="所谓长见识，无非是“走出去”和“走进来”"></a>所谓长见识，无非是“走出去”和“走进来”</h3><p>做小app做惯了，难免井底观天，不知移动开发的深浅了。只有当面向用户量数以万计、十万、百万的app时，一些宏观的问题才会浮出水面。比如说系统模块化的分割，比如说代码的多端复用，比如说性能监控方案。往大了说，这应该是应用系统普遍会遇到的问题，而不仅仅是移动端；往小了说，一个简单的app，如果想从这些方面进行优化，也是需要费一些心思的。</p>
<p>这大概，是我第一次切身地意识到，在大厂工作，是站在巨人的肩膀上这件事吧。虽说用户量高的app不一定是大厂，但大厂的用户量一定不少。</p>
<h3 id="所谓社交，无非是踏出自己的舒适区"><a href="#所谓社交，无非是踏出自己的舒适区" class="headerlink" title="所谓社交，无非是踏出自己的舒适区"></a>所谓社交，无非是踏出自己的舒适区</h3><p>第一次与黑魔法的同学们线下见面，虽然之前有一点小害羞，但见到之后也就没感觉了。互相交流一下对于某个话题的看法，更多的是听他们聊某个自己不甚熟悉的点。终于有一种同伴的感觉。这是对于一直独处的我弥足珍贵的。</p>
<p>想起之前在摄影群，自己也是通过思维导图打开一点局面的，这次也是。可能，这是可以从自己身上深入挖掘的一个点吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个兴起参加了美团周末的技术沙龙，技术上的收获不敢说有多少，感想倒是有一些。&lt;/p&gt;
&lt;h3 id=&quot;所谓长见识，无非是“走出去”和“走进来”&quot;&gt;&lt;a href=&quot;#所谓长见识，无非是“走出去”和“走进来”&quot; class=&quot;headerlink&quot; title=&quot;所谓长见识，
    
    </summary>
    
    
      <category term="PragmaticProgrammer" scheme="http://www.calios.gq/tags/PragmaticProgrammer/"/>
    
      <category term="脑洞开一开" scheme="http://www.calios.gq/tags/%E8%84%91%E6%B4%9E%E5%BC%80%E4%B8%80%E5%BC%80/"/>
    
      <category term="随笔" scheme="http://www.calios.gq/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket初探</title>
    <link href="http://www.calios.gq/2017/04/19/WebSocket%E5%88%9D%E6%8E%A2/"/>
    <id>http://www.calios.gq/2017/04/19/WebSocket初探/</id>
    <published>2017-04-19T06:56:15.000Z</published>
    <updated>2017-06-06T08:04:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基础概要"><a href="#1-基础概要" class="headerlink" title="1.基础概要"></a>1.基础概要</h3><p><strong>应用层</strong>，主要解决如何包装数据：HTTP、FTP、Telnet等。其中，HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。所以是<strong>短连接</strong>。相对而言，socket连接是<strong>长连接</strong>，两端一旦建立连接将不会主动断掉。但由于各种环境因素可能会断开，所以当一个socket连接中没有数据传输时，为了维持连接需要发送<strong>心跳消息</strong>。<br><strong>传输层</strong>，主要解决数据如何在网络中传输：TCP协议。<br><strong>网络层</strong>，主要解决数据如何在网络中传输：IP协议。</p>
<blockquote>
<p>心跳消息（Heartbeat Message）：是一种发送源发送到接收方的消息，这种消息可以让接收方确定发送源是否以及何时出现故障或终止。常用于高可用性或容错处理的目的。</p>
</blockquote>
<p>socket是对TCP/IP协议的封装和应用，本身<strong><strong>并不是协议</strong></strong>，<strong><strong>而是一个调用接口（API）</strong></strong>，通过socket，我们才能使用TCP/IP协议。</p>
<p>“TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。就像操作系统会提供标准的编程接口，比如win32编程接口一样，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。”</p>
<blockquote>
<p><strong>TCP连接的三次握手和四次分手：</strong><br>来自网络的流程图：<br><img src="http://7xkwcv.com1.z0.glb.clouddn.com/TCP3344.jpg" alt="TCP3344"></p>
<p><strong>TCP与UDP的区别：</strong></p>
<ul>
<li>TCP是面向连接的，保证连接的可靠性；</li>
<li>UDP在传送数据之前并不与对方建立连接，对收到的数据也不发送确认信号，是无连接的、不可靠的数据传输协议。</li>
<li>MSN采用TCP协议，QQ采用UDP，所以后者更快一些。</li>
</ul>
</blockquote>
<h3 id="2-利用Socket建立网络连接的步骤"><a href="#2-利用Socket建立网络连接的步骤" class="headerlink" title="2.利用Socket建立网络连接的步骤"></a>2.利用Socket建立网络连接的步骤</h3><p>ClientSocket，ServerSocket</p>
<p>套接字之间的连接步骤：</p>
<ul>
<li>服务器监听：处于等待客户端连接请求的状态，实时监控网络状态。</li>
<li>客户端请求：ClientSocket必须首先描述它要连接的ServerSocket，指出ServerSocket的地址和端口号，然后提出连接请求。</li>
<li>连接确认：当ServerSocket接收到ClientSocket的连接请求时，就响应请求，建立一个新的线程，把ServerSocket的描述发给ClientSocket，一旦Client确认了此描述，双方就正式建立连接。而ServerSocket继续处于监听状态，继续接收其他ClientSocket的连接请求。</li>
</ul>
<h3 id="3-WebSocket"><a href="#3-WebSocket" class="headerlink" title="3.WebSocket"></a>3.WebSocket</h3><p>WebSocket是HTML5开始提供的一种浏览器和服务器间进行<strong>全双工通讯</strong>的网络技术。在WebSocket API中，浏览器和服务器只需要做一个握手的动作，就可以形成一条快速通道，二者就可以直接进行数据互传。</p>
<blockquote>
<p>全双工：通讯传输的术语。指可以同时（瞬时）进行信号的双向传输。与之相对，单工就是只允许甲方向乙方传送信息，而乙方不能向甲方传送。</p>
</blockquote>
<p>面对这种情况，HTML5定义了WebSocket协议，节省服务器资源和带宽，并达到实时通讯。</p>
<p>具体规范见<a href="https://tools.ietf.org/html/rfc6455#section-4" target="_blank" rel="external">官网的RFC 6455文档</a>及<a href="https://www.gitbook.com/book/chenjianlong/rfc-6455-websocket-protocol-in-chinese/details" target="_blank" rel="external">翻译版本</a>。</p>
<p>客户端的WebSocket对象共绑定了四个事件：</p>
<ul>
<li>onopen：连接建立时触发；</li>
<li>onmessage：收到服务器消息时触发；</li>
<li>onerror：连接出错时触发；</li>
<li>onclose：连接关闭时触发。</li>
</ul>
<blockquote>
<p>socket与websocket的差别：</p>
<ul>
<li>socket是更底层。</li>
<li>websocket是在普通的socket的基础上添加一些framing和一次http兼容的握手机制。这个http兼容的握手机制只是为了允许websocket在webserver运行的同一个端口上进行连接，但一旦连接建立，webserver就不再loop中了。</li>
</ul>
</blockquote>
<h3 id="4-IM即时聊天的解决方案"><a href="#4-IM即时聊天的解决方案" class="headerlink" title="4.IM即时聊天的解决方案"></a>4.IM即时聊天的解决方案</h3><p>IM的主流技术：</p>
<ul>
<li>http polling：即轮询，是在特定的时间间隔（如1秒），由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客户端的浏览器。缺点是，浏览器不断向服务器发出请求，HTTP request的header是很长的，里面包含的数据可能很小，占用带宽和服务器资源。</li>
</ul>
<p>来自网络的流程图：<br><img src="http://7xkwcv.com1.z0.glb.clouddn.com/4.1%20Polling" alt="polling"></p>
<ul>
<li>http long-polling：即长轮询，又称comet。当server端没有数据推送到client端时，请求不会立即返回，而是被server端hold住，直到有数据发送，或者超时，才发送响应。client收到响应之后，立即重新发起http请求。</li>
</ul>
<p>来自网络的流程图：<br><img src="http://7xkwcv.com1.z0.glb.clouddn.com/4.2%20Long%20Polling" alt="long polling"></p>
<ul>
<li>socket长连接。</li>
</ul>
<p>Socket开源框架：<a href="https://github.com/robbiehanson/CocoaAsyncSocket" target="_blank" rel="external">CocoaAsyncSocket</a>，<a href="https://github.com/socketio/socket.io-client-swift" target="_blank" rel="external">socketio/socket.io-client-swift</a><br>WebSocket开源框架:<a href="https://github.com/facebook/SocketRocket" target="_blank" rel="external">facebook/SocketRocket</a>，<a href="https://github.com/tidwall/SwiftWebSocket" target="_blank" rel="external">tidwall/SwiftWebSocket</a><br>UI方面开源框架：<a href="https://github.com/jessesquires/JSQMessagesViewController" target="_blank" rel="external">JSQMessagesViewController</a></p>
<p>第三方SDK集成：</p>
<ul>
<li>前期：环信，容联云（集成了聊天、视频、语音）。</li>
<li>Firebase：<a href="https://firebase.google.com/（已墙。。bye。。。）" target="_blank" rel="external">https://firebase.google.com/（已墙。。bye。。。）</a></li>
<li>野狗：<a href="https://www.wilddog.com/（小团队，坐标望京）" target="_blank" rel="external">https://www.wilddog.com/（小团队，坐标望京）</a></li>
<li>微信用的WebRTC。</li>
</ul>
<p>其他协议：</p>
<ul>
<li>MQTT：是一个客户端服务端架构的发布/订阅模式的消息传输协议。知名的IM移动app，应该都是用的这个。听说XMPP到一定并发量有天坑。。？</li>
<li>XMPP：是一种以XML为基础的开放式即时通信协议。</li>
</ul>
<h3 id="5-iOS端与web端通过socket建立通讯"><a href="#5-iOS端与web端通过socket建立通讯" class="headerlink" title="5.iOS端与web端通过socket建立通讯"></a>5.iOS端与web端通过socket建立通讯</h3><p>web端：使用的是nodejs的socket.io。<br>iOS端：使用的是<a href="https://github.com/socketio/socket.io-client-swift" target="_blank" rel="external">socket.io的Swift版本</a>。</p>
<h5 id="5-1-web端配置"><a href="#5-1-web端配置" class="headerlink" title="5.1 web端配置"></a>5.1 web端配置</h5><ul>
<li>安装node.js：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></li>
<li>安装node.js的web框架express：<code>npm install —save express@4.15.2</code></li>
<li>创建index.js并添加如下代码：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.send(<span class="string">'&lt;h1&gt;Hello world&lt;/h1&gt;'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">http.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'listening on *:3000'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><p>运行 <code>node index.js</code>，terminal显示正在监听3000端口。<br><img src="http://7xkwcv.com1.z0.glb.clouddn.com/5.1.1%20run%20node" alt="run node"></p>
</li>
<li><p>浏览器访问<a href="http://localhost:3000。" target="_blank" rel="external">http://localhost:3000。</a><br><img src="http://7xkwcv.com1.z0.glb.clouddn.com/5.1%20visit%20localhost" alt="visit localhost"></p>
</li>
<li><p>添加显示对话窗口的html页面。</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.IO chat<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">      * &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">box-sizing</span>: border-box; &#125;</div><div class="line">      <span class="selector-tag">body</span> &#123; <span class="attribute">font</span>: <span class="number">13px</span> Helvetica, Arial; &#125;</div><div class="line">      <span class="selector-tag">form</span> &#123; <span class="attribute">background</span>: <span class="number">#000</span>; <span class="attribute">padding</span>: <span class="number">3px</span>; <span class="attribute">position</span>: fixed; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">100%</span>; &#125;</div><div class="line">      <span class="selector-tag">form</span> <span class="selector-tag">input</span> &#123; <span class="attribute">border</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="attribute">width</span>: <span class="number">90%</span>; <span class="attribute">margin-right</span>: .<span class="number">5%</span>; &#125;</div><div class="line">      <span class="selector-tag">form</span> <span class="selector-tag">button</span> &#123; <span class="attribute">width</span>: <span class="number">9%</span>; <span class="attribute">background</span>: <span class="built_in">rgb</span>(130, 224, 255); <span class="attribute">border</span>: none; <span class="attribute">padding</span>: <span class="number">10px</span>; &#125;</div><div class="line">      <span class="selector-id">#messages</span> &#123; <span class="attribute">list-style-type</span>: none; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</div><div class="line">      <span class="selector-id">#messages</span> <span class="selector-tag">li</span> &#123; <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>; &#125;</div><div class="line">      <span class="selector-id">#messages</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(odd)</span> &#123; <span class="attribute">background</span>: <span class="number">#eee</span>; &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"messages"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"m"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>安装socket.io：<code>npm install —save socket.io</code>。</li>
<li><p>将socket相关的逻辑已更新到sample的<code>index.js</code>和<code>index.html</code>中。</p>
</li>
<li><p>最终，两个浏览器窗口之间，可以进行实时接发消息，web端配置就完成了。</p>
</li>
</ul>
<h5 id="5-2-iOS端配置"><a href="#5-2-iOS端配置" class="headerlink" title="5.2 iOS端配置"></a>5.2 iOS端配置</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>cd WebSocketSample/ClientWebSocket</div><div class="line"><span class="variable">$ </span>open SocketChat.xcodeproj</div></pre></td></tr></table></figure>
<p>项目完整代码见Github: <a href="https://github.com/CaliosD/WebSocketSample" target="_blank" rel="external">https://github.com/CaliosD/WebSocketSample</a></p>
<h3 id="6-参考文档"><a href="#6-参考文档" class="headerlink" title="6.参考文档"></a>6.参考文档</h3><ul>
<li><a href="https://socket.io/get-started/chat/" target="_blank" rel="external">https://socket.io/get-started/chat/</a></li>
<li><a href="http://www.appcoda.com/socket-io-chat-app/" target="_blank" rel="external">http://www.appcoda.com/socket-io-chat-app/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-基础概要&quot;&gt;&lt;a href=&quot;#1-基础概要&quot; class=&quot;headerlink&quot; title=&quot;1.基础概要&quot;&gt;&lt;/a&gt;1.基础概要&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;应用层&lt;/strong&gt;，主要解决如何包装数据：HTTP、FTP、Telnet等。其中，HT
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="WebSocket" scheme="http://www.calios.gq/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>Regex Notes</title>
    <link href="http://www.calios.gq/2017/04/15/Regex-Notes/"/>
    <id>http://www.calios.gq/2017/04/15/Regex-Notes/</id>
    <published>2017-04-15T07:33:47.000Z</published>
    <updated>2017-06-06T06:26:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Some-definitions-before-we-start"><a href="#Some-definitions-before-we-start" class="headerlink" title="Some definitions before we start:"></a>Some definitions before we start:</h3><ul>
<li><strong>literal</strong>: A <strong>literal</strong> is any character we use in a search or matching expression, for example, to find <strong>ind</strong> in w <strong>ind</strong> ows the <strong>ind</strong> is a <strong>literal</strong> string - each character plays a part in the search, it is <strong>literally</strong> the string we want to find.</li>
</ul>
<a id="more"></a>
<ul>
<li><strong>metacharacter</strong>: A <strong>metacharacter</strong> is one or more special characters that have a unique meaning and are NOT used as <strong>literals</strong> in the search expression, for example, the character ^ (circumflex or caret) is a <strong>metacharacter</strong>.</li>
<li><strong>target string</strong>: This term describes the string that we will be searching, that is, the string in which we want to find our match or search pattern.</li>
<li><strong>search expression</strong>: Most commonly called the regular expression. This term describes the search expression that we will be using to search our target string, that is, the pattern we use to find what we want.</li>
<li><strong>escape sequence</strong>: An <strong>escape sequence</strong> is a way of indicating that we want to use one of our <strong>metacharacters</strong> as a <strong>literal</strong>. In a regular expression an <strong>escape sequence</strong> involves placing the <strong>metacharacter</strong> <code>\</code> (backslash) in front of the <strong>metacharacter</strong> that we want to use as a <strong>literal</strong>, for example, if we want to find <strong>(s)</strong> in the target string <strong>window(s)</strong> then we use the search expression <code>\(s\)</code> and if we want to find <code>\\file</code> in the target string <code>:\\file</code> then we would need to use the search expression <code>\\\\file</code> (each <code>\</code> we want to search for as a <strong>literal</strong> (there are 2) is preceded by an <strong>escape sequence )</strong>.</li>
</ul>
<h3 id="1-Brackets-Ranges-and-Negation"><a href="#1-Brackets-Ranges-and-Negation" class="headerlink" title="1.Brackets, Ranges and Negation"></a>1.Brackets, Ranges and Negation</h3><ul>
<li><code>[ ]</code> : Match anything inside the square brackets for <strong>ONE character position, once and only once</strong>.</li>
<li><code>-</code> : The - (dash) <strong>inside square brackets</strong> is the ‘range separator’ and allows us to define a range.<ul>
<li>Note: - inside brackets(as a literal) must come first or last.</li>
</ul>
</li>
<li><code>^</code> : The ^ (circumflex or caret) <strong>inside square brackets</strong> negates the expression.<ul>
<li>Note: There are no spaces between the range delimiter values.</li>
</ul>
</li>
</ul>
<h3 id="2-Positioning-or-Anchors"><a href="#2-Positioning-or-Anchors" class="headerlink" title="2.Positioning (or Anchors)"></a>2.Positioning (or Anchors)</h3><ul>
<li><code>^</code> : The ^ (circumflex or caret) <strong>when not used inside square brackets</strong> means look only at the beginning of the target string.</li>
<li><code>$</code> : The $ (dollar) means look only at the end of the target string.</li>
<li><code>.</code> : The . (period) means any character(s) in this position.</li>
</ul>
<p>3.Iteration ‘metacharacters’</p>
<p>The following is a set of <strong>iteration metacharacters</strong> that can control the <strong>number of times</strong> the <strong>preceding</strong> character is found in our searches.</p>
<ul>
<li><code>?</code> : The ? (question mark) matches when the preceding character occurs 0 or 1 times only.</li>
<li><code>*</code>: The * (asterisk or star) matches when the preceding character occurs 0 or more times.</li>
<li><code>+</code> : The + (plus) matches when the preceding character occurs 1 or more times.</li>
<li><code>{n}</code> : Matches when the preceding character, or character range, occurs n times exactly.</li>
<li><code>{n,m}</code> : Matches when the preceding character occurs at least n times but not more than m times.</li>
<li><code>{n, }</code> : Matches when the preceding character occurs at least n times.</li>
</ul>
<h3 id="4-More-‘metacharacters’"><a href="#4-More-‘metacharacters’" class="headerlink" title="4.More ‘metacharacters’"></a>4.More ‘metacharacters’</h3><ul>
<li><code>()</code> : The ( (open parenthesis) and ) (close parenthesis) may be used to group (or bind) parts of our search expression together. Officially this is called a subexpression and subexpressions may be nested to any depth.</li>
<li><code>|</code>: The | (vertical bar or pipe) is called alternation in techspeak and means find the left hand OR right values.</li>
</ul>
<h3 id="5-Common-Extensions-and-Abbreviations"><a href="#5-Common-Extensions-and-Abbreviations" class="headerlink" title="5.Common Extensions and Abbreviations"></a>5.Common Extensions and Abbreviations</h3><ul>
<li><code>\d</code> : Match any character in the range 0 - 9.</li>
<li><code>\D</code> : Match any character NOT in the range 0 - 9.</li>
<li><code>\s</code> : Match any whitespace characters (space, tab etc.).</li>
<li><code>\S</code> : Match any character NOT whitespace (space, tab).</li>
<li><code>\w</code> : Match any character in the range 0 - 9, A - Z, a - z and punctuation.</li>
<li><code>\W</code> : Match any character NOT the range 0 - 9, A - Z, a - z and punctuation.</li>
<li><code>\b</code> : Word boundary. Match any character(s) at the beginning <code>(\bxx)</code> and/or end <code>(xx\b)</code> of a word.</li>
<li><code>\B</code> : Not word boundary. Match any character(s) NOT at the beginning <code>(\bxx)</code> and/or end <code>(xx\b)</code> of a word.</li>
</ul>
<p><strong>PS</strong>: Punctuation symbols: <code>. , &quot; &#39; ? ! ; : # $ % &amp; ( ) * + - / &lt; &gt; = @ [ ] \ ^ _ { } | ~</code></p>
<h3 id="6-Some-pragmatic-gists-for-checking-URL-validation-in-Objective-C"><a href="#6-Some-pragmatic-gists-for-checking-URL-validation-in-Objective-C" class="headerlink" title="6.Some pragmatic gists for checking URL validation in Objective-C"></a>6.Some pragmatic gists for checking URL validation in Objective-C</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IP address check.</span></div><div class="line">- (<span class="built_in">BOOL</span>)isIPAddress &#123;</div><div class="line">    <span class="built_in">NSString</span> *result = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> containsProtocol]) &#123;</div><div class="line">        result = [result componentsSeparatedByString:<span class="string">@"//"</span>].lastObject;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSRegularExpression</span> *regex = [[<span class="built_in">NSRegularExpression</span> alloc] initWithPattern:<span class="string">@"[a-zA-Z]"</span> options:<span class="number">0</span> error:<span class="literal">NULL</span>];</div><div class="line">    <span class="built_in">NSInteger</span> matches = [regex numberOfMatchesInString:result options:<span class="number">0</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, result.length)];</div><div class="line">    <span class="keyword">return</span> (matches &lt;= <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IP address validation check.</span></div><div class="line">- (<span class="built_in">BOOL</span>)isValidIPAddress &#123;</div><div class="line">    <span class="built_in">NSString</span> *result = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> containsProtocol]) &#123;</div><div class="line">        result = [result componentsSeparatedByString:<span class="string">@"//"</span>].lastObject;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSString</span> *ipRegEx = <span class="string">@"(\\d&#123;1,3&#125;\\.)&#123;3&#125;(\\d)&#123;1,3&#125;(:\\d&#123;1,&#125;)?"</span>;</div><div class="line">    <span class="built_in">NSPredicate</span> *ipTest = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, ipRegEx];</div><div class="line">    <span class="keyword">return</span> [ipTest evaluateWithObject:result];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DNS address validation check.</span></div><div class="line">- (<span class="built_in">BOOL</span>)isValidDNSAddress &#123;</div><div class="line">    <span class="built_in">NSString</span> *result = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> containsProtocol]) &#123;</div><div class="line">        result = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"http://%@"</span>,<span class="keyword">self</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSString</span> *urlRegEx =</div><div class="line">    <span class="string">@"(http|https)://((\\w)*|([0-9]*)|([-|_])*)+([\\.|/]((\\w)*|([0-9]*)|([-|_])*))+(:[0-9]&#123;1,&#125;)?"</span>;</div><div class="line">    <span class="built_in">NSPredicate</span> *urlTest = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, urlRegEx];</div><div class="line">    <span class="keyword">return</span> [urlTest evaluateWithObject:result];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>For more details and test case, please check <a href="https://gist.github.com/CaliosD/9e4262d0151764f3a07b32dc2ce90eff" target="_blank" rel="external">here</a>.</p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul>
<li><a href="http://www.zytrax.com/tech/web/regex.htm" target="_blank" rel="external">http://www.zytrax.com/tech/web/regex.htm</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Some-definitions-before-we-start&quot;&gt;&lt;a href=&quot;#Some-definitions-before-we-start&quot; class=&quot;headerlink&quot; title=&quot;Some definitions before we start:&quot;&gt;&lt;/a&gt;Some definitions before we start:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;literal&lt;/strong&gt;: A &lt;strong&gt;literal&lt;/strong&gt; is any character we use in a search or matching expression, for example, to find &lt;strong&gt;ind&lt;/strong&gt; in w &lt;strong&gt;ind&lt;/strong&gt; ows the &lt;strong&gt;ind&lt;/strong&gt; is a &lt;strong&gt;literal&lt;/strong&gt; string - each character plays a part in the search, it is &lt;strong&gt;literally&lt;/strong&gt; the string we want to find.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="Regex" scheme="http://www.calios.gq/tags/Regex/"/>
    
  </entry>
  
  <entry>
    <title>CAS登录之iOS端总结</title>
    <link href="http://www.calios.gq/2017/04/12/CAS%E7%99%BB%E5%BD%95%E4%B9%8BiOS%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://www.calios.gq/2017/04/12/CAS登录之iOS端总结/</id>
    <published>2017-04-12T06:41:09.000Z</published>
    <updated>2017-06-06T07:04:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>CAS（集中式认证服务，Central Authentication Service）登录在后台开发中使用很广泛，它可以允许一个用户访问多个web app，而只需要提供一次凭证（如用户名和密码）。不仅方便用户跨程序使用系统，也实现了认证和web app分类，提高了安全性。</p>
<p>目前在移动端（本文以iOS为例）涉及到CAS登录的项目主要有两种实现方式：CAS模拟登录和RESTful方式的登录。现总结如下，供以后备查。</p>
<a id="more"></a>
<h3 id="1-CAS模拟登录"><a href="#1-CAS模拟登录" class="headerlink" title="1.CAS模拟登录"></a>1.CAS模拟登录</h3><p>这种方式相当于模拟登录web端，在请求回web app的登录页面后，返回CAS登录页面，从中获取lt和execution，请求CAS登录接口时，带上service=BaseURL/web-name/shiro-cas，通过这个操作判断是否登录，如果登录，就在web server中种入session，使得之后移动端调用web server的接口可以生效。</p>
<h5 id="1-1-使用的项目"><a href="#1-1-使用的项目" class="headerlink" title="1.1 使用的项目"></a>1.1 使用的项目</h5><p>CAS不被公司拥有的、无法提供Restful方式的项目接口。</p>
<h5 id="1-2-登录流程示意图"><a href="#1-2-登录流程示意图" class="headerlink" title="1.2 登录流程示意图"></a>1.2 登录流程示意图</h5><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/CAS%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE-%E8%84%B1%E6%95%8F.jpg" alt="CAS模拟登录示意图"></p>
<p>注：</p>
<ul>
<li>Step1为GET，Step2、3为POST。</li>
<li>Step2的j_captcha_response即为验证码。</li>
<li>请求验证码一步非必需。</li>
</ul>
<h3 id="2-RESTful方式"><a href="#2-RESTful方式" class="headerlink" title="2.RESTful方式"></a>2.RESTful方式</h3><p>可以使用Github上的开源demo（<a href="https://github.com/acu-dev/objc-cas-client）实现，也可以直接使用AFNetworking实现。本质上流程完全相同。" target="_blank" rel="external">https://github.com/acu-dev/objc-cas-client）实现，也可以直接使用AFNetworking实现。本质上流程完全相同。</a></p>
<h5 id="2-1-登录流程示意图"><a href="#2-1-登录流程示意图" class="headerlink" title="2.1 登录流程示意图"></a>2.1 登录流程示意图</h5><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/CAS%E7%99%BB%E5%BD%95RESTful%E6%B5%81%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE-%E8%84%B1%E6%95%8F.jpg" alt="RESTful方式"></p>
<p>注：</p>
<ul>
<li>Step1、2、3均为POST。</li>
</ul>
<h5 id="2-2-技术细节"><a href="#2-2-技术细节" class="headerlink" title="2.2 技术细节"></a>2.2 技术细节</h5><ul>
<li>Step1：请求TGT时 server路径形如：<a href="http://xxx.xxx.xxx.xxx/cas/v1/tickets/" target="_blank" rel="external">http://xxx.xxx.xxx.xxx/cas/v1/tickets/</a> 。需要传递账号密码参数给CAS，形如： account=somebody&amp;password=password。TGT请求成功时响应状态码为201，并且包含Location字段，形如：Location: <a href="http://www.whatever.com/cas/v1/tickets/{TGT" target="_blank" rel="external">http://www.whatever.com/cas/v1/tickets/{TGT</a> id}，然后截取TGT并保存。</li>
<li>Step2：根据TGT 请求ST server路径形如：<a href="http://xxx.xxx.xxx.xxx//cas/v1/tickets/TGT-xxxxxxxxx。参数形如：service=http://localhost:8080/web-name，成功后保存返回的ST。" target="_blank" rel="external">http://xxx.xxx.xxx.xxx//cas/v1/tickets/TGT-xxxxxxxxx。参数形如：service=http://localhost:8080/web-name，成功后保存返回的ST。</a></li>
<li>Step3：调用WebServer登录接口需要将获得的ST作为参数传递，形如：cas-service-ticket=ST-xxxxxxxxx.</li>
<li>登出CAS请求（DELETE）形如：<a href="http://xxx.xxx.xxx.xxx/cas/v1/tickets/TGT-xxxxxxxxx。然后向WebServer发起POST登出请求（即调用接口" target="_blank" rel="external">http://xxx.xxx.xxx.xxx/cas/v1/tickets/TGT-xxxxxxxxx。然后向WebServer发起POST登出请求（即调用接口</a> /web-name/logout） 成功后判定为整个登出流程完成。</li>
</ul>
<h3 id="3-参考资料："><a href="#3-参考资料：" class="headerlink" title="3.参考资料："></a>3.参考资料：</h3><ul>
<li>CAS原理介绍：<a href="http://p.primeton.com/articles/53c64e25e13823319f000068" target="_blank" rel="external">http://p.primeton.com/articles/53c64e25e13823319f000068</a></li>
<li>CAS认证的说明：<a href="https://www.purdue.edu/apps/account/html/cas_presentation_20110407.pdf" target="_blank" rel="external">https://www.purdue.edu/apps/account/html/cas_presentation_20110407.pdf</a></li>
<li>iOS开源Demo：<a href="https://github.com/acu-dev/objc-cas-client" target="_blank" rel="external">https://github.com/acu-dev/objc-cas-client</a></li>
<li>Jasig CAS RESTful API：<a href="https://wiki.jasig.org/display/CASUM/RESTful+API" target="_blank" rel="external">https://wiki.jasig.org/display/CASUM/RESTful+API</a></li>
<li>REST Protocol：<a href="https://apereo.github.io/cas/4.2.x/protocol/REST-Protocol.html" target="_blank" rel="external">https://apereo.github.io/cas/4.2.x/protocol/REST-Protocol.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CAS（集中式认证服务，Central Authentication Service）登录在后台开发中使用很广泛，它可以允许一个用户访问多个web app，而只需要提供一次凭证（如用户名和密码）。不仅方便用户跨程序使用系统，也实现了认证和web app分类，提高了安全性。&lt;/p&gt;
&lt;p&gt;目前在移动端（本文以iOS为例）涉及到CAS登录的项目主要有两种实现方式：CAS模拟登录和RESTful方式的登录。现总结如下，供以后备查。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="CAS" scheme="http://www.calios.gq/tags/CAS/"/>
    
  </entry>
  
  <entry>
    <title>GPS and related</title>
    <link href="http://www.calios.gq/2017/03/22/GPS-and-related/"/>
    <id>http://www.calios.gq/2017/03/22/GPS-and-related/</id>
    <published>2017-03-22T06:35:02.000Z</published>
    <updated>2017-04-12T07:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="iPhone-Location-How-apps-access-the-iPhone-location-and-what-they-can-do-with-it"><a href="#iPhone-Location-How-apps-access-the-iPhone-location-and-what-they-can-do-with-it" class="headerlink" title="iPhone Location: How apps access the iPhone location and what they can do with it."></a>iPhone Location: How apps access the iPhone location and what they can do with it.</h3><ul>
<li>Requesting an appropriate level of accuracy(the options are 3km, 1km, 100m, 10m, Best, or Best for navigation) is all about minimizing battery drain.<ul>
<li>At a low of accuracy(e.g. 3km), the phone could determine its location solely from cellular or wifi signals, which would avoid powering up the GPS and conserve battery life.</li>
<li>At higher levels of accuracy(e.g. 10m), the phone listens to all available signals that it can use to determine its location — which includes GPS and iBeacons, in addition to wifi and cellular</li>
<li>Apple does not say specifically say which signals are used at which levels of accuracy.</li>
</ul>
</li>
<li>An app can force the use of GPS by specifying “Best” — this will cause the phone to use GPS constantly to determine location as accurately as possible.</li>
<li>When the phone has a lock on 4 satellites, it can determine its elevation.<ul>
<li>With 3 satellites, it can only determine location.</li>
</ul>
</li>
<li>Significant Location Changes Only<ul>
<li>As an alternative to receiving updates every time the phone moves, an app can request that it receive a location update only when the phone’s location has changed “significantly”.</li>
<li>This will avoid powering up the GPS and will rely on cell towers and wifi signals only — resulting in substantially reduced power consumption.</li>
<li>“Significant” is not defined.</li>
</ul>
</li>
<li>Region Monitoring<ul>
<li>where an app defines one or more regions by specifying their center and radius.</li>
<li>Then the phone notifies the app whenever it enters or exits a region.</li>
<li>This uses wifi and cell towers only, so accuracy is similar to “significant changes only” and regions will only work if they are fairly large.</li>
</ul>
</li>
<li>iBeacons<ul>
<li>iBeacons are small wireless sensors that can transmit data to an iPhone using Bluetooth Low Energy(BLE)</li>
<li>iBeacons allow apps to receive special promotions, coupons, recommendations, etc, from business in real time when users are nearby</li>
<li>An app can display the information received from the business, or it can make use of the knowledge that the iBeacon is nearby for navigational purposes as a form of region monitoring.</li>
</ul>
</li>
<li>Inaccuracy Makes Distances Long<ul>
<li>When tracking the user’s path with high level of accuracy, any inaccuracies in location measurement will almost always cause the path to be longer than it should.</li>
</ul>
</li>
<li>“Snapping” to Roads<ul>
<li>To counteract the extra distance problem and provide a smoother path, iPhone will “snap” location updates to a known road network when the user is traveling about 15mph(on the assumption that the user is driving or biking during that time).</li>
<li>Apps have no way of knowing when this is happening — all they see are location updates like normal, but when the locations are later projected on a map, it is clear when this was happening.</li>
</ul>
</li>
<li>GPS Signal Quality<ul>
<li>GPS requires line-of-sight communication, so anything that blocks a direct path from the phone to a satellite can interfere with the signal (this includes trees, mountains, buildings, car roofs, etc)</li>
<li>When a direct GPS signal is blocked and the user is near a large solid object like a building, the GPS signal can arrive at the phone indirectly after bouncing off the building.</li>
<li>Because GPS works by measuring very precisely how long the signal takes to get from the satellite to the phone, when the signal takes a longer path like this, the calculated location will be off.</li>
</ul>
</li>
<li>Post-Processing<ul>
<li>It is difficult to overcome these limitations on the phone while the app is running.</li>
<li>However, if the app is recording a user’s path and saving it to a server(e.g. the way a fitness tracking app would), the server can make some corrections after upload, such as<ul>
<li>Snapping to roads or other known locations</li>
<li>Smoothing out jagged parts of the path</li>
<li>Replacing the inaccurate elevation reported by the phone with known elevation at that location</li>
</ul>
</li>
</ul>
</li>
<li>Map Displays<ul>
<li>iPhone makes displaying maps in apps really easy</li>
<li>Many common functions are built-in and require very little from the app developer, including:<ul>
<li>Displaying user location on the map</li>
<li>Displaying annotations and overlays on the map that zoom and scale with the map</li>
<li>Centering the map on the user’s location</li>
</ul>
</li>
<li>Geocoding(getting latitude/longitude coordinates from an address) and reverse geocoding(getting an address from latitude/longitude coordinates) is also built-in and quite easy to use</li>
</ul>
</li>
<li><strong>How iPhone determines its location:</strong><ul>
<li>Four types of signals<ul>
<li>iPhone can use 4 different types of signals to determine its location<ul>
<li>Cellular</li>
<li>Wifi</li>
<li>GPS</li>
<li>Bluetooth (from iBeacons)</li>
</ul>
</li>
<li>The phone’s location is determined by combining one or more of these signals(Which signals are used depends on availability and the requested accuracy)</li>
<li>All of this happens behind the scenes — any app can access the location of the phone, but the app does not know how it was calculated</li>
</ul>
</li>
<li>Cellular<ul>
<li>The location of cell towers is known to a high degree of accuracy. Based on the signal strength from various towers, the phone can estimate how far it is from each of them and calculate the phone’s location</li>
<li>This is always available when the phone has cell coverage, but is not very accurate since the towers can be far away and distance based on signal strength is not very accurate</li>
</ul>
</li>
<li>Wifi<ul>
<li>The phone uses the same process to determine location using wifi signals as it does for cellular signals, with distance estimated to the wifi hotspots based on signal strength</li>
<li>The locations of wifi hotspots have been crowdsourced for this purpose</li>
<li>Using wifi is more accurate than cell towers, but the user needs to have wifi turned on</li>
</ul>
</li>
<li>iBeacons<ul>
<li>When the phone detects a Bluetooth Low Energy signal from an iBeacon, in addition to knowing that an iBeacon is nearby, the phone can use the relative signal strength from multiple iBeacons to determine its location using the same technique that it uses for cellular and wifi signals</li>
<li>iBeacon signals only travel about 50 feet, so this location would be fairly accurate</li>
<li>This is particularly useful indoors, where GPS reception is poor</li>
</ul>
</li>
<li>GPS<ul>
<li>GPS is the most accurate of the 4 signals, but it is slow to get started</li>
<li>The phone needs to “lock on” 3-4 satellites within its line of sight before it can use GPS to determine location<ul>
<li>This can take anywhere from 15 seconds to several minutes, depending on the phone’s view of the sky</li>
<li>3 satellites can provide location; a fourth provides elevation</li>
<li>The phone uses its location calculated from other sources(e.g. cellular and wifi) to determine which satellites are within its line of sight at the current time, speeding up this process(this is called Assisted GPS, or A-GPS)</li>
</ul>
</li>
<li>Before the phone has a GPS lock, location is less accurate</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="In-iOS8-is-there-any-way-to-turn-off-all-radios-EXCEPT-GPS"><a href="#In-iOS8-is-there-any-way-to-turn-off-all-radios-EXCEPT-GPS" class="headerlink" title="In iOS8 is there any way to turn off all radios EXCEPT GPS?"></a>In iOS8 is there any way to turn off all radios EXCEPT GPS?</h3><p>(Latest answer on Aug 13, 2016. <a href="https://discussions.apple.com/thread/6543352?start=15&amp;tstart=0" target="_blank" rel="external">https://discussions.apple.com/thread/6543352?start=15&amp;tstart=0</a>)<br>iOS 9 has enabled GPS in Airplane mode. Tried and tested, works as it should.<br>iOS 8 walk-around would be setting sim-card pin, restarting the phone, not entering pin#, sim would be deactivated, however the phone would still look for emergency bands.<br>iOS 7 had a bug that would activate GPS when compass app was launched while the phone was in Airplane mode.</p>
<p>Since iOS 8.2, you can still use the GPS even in flight mode.(<a href="http://apple.stackexchange.com/questions/98649/does-airplane-mode-disable-gps?rq=1" target="_blank" rel="external">http://apple.stackexchange.com/questions/98649/does-airplane-mode-disable-gps?rq=1</a>)<br>GPS continues to work in airplane mode. Tested on iPhone 5s and SE with iOS 8, 9 and now 10. It may take longer (up to several minutes)to get the first fix but has full performance afterwards. It even works in an airplane when the iPhone is close to a window.</p>
<hr>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref:"></a>Ref:</h3><ul>
<li><a href="https://learnaboutcoding.wordpress.com/iphone-course/iphone-location/" target="_blank" rel="external">https://learnaboutcoding.wordpress.com/iphone-course/iphone-location/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;iPhone-Location-How-apps-access-the-iPhone-location-and-what-they-can-do-with-it&quot;&gt;&lt;a href=&quot;#iPhone-Location-How-apps-access-the-iPho
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="GPS" scheme="http://www.calios.gq/tags/GPS/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Runtime Programming Guide 翻译及详解</title>
    <link href="http://www.calios.gq/2017/03/16/Objective-C-Runtime-Programming-Guide-%E7%BF%BB%E8%AF%91%E5%8F%8A%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.calios.gq/2017/03/16/Objective-C-Runtime-Programming-Guide-翻译及详解/</id>
    <published>2017-03-16T08:35:30.000Z</published>
    <updated>2017-06-06T08:52:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>近日大脑一抽筋，尝试使用GitBook Editor的同时翻了一篇Runtime Programming的官方文档。</p>
<p>链接在此：<a href="https://caliosd.gitbooks.io/objective-c-runtime-programming-guide/" target="_blank" rel="external">https://caliosd.gitbooks.io/objective-c-runtime-programming-guide/</a></p>
<p>以此留念。欢迎各种批评指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近日大脑一抽筋，尝试使用GitBook Editor的同时翻了一篇Runtime Programming的官方文档。&lt;/p&gt;
&lt;p&gt;链接在此：&lt;a href=&quot;https://caliosd.gitbooks.io/objective-c-runtime-programmi
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://www.calios.gq/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>[SourceRead]-MJExtension</title>
    <link href="http://www.calios.gq/2017/03/07/%5BSourceRead%5D-MJExtension/"/>
    <id>http://www.calios.gq/2017/03/07/[SourceRead]-MJExtension/</id>
    <published>2017-03-07T09:09:51.000Z</published>
    <updated>2017-06-06T08:49:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>MJExtension的源码，从最常用的<code>-objectArrayWithKeyValuesArray:</code>（字典数组转模型数组）和<code>-keyValuesArrayWithObjectArray:</code>（模型数组转字典数组）入手，就进入了<code>NSObject+MJKeyValue</code>分类。在梳理过这个类的实现方法之后，发现归根到底，核心的方法就这两个：<code>-setKeyValue:error:</code>（字典转模型）和<code>-keyValuesWithError:</code>（模型转字典）。</p>
<p>我们分别来看这两个方法。</p>
<h3 id="setKeyValue-error"><a href="#setKeyValue-error" class="headerlink" title="-setKeyValue:error:"></a><code>-setKeyValue:error:</code></h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (instance<span class="keyword">type</span>)setKeyValues:(<span class="type">NSDictionary</span> *)keyValues error:(<span class="type">NSError</span> *__autoreleasing *)error</div><div class="line">&#123;</div><div class="line">    <span class="type">MJAssertError</span>([keyValues isKindOfClass:[<span class="type">NSDictionary</span> class]], self, error, @<span class="string">"keyValues参数不是一个字典"</span>);</div><div class="line">    …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进入函数后，首先是一个断言，保证传入参数是一个字典。这里体现了防御式编程的思想，具体介绍可以看<a href="https://en.wikipedia.org/wiki/Defensive_programming" target="_blank" rel="external">wiki</a>（英文版比中文版的信息完整）。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSArray *ignoredPropertyNames = <span class="literal">nil</span>;</div><div class="line"><span class="keyword">if</span> ([[<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>] <span class="title">respondsToSelector</span>:@<span class="title">selector</span>(<span class="title">ignoredPropertyNames</span>)]) &#123;</span></div><div class="line">      ignoredPropertyNames = [[<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>] <span class="title">ignoredPropertyNames</span>];</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先检查是否有需要忽略的属性，即不进行字典和模型转换的属性。<code>ignoredPropertyNames</code>这个方法来自<code>MJKeyValue</code>协议，除此之外，<code>MJKeyValue</code>协议中还定义了一些对于属性名的特殊处理，如替换属性名（<code>replacedKeyFromPropertyName</code>），指定数组中需要转换的模型类（<code>objectClassInArray</code>），和字典转模型完毕/模型转字典完毕时调用的方法。</p>
<p>往下走，进入核心部分。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[self class] enumerateIvarsWithBlock:^(<span class="name">MJIvar</span> *ivar, BOOL *stop) &#123;    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>enumerateIvarsWithBlock:</code>实现如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)enumerateIvarsWithBlock:(MJIvarsBlock)block</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> MJCachedIvarsKey;</div><div class="line">    <span class="comment">// 获得成员变量</span></div><div class="line">    <span class="built_in">NSMutableArray</span> *cachedIvars = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;MJCachedIvarsKey);    <span class="comment">// A</span></div><div class="line">    <span class="keyword">if</span> (cachedIvars == <span class="literal">nil</span>) &#123;</div><div class="line">        cachedIvars = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"></div><div class="line">        [<span class="keyword">self</span> enumerateClassesWithBlock:^(__<span class="keyword">unsafe_unretained</span> Class c, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">            <span class="comment">// 1.获得所有的成员变量</span></div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount = <span class="number">0</span>;</div><div class="line">            Ivar *ivars = class_copyIvarList(c, &amp;outCount);    <span class="comment">// B</span></div><div class="line"></div><div class="line">            <span class="comment">// 2.遍历每一个成员变量</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i&lt;outCount; i++) &#123;</div><div class="line">                MJIvar *ivar = [MJIvar cachedIvarWithIvar:ivars[i]];    <span class="comment">// C</span></div><div class="line">                ivar.srcClass = c;</div><div class="line">                <span class="built_in">NSString</span> *key = [<span class="keyword">self</span> ivarKey:ivar.propertyName];</div><div class="line">                [ivar setKey:key forClass:<span class="keyword">self</span>];</div><div class="line">                <span class="comment">// 数组中的模型类</span></div><div class="line">                [ivar setObjectClassInArray:[<span class="keyword">self</span> ivarObjectClassInArray:ivar.propertyName] forClass:<span class="keyword">self</span>];</div><div class="line">                [cachedIvars addObject:ivar];    <span class="comment">// D</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 3.释放内存</span></div><div class="line">            free(ivars);    <span class="comment">// B</span></div><div class="line">        &#125;];</div><div class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, &amp;MJCachedIvarsKey, cachedIvars, OBJC_ASSOCIATION_RETAIN_NONATOMIC);    <span class="comment">// A</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 遍历成员变量</span></div><div class="line">    <span class="built_in">BOOL</span> stop = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">for</span> (MJIvar *ivar <span class="keyword">in</span> cachedIvars) &#123;</div><div class="line">        block(ivar, &amp;stop);</div><div class="line">        <span class="keyword">if</span> (stop) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有这样三个点可以看一下：<br>A：<code>id objc_getAssociatedObject(id object, const void *key)</code>和<code>void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)</code>这一对方法，没什么需要赘述的。<br>B：<code>Ivar *class_copyIvarList(Class cls, unsigned int *outCount)</code>经常用来获取类的成员变量列表，返回值是一个指针的数组，类型是Ivar，在使用过之后记得到调用<code>free()</code>来释放数组的内存。</p>
<blockquote>
<p>我在这里简单写了一个获取类的成员变量列表的方法，仅供参考。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)printIvarsOfClass:(Class)c</div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ivarCount = <span class="number">0</span>;</div><div class="line">    Ivar *ivars = class_copyIvarList(c, &amp;ivarCount);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"====== Ivars of %@ are: "</span>, c);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ivarCount; i++) &#123;</div><div class="line">        Ivar var = ivars[i];</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* name = ivar_getName(var);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* typeEncoding = ivar_getTypeEncoding(var);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%s, %s \n"</span>, name, typeEncoding);</div><div class="line">    &#125;</div><div class="line">    free(ivars);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>C：用Ivar初始化一个<code>MJIvar</code>实例。MJIvar可以理解为在原有的Ivar基础上，添加了成员名、成员属性名、类型等常用属性和常用方法。<br>D：将设置好的MJIvar实例添加到缓存的成员变量中，以备后用，同时也提高了后续使用的效率。</p>
<p>后面的代码，作者注释已经很清楚了，就不再赘述。</p>
<h3 id="keyValuesWithError"><a href="#keyValuesWithError" class="headerlink" title="-keyValuesWithError:"></a><code>-keyValuesWithError:</code></h3><p>来看这个核心方法：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSDictionary</span> *)keyValuesWithError:(<span class="built_in">NSError</span> *__autoreleasing *)error</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 如果自己不是模型类</span></div><div class="line">    <span class="keyword">if</span> ([MJFoundation isClassFromFoundation:[<span class="keyword">self</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> (<span class="built_in">NSDictionary</span> *)<span class="keyword">self</span>;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先涉及到<code>MJFoundation</code>类的一个（也是唯一一个）方法：<code>+isClassFromFoundation:</code>。代码并不复杂：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load</div><div class="line">&#123;</div><div class="line">    _foundationClasses = [<span class="built_in">NSSet</span> setWithObjects:</div><div class="line">                          [<span class="built_in">NSObject</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSURL</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSDate</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSNumber</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSDecimalNumber</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSData</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSMutableData</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSArray</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSMutableArray</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSDictionary</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSString</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSMutableString</span> <span class="keyword">class</span>], <span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">BOOL</span>)isClassFromFoundation:(Class)c</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [_foundationClasses containsObject:c];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>只是检查一下传入的类是否属于基本类。这里要看的，其实是它上面的方法<code>+(void)load</code>。</p>
<blockquote>
<p><code>+load</code>在所属类一加载完的时候就会被调用，非常早。如果是在应用中或是应用链接的框架中实现<code>+load</code>，<code>+load</code>会在<code>main()</code>函数调用之前执行。如果是在一个可加载的bundle中实现<code>+load</code>，它就会在bundle加载的过程中执行。<code>+load</code>特别的一点是，如果在类和该类的category中都实现了<code>+load</code>方法，两个<code>+load</code>方法都会被执行。这就意味着<code>+load</code>是存放类似method swizzling这种魔鬼的好地方。:]</p>
<p>与<code>+load</code>类似的是<code>+initialize</code>方法，它是个比<code>+load</code>更安全的存放代码的地方。当类第一次加载的时候，<code>+initialize</code>并不会调用。当有消息发送给类的 时候，runtime会首先检查<code>+initialize</code>是否已经被调用，如果没有，就会在处理消息发送之前先调用<code>+initialize</code>。</p>
</blockquote>
<p>更多关于<code>+load</code>和<code>+initialize</code>的讲解，可以看Mike Ash的<a href="https://www.mikeash.com/pyblog/friday-qa-2009-05-22-objective-c-class-loading-and-initialization.html" target="_blank" rel="external">这篇</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MJExtension的源码，从最常用的&lt;code&gt;-objectArrayWithKeyValuesArray:&lt;/code&gt;（字典数组转模型数组）和&lt;code&gt;-keyValuesArrayWithObjectArray:&lt;/code&gt;（模型数组转字典数组）入手，就进入
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://www.calios.gq/tags/Runtime/"/>
    
      <category term="SourceRead" scheme="http://www.calios.gq/tags/SourceRead/"/>
    
  </entry>
  
  <entry>
    <title>C的几个基本概念：结构体、指针、函数指针、内存分配等</title>
    <link href="http://www.calios.gq/2017/02/27/C%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%9A%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%8C%87%E9%92%88%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E3%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%89/"/>
    <id>http://www.calios.gq/2017/02/27/C的几个基本概念：结构体、指针、函数指针、内存分配等/</id>
    <published>2017-02-27T06:08:45.000Z</published>
    <updated>2017-02-27T06:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="typedef-struct和单纯struct定义的差别"><a href="#typedef-struct和单纯struct定义的差别" class="headerlink" title="typedef struct和单纯struct定义的差别"></a>typedef struct和单纯struct定义的差别</h3><p>通常来说是<code>typedef</code>和<code>struct</code>定义都写。</p>
<figure class="highlight thrift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">X</span> </span>&#123;</div><div class="line">    int x;</div><div class="line">&#125;X;</div></pre></td></tr></table></figure>
<p>为了更加清晰明了，拆成两部分来看：</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span> &#123;            <span class="comment">// 第一部分</span></div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">&#125;;</div><div class="line">typedef <span class="class"><span class="keyword">struct</span> <span class="title">S</span></span> S;   <span class="comment">// 第二部分</span></div></pre></td></tr></table></figure>
<p>首先第一部分，在struct的命名空间中，定义了唯一的<code>S</code>。此时，你可以用<code>struct S</code>来定义变量或者函数的参数。比如这样：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">struct</span> S argument)</span></span>;  <span class="comment">// 这里的struct是必需的</span></div></pre></td></tr></table></figure></p>
<p>第二部分在全局的命名空间中添加了一个叫<code>S</code>的别名，这就允许你这么写了：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(S argument)</span></span>;         <span class="comment">// 这里不再需要struct了</span></div></pre></td></tr></table></figure>
<p>既然定义唯一标识的命名空间不同，在struct中和全局都定义<code>S</code>就没有问题。因为这不是重复定义唯一标识，而是相当于在不同空间创建不同的标识。</p>
<p>让我们把差别表现得更明显一点：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> S &#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">&#125;T;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">S</span><span class="params">()</span> </span>&#123;&#125;     <span class="comment">// 正确</span></div><div class="line"><span class="comment">// void T() &#123;&#125;     // 错误：T已经被定义为struct S的别名了</span></div></pre></td></tr></table></figure>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>对于一个变量而言，可以看做由四部分构成：</p>
<ul>
<li>名字</li>
<li>存储位置</li>
<li>存储的数据类型</li>
<li>当前的值</li>
</ul>
<p>如果能够理解这两点：1.变量是怎样存储的，2.除了名字之外通过其他方式也可以获取变量，那么就几乎可以理解指针的概念了。</p>
<p>先来看一个简单的例子：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">int x = <span class="number">39</span>;     </div><div class="line">int* y = <span class="variable">&amp;x</span>;         </div><div class="line">printf(<span class="string">"x: \n\t value:%d \n\t addr:%p \ny: \n\t value:%d \n\t addr: %p \n"</span>,x,<span class="variable">&amp;x</span>,*y,<span class="variable">&amp;y</span>);</div><div class="line"><span class="symbol"></span></div><div class="line">Output:</div><div class="line"><span class="symbol">x:</span></div><div class="line"><span class="symbol">	 value:</span><span class="number">39</span></div><div class="line"><span class="symbol">	 addr:</span><span class="number">0x7fff5fbff728</span></div><div class="line"><span class="symbol">y:</span></div><div class="line"><span class="symbol">	 value:</span><span class="number">39</span></div><div class="line"><span class="symbol">	 addr:</span> <span class="number">0x7fff5fbff720</span></div></pre></td></tr></table></figure>
<p>我们着重来看这一行：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *y = &amp;x;</div></pre></td></tr></table></figure></p>
<ul>
<li>“*”是指针的标志，意思是我们不想在这个变量中存储的实际的数值，而是只存一个指向这个数值的地址。</li>
<li>“*”前面的数据类型，表示的是从指针存储的地址中一次能够读写的数据字节数。这里是<code>int</code>，所以是32位的4字节，64位的8字节。</li>
<li><code>y</code>是这个指针变量的名字；</li>
<li><code>=</code>是把右边的值赋给左边；</li>
<li><code>&amp;</code>，读作”xx的地址”，是引用的操作符。<strong>引用，意味着将一个已有变量的地址赋给一个指针变量。</strong></li>
</ul>
<p>所以这一句的意思是：把<code>x</code>的地址赋值给一个类型为<code>int</code>的指针变量<code>y</code>。</p>
<p>反过来，一旦你获取了一个存储着地址的指针变量，通过这个指针很自然就可以获取它指向的值，比如上面例子最后一行打印<code>*y</code>可以得到<code>x</code>的值，这个操作就叫做 <strong>解引用</strong>，也可以理解为“按图索骥”，操作符是“*”，可以读作“被xx指向的值”。</p>
<p>对指针的理解，可以类比快捷方式：</p>
<p>比如我在<code>/Users/calios/Desktop</code>路径下创建一个名为<code>aliasTest.txt</code>的文件，打开并输入<code>This is aliasTest file from Desktop.</code>并保存。右键创建快捷方式，并将名为<code>aliasTest.txt alias</code>的快捷方式扔到<code>/Users/calios/Documents</code>路径下。双击<code>aliasTest.txt alias</code>文件，将文件内容修改为<code>This is aliasTest file from Documents.</code>并保存。当然，聪明如你，肯定知道这时候修改的文件其实是源文件<code>aliasTest.txt</code>。此时，无论是从哪个路径下打开文件，看到的都是<code>This is aliasTest file from Documents.</code>。</p>
<p>同理，身处内存不同区域的指针变量，只要存储着同一个变量的地址，那么指向的值就是相同的。</p>
<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>理解了上面的指针，我们来看函数指针。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数声明</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFun</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</div><div class="line"><span class="keyword">void</span> (*funPointer)(<span class="keyword">int</span>);</div><div class="line"></div><div class="line"><span class="comment">// 函数实现</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFun</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"myFun: %d\n"</span>,x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 函数调用</span></div><div class="line">funPointer = &amp;myFun;  <span class="comment">//将myFun函数的地址赋给funPointer变量</span></div><div class="line">(*funPointer)(<span class="number">200</span>);  <span class="comment">//通过函数指针变量来调用函数</span></div></pre></td></tr></table></figure>
<p>函数指针和变量指针在语言层面是没有差别的。但是在运行过程中，变量指针是指向堆区、栈区、静态区和全局区；而函数指针指向text区，就是代码段。所以函数指针执行括号的时候，会执行汇编的jump，就是跳转指令到text段的代码。</p>
<h3 id="指向结构体的指针"><a href="#指向结构体的指针" class="headerlink" title="指向结构体的指针"></a>指向结构体的指针</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">struct <span class="keyword">box </span>*p = …<span class="comment">;</span></div><div class="line">p-&gt;width = <span class="number">20</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p>在处理指向结构体类型的指针时，“-&gt;”可以让你一步实现对指针解引用，并获取指定的字段值。如上面代码中，第二行的“-&gt;”实现了指针p的解引用，并获取了结构体中<code>width</code>字段。</p>
<p>不管结构体的实例是什么——访问其成员其实就是加成员的偏移量。</p>
<h3 id="指针的比较"><a href="#指针的比较" class="headerlink" title="指针的比较"></a>指针的比较</h3><p>在使用指针来读取或修改它指向的值时，有时候通过比较两个指针是否指向同一个值是很有用的。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> data[<span class="number">2</span>] = &#123;<span class="number">99</span>,<span class="number">99</span>&#125;;</div><div class="line"><span class="keyword">int</span> *m = &amp;data[<span class="number">0</span>];</div><div class="line"><span class="keyword">int</span> *n = &amp;data[<span class="number">1</span>];</div><div class="line"><span class="keyword">if</span> (*m == *n) &#123;   <span class="comment">// A</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"the two values are the same"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"the two values ( %p vs %p ) are different"</span>,m,n);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>观察A处的判断条件，如果是<code>(*m == *n)</code>，比较的是两个指针指向的值是否相同，所以会走第一个分支；而如果是<code>(m == n)</code>，则比较的是两个指针本身的地址，所以会走第二个分支。</p>
<h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><p>在C语言中的，不指向任何数据的空指针用<code>NULL</code>表示。例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;</div></pre></td></tr></table></figure></p>
<p>而在Objective-C中通常用<code>nil</code>表示指向一个空对象，并逐渐摒弃了C中用<code>NULL</code>表示的方式。</p>
<p>同时也要注意，不要试图对NULL指针获取解引用，这会导致错误并立即退出程序。</p>
<h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><p>在讲解C语言中的内存区块分配之前，先来看一点说明。</p>
<p>通常来说可以把变量分成三种：</p>
<ul>
<li>局部变量</li>
<li>全局变量</li>
<li>静态变量<br>可以由它们组合成“全局静态变量”或是“局部静态变量”。</li>
</ul>
<p>接着我们来看五个内存区块：</p>
<p>1.程序区：也用来指代文本区，是存储可执行程序的二进制代码的区域。<br>2.数据区：分成以下两部分，通常位于堆的上面或者栈的上面，但绝不会在堆和栈之间的区域。</p>
<ul>
<li>未初始化的数据区：也叫<code>bss</code>。包括未初始化的全局变量、全局常量和局部静态变量。</li>
<li>初始化的数据区：包括初始化的全局变量、全局常量和局部静态变量。这部分的大小取决于源代码中数值所占的大小，在运行时不会改变。<br>3.栈区：用来存储函数中创建的变量，比如函数中的局部变量、传入函数的参数和返回值等。在栈中存储的变量在函数执行结束之后就会被移除。<br>4.堆区：用来支持动态内存分配。比如调用<code>malloc</code>、<code>calloc</code>或者<code>realloc</code>等方法。</li>
</ul>
<blockquote>
<p><code>malloc</code>的完整定义是<code>void *malloc(size_t size)</code>，它可以根据参数、从堆中动态分配一块内存，并返回指向第一个字节的指针，或是在出错的时候返回一个NULL。<br>与<code>malloc</code>相关的函数还有：</p>
<ul>
<li><code>calloc()</code>：为数组在内存中分配空间。</li>
<li><code>realloc()</code>：重新分配指定大小的内存空间。</li>
<li><code>free()</code>：释放之前分配的空间。</li>
</ul>
</blockquote>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li>Meaning of referencing and dereferencing：<br><a href="http://stackoverflow.com/a/14224977/1594792" target="_blank" rel="external">http://stackoverflow.com/a/14224977/1594792</a></li>
<li>Pointers in Objective-C：<br><a href="http://www.drdobbs.com/mobile/pointers-in-objective-c/225700236" target="_blank" rel="external">http://www.drdobbs.com/mobile/pointers-in-objective-c/225700236</a><br><a href="http://www.drdobbs.com/mobile/pointers-in-objective-c/225700236?pgno=2" target="_blank" rel="external">http://www.drdobbs.com/mobile/pointers-in-objective-c/225700236?pgno=2</a></li>
<li><a href="https://gist.github.com/CaliosD/192ba8bfb78f0c08ca85ac442eb20ca7" target="_blank" rel="external">https://gist.github.com/CaliosD/192ba8bfb78f0c08ca85ac442eb20ca7</a></li>
<li><a href="http://stackoverflow.com/questions/14588767/where-in-memory-are-my-variables-stored-in-c" target="_blank" rel="external">http://stackoverflow.com/questions/14588767/where-in-memory-are-my-variables-stored-in-c</a></li>
<li><a href="https://en.wikipedia.org/wiki/Struct_(C_programming_language" target="_blank" rel="external">https://en.wikipedia.org/wiki/Struct_(C_programming_language</a>)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;typedef-struct和单纯struct定义的差别&quot;&gt;&lt;a href=&quot;#typedef-struct和单纯struct定义的差别&quot; class=&quot;headerlink&quot; title=&quot;typedef struct和单纯struct定义的差别&quot;&gt;&lt;/a&gt;ty
    
    </summary>
    
    
      <category term="C语言" scheme="http://www.calios.gq/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C的宏魔法</title>
    <link href="http://www.calios.gq/2017/02/23/C%E7%9A%84%E5%AE%8F%E9%AD%94%E6%B3%95/"/>
    <id>http://www.calios.gq/2017/02/23/C的宏魔法/</id>
    <published>2017-02-23T03:14:18.000Z</published>
    <updated>2017-02-27T06:29:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="“-”和”-”"><a href="#“-”和”-”" class="headerlink" title="“#”和”##”"></a>“#”和”##”</h2><ul>
<li><strong>#：String-izing Tokens</strong>，作用是把宏参数转化成以传入的参数名为内容的字符串。通常可以用于debug时打印参数。<br>比如说，如果定义成这样：<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define PRINT_TOKEN(<span class="name">token</span>) NSLog(<span class="name">#token</span> <span class="string">" is %d"</span>, token)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用时，<code>PRINT_TOKEN(1+2);</code>替换之后就会变为<code>NSLog(1+2 &quot; is %d&quot;, token);</code>得到<code>1+2 is 3</code>。</p>
<p>如果不使用#，就会变成：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">PRINT_TOKEN</span>(token) <span class="selector-tag">NSLog</span>(<span class="string">"token"</span> <span class="string">" is %d"</span>, token)</div></pre></td></tr></table></figure></p>
<p>这里我们期望<code>&quot; &quot;</code>的作用是变量替换，而在实际语言中，双引号有字符串拼接的作用。为了遵守单一职责的原则，#的存在是有意义的。</p>
<ul>
<li><strong>##：Pasting Tokens</strong>，在把宏参数拼接到一起、形成一个新的参数时非常有用。比如我们要通过一个变量，给另一个相关名字的变量赋值：</li>
</ul>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#define DECLARE_AND_SET(<span class="built_in">type</span>, varname, <span class="built_in">value</span>) <span class="built_in">type</span> varname = <span class="built_in">value</span>; <span class="built_in">type</span> orig_##varname = varname;</div><div class="line"></div><div class="line">DECLARE_AND_SET( <span class="built_in">int</span>, area, <span class="number">12</span> );</div></pre></td></tr></table></figure>
<p>在这个例子中，如果不使用“##”，就不能这样一步到位地实现粘贴成 <strong>变量</strong> 的目的。如果宏中的参数是类名，就需要先拼接字符串，再使用<code>NSClassFromString()</code>这样的方法将字符串转换成<code>Class</code>类型。这在实际项目中还是很有用的。</p>
<h2 id="metamacro-concat-宏"><a href="#metamacro-concat-宏" class="headerlink" title="metamacro_concat_宏"></a><code>metamacro_concat_</code>宏</h2><p>在<code>ReactiveCocoa</code>的代码中看到过这样两个宏定义：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#define metamacro_concat(A, B) \</span></div><div class="line">        metamacro_concat_(A, <span class="keyword">B)</span></div><div class="line"><span class="comment">#define metamacro_concat_(A, B) A ## B</span></div></pre></td></tr></table></figure>
<p><code>metamacro_concat_</code>这个宏其实和直接使用<code>##</code>语法基本等效，那么为什么不直接使用<code>##</code>写到使用它的宏里呢？</p>
<p>首先来理解下宏处理过程的操作流程图，可以想象成有一个指针，从前到后地查找宏和宏参数：</p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/NestedMacroHandling.jpg" alt="处理过程"></p>
<p>在宏计算的过程中出现多层嵌套时，都是遇到<code>##</code>就立即进行拼接。<code>metamacro_concat_</code>的作用相当于在<code>##</code>外面包了一层，降低了<code>##</code>的在宏处理时的“优先级”。</p>
<p>因此，同样是计算<code>metamacro_concat(1, metamacro_concat(2, 3))</code>，直接使用<code>##</code>和间接使用的推导过程就截然不同，具体推导如下。</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// Test-<span class="number">1</span>：直接使用`##`</div><div class="line">#define metamacro_concat(A,B)     A ## B</div><div class="line"></div><div class="line">metamacro_concat(<span class="number">1</span>, metamacro_concat(<span class="number">2</span>, <span class="number">3</span>))</div><div class="line">// 判断metamacro_concat中是否有#和##，有##，实参替换形参</div><div class="line">=&gt; <span class="number">1</span> ## metamacro_concat(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">=&gt; <span class="number">1</span>metamacro_concat(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">// 没有<span class="number">1</span>metamacro_concat的定义，报错。</div><div class="line"></div><div class="line"></div><div class="line">// Test-<span class="number">2</span>：间接使用`##`</div><div class="line">#define metamacro_concat(A,B)   _metamacro_concat(A,B)</div><div class="line">#define _metamacro_concat(A,B)  A ## B</div><div class="line"></div><div class="line">metamacro_concat(<span class="number">1</span>, metamacro_concat(<span class="number">2</span>,<span class="number">3</span>))</div><div class="line">// 判断metamacro_concat中是否有##，没有，替换成_metamacro_concat</div><div class="line">=&gt; _metamacro_concat(<span class="number">1</span>, metamacro_concat(<span class="number">2</span>,<span class="number">3</span>))</div><div class="line">=&gt; _metamacro_concat(<span class="number">1</span>, _metamacro_concat(<span class="number">2</span>,<span class="number">3</span>))</div><div class="line">=&gt; _metamacro_concat(<span class="number">1</span>, <span class="number">2</span> ## <span class="number">3</span>)</div><div class="line">=&gt; _metamacro_concat(<span class="number">1</span>, <span class="number">23</span>)</div><div class="line">=&gt; <span class="number">1</span> ## <span class="number">23</span></div><div class="line">=&gt; <span class="number">123</span></div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref: </strong></p>
<ul>
<li><a href="https://onevcat.com/2014/01/black-magic-in-macro/" target="_blank" rel="external">https://onevcat.com/2014/01/black-magic-in-macro/</a></li>
<li><a href="http://stackoverflow.com/a/3776901/1594792" target="_blank" rel="external">http://stackoverflow.com/a/3776901/1594792</a></li>
<li><a href="http://www.cprogramming.com/tutorial/cpreprocessor.html" target="_blank" rel="external">http://www.cprogramming.com/tutorial/cpreprocessor.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;“-”和”-”&quot;&gt;&lt;a href=&quot;#“-”和”-”&quot; class=&quot;headerlink&quot; title=&quot;“#”和”##”&quot;&gt;&lt;/a&gt;“#”和”##”&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;#：String-izing Tokens&lt;/strong&gt;，作用是
    
    </summary>
    
    
      <category term="C语言" scheme="http://www.calios.gq/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>__attribute__小结</title>
    <link href="http://www.calios.gq/2017/02/20/attribute-%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.calios.gq/2017/02/20/attribute-小结/</id>
    <published>2017-02-20T07:44:45.000Z</published>
    <updated>2017-02-20T07:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-attribute-是什么？"><a href="#1-attribute-是什么？" class="headerlink" title="1.__attribute__是什么？"></a>1.<code>__attribute__</code>是什么？</h3><p><code>__attribute__</code>是Clang提供的、用来在C，C++和Objective-C中修饰代码定义的 <strong>编译指令</strong>。它为声明的代码提供了额外的属性，来帮助编译器优化或者为代码的使用者显示有用的警告信息。</p>
<h3 id="2-attribute-有什么用？"><a href="#2-attribute-有什么用？" class="headerlink" title="2.__attribute__有什么用？"></a>2.<code>__attribute__</code>有什么用？</h3><p><code>__attribute__</code>命令提供代码运行需要的上下文。提供上下文的重要性怎么强调都不过分。通过详细地给出API如何命令编译器的定义，开发者可以获得显而易见的益处。同样是一束鲜花，是要在情人节送给女朋友还是要用来探望术后的病人，效果是完全不同的。而<code>__attribute__</code>的作用就好像鲜花上附加的一张卡片，上面写的是“送给最爱的某某”还是“愿某某早日康复”是完全由你来决定的。</p>
<p>正如Mattt在<a href="http://nshipster.com/__attribute__/" target="_blank" rel="external">这里</a>指出的：</p>
<blockquote>
<p>当涉及到编译器优化时，上下文就是王道。通过约束你的代码的解释方式，你可以让生成的代码尽可能的高效。不只是为了编译器。下一个看代码的人也会感激（你所提供的）额外的上下文信息。</p>
</blockquote>
<h3 id="3-attribute-怎么用？"><a href="#3-attribute-怎么用？" class="headerlink" title="3.__attribute__怎么用？"></a>3.<code>__attribute__</code>怎么用？</h3><p>它的语法是这样的：<code>__attribute__((interrupt(“TYPE&quot;)))</code>。</p>
<p>每当你有机会来给代码定义（变量，参数，函数，方法，类等等）提供额外的上下文信息时，你都应该使用<code>__attribute__</code>。但除非你知道自己在干什么，否则，不要滥用。因为提供一个错误的上下文比没有提供上下文更糟糕。</p>
<h3 id="4-attribute-使用举例？"><a href="#4-attribute-使用举例？" class="headerlink" title="4.__attribute__使用举例？"></a>4.<code>__attribute__</code>使用举例？</h3><p><strong>声明一个API在某平台的可用性：<strong>attribute</strong>((availability(…)))：如 NS_AVAILABLE 和 NS_DEPRECATED</strong></p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define NS_AVAILABLE(<span class="name">_mac</span>, _ios) CF_AVAILABLE(<span class="name">_mac</span>, _ios)</div><div class="line">#define CF_AVAILABLE(<span class="name">_mac</span>, _ios) __attribute__((<span class="name">availability</span>(<span class="name">macosx</span>,introduced=_mac)))</div></pre></td></tr></table></figure>
<p>在<code>Foundation</code>库的<code>NSString.h</code>中的使用：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(BOOL)</span>containsString:<span class="params">(NSString *)</span>str NS_AVAILABLE<span class="params">(<span class="number">10</span>_10, <span class="number">8</span>_0)</span>;</div></pre></td></tr></table></figure></p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define NS_DEPRECATED(<span class="name">_macIntro</span>, _macDep, _iosIntro, _iosDep, ...) CF_DEPRECATED(<span class="name">_macIntro</span>, _macDep, _iosIntro, _iosDep, __VA_ARGS__)</div><div class="line">#define CF_DEPRECATED(<span class="name">_macIntro</span>, _macDep, _iosIntro, _iosDep, ...) __attribute__((<span class="name">availability</span>(<span class="name">macosx</span>,introduced=_macIntro,deprecated=_macDep,message=<span class="string">""</span> __VA_ARGS__)))</div></pre></td></tr></table></figure>
<p>同样在<code>Foundation</code>库的<code>NSString.h</code>中：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)initWithContentsOfFile:(<span class="built_in">NSString</span> *)path <span class="built_in">NS_DEPRECATED</span>(<span class="number">10</span>_0, <span class="number">10</span>_4, <span class="number">2</span>_0, <span class="number">2</span>_0);（用带有encoding/usedEncoding和error参数的方法替代）</div></pre></td></tr></table></figure></p>
<p><strong>声明一个函数中包含带有指定格式参数的格式化字符串：<strong>attribute</strong>((format(…)))：NS_FORMAT_FUNCTION</strong></p>
<p>在<code>Foundation</code>库的<code>NSObjCRuntime.h</code>中：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FOUNDATION_EXPORT <span class="keyword">void</span> <span class="built_in">NSLog</span>(<span class="built_in">NSString</span> *format, ...) <span class="built_in">NS_FORMAT_FUNCTION</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="built_in">NS_NO_TAIL_CALL</span>;</div><div class="line"><span class="meta">#define NS_FORMAT_FUNCTION(F,A) __attribute__((format(__NSString__, F, A)))</span></div></pre></td></tr></table></figure></p>
<p>语法说明：<code>__attribute__((format(format_type, format_string_index, first_format_argument_index)))
format_type: one of printf, scant, strftime, strfmon or __NSString__</code></p>
<p><strong>声明被修饰的函数必须在重写的时候调用super的方法：<strong>attribute</strong>((objc_requires_super))：NS_REQUIRES_SUPER</strong></p>
<p>在<code>Foundation</code>库的<code>NSObjcRuntime.h</code>中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NS_REQUIRES_SUPER    <span class="comment">// 防止头文件的重复包含和编译。</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_attribute(objc_requires_super)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NS_REQUIRES_SUPER __attribute__((objc_requires_super))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NS_REQUIRES_SUPER</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>比如在自定义的<code>@interface Student: NSObject</code>中声明了:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="name">void</span>)foo NS_REQUIRES_SUPER<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>那么在<code>@interface CollegeStudent: Student</code>的实现文件中，像这样写一个空的<code>-foo</code>函数是会报出警告的：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)foo <span class="comment">&#123;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">warning: <span class="function"><span class="keyword">Method</span> <span class="title">possibly</span> <span class="title">missing</span> <span class="title">a</span> [<span class="title">super</span> <span class="title">foo</span>] <span class="title">call</span></span></div></pre></td></tr></table></figure></p>
<p><strong>其他更多的attribute使用：</strong></p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/Attributes%20in%20Clang%20%E2%80%94%20Clang%203.8%20documentation.png" alt="Attributes in Clange"></p>
<h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5.小结"></a>5.小结</h3><p>总而言之，当你想给自己写的类、方法、参数添加一些限制条件的时候，<code>__attribute__</code>可以为你提供一种可行的解决方案。</p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="https://blog.twitter.com/2014/attribute-directives-in-objective-c" target="_blank" rel="external">https://blog.twitter.com/2014/attribute-directives-in-objective-c</a></li>
<li><a href="http://releases.llvm.org/3.8.0/tools/clang/docs/AttributeReference.html" target="_blank" rel="external">http://releases.llvm.org/3.8.0/tools/clang/docs/AttributeReference.html</a></li>
<li><a href="http://nshipster.com/__attribute__/" target="_blank" rel="external">http://nshipster.com/__attribute__/</a></li>
<li><a href="http://blog.sunnyxx.com/2016/05/14/clang-attributes/" target="_blank" rel="external">http://blog.sunnyxx.com/2016/05/14/clang-attributes/</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-attribute-是什么？&quot;&gt;&lt;a href=&quot;#1-attribute-是什么？&quot; class=&quot;headerlink&quot; title=&quot;1.__attribute__是什么？&quot;&gt;&lt;/a&gt;1.&lt;code&gt;__attribute__&lt;/code&gt;是什么？&lt;/h
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="Clang" scheme="http://www.calios.gq/tags/Clang/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C基础教程（第2版）总结</title>
    <link href="http://www.calios.gq/2017/02/17/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E6%80%BB%E7%BB%93/"/>
    <id>http://www.calios.gq/2017/02/17/Objective-C基础教程（第2版）总结/</id>
    <published>2017-02-17T07:50:18.000Z</published>
    <updated>2017-02-27T07:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>OOP真正的革命性就是它在调用代码中使用间接（indirect），如使用变量、文件和参数等。“没有什么是通过间接解决不了的问题，如果有，就再加一层。”比如黑魔法第二课中提到的<code>#define _CONCAT(A,B)  A ## B</code>的作用。再比如，键值编码（KVC）也是一种间接更改对象状态的方式。</li>
<li>过程式编程以函数为中心，面向对象编程以数据为中心。</li>
<li>类是一种结构，它表示对象的类型；对象是一种结构，它包含值和指向其类的隐藏指针。</li>
<li>在Objective-C中只要看到@符号，你都可以把它看成是C语言的扩展。如：NSLog(@“this is a log: %@“, log);</li>
<li>对象是带有代码的C struct。因此，id实际上是一个指针，指向其中的某个结构。</li>
<li>@interface告诉编译器这个类的对象的数据成员（即对象的C struct应该是什么样子）和它提供的特性。</li>
<li>Objective-C的中缀符（infix notation）。</li>
<li>Objective-C中并没有真正意义上的私有方法，也无法通过标记为私有方法而禁止其他代码调用它。这是Objective-C动态本质的副作用。</li>
</ul>
<blockquote>
<p>这里可以和runtime联系起来。因为即便在编译器编译后，代码也可以在运行时改变类所拥有的属性、或是改变方法调用的实现。这给开发者提供了很多便利，也不可避免地带来一些副作用（side effect）。</p>
</blockquote>
<ul>
<li>在Objective-C中每个方法调用都获得了一个名为self的隐藏参数，它是一个指向接收消息的对象的指针。方法使用self参数查找它们要使用的实例变量。eg: self-&gt;fillColor = c;</li>
<li>由于对象的局部变量特定于该对象的实例，因此称为实例变量，通常简写为ivars。</li>
<li>Objective-C有个极好的特性，你可以把类当做对象来向类发送消息。</li>
</ul>
<blockquote>
<p>这个“极好的特性”，是相对于谁来说的？C？其他语言？？</p>
</blockquote>
<ul>
<li>多态使得来自不同类的对象可以定义共享相同名称的方法。动态类型能使程序直到执行时才确定对象所属的类。动态绑定则能使程序直到执行时才确定要对对象调用的实际方法。而id类型是这三者的基础。</li>
<li>防御式编程。</li>
<li>Cocoa的方法名称如果以get开头，表明我们提供的是一个指针，而指针所指向的空间则是用来存储该方法生成的数据。如<code>NSValue</code>的<code>getValue:</code>方法。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithBytes:&amp;rect objCType:<span class="keyword">@encode</span>(<span class="built_in">CGRect</span>)];</div><div class="line"><span class="built_in">NSMutableArray</span> *arr = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">[arr addObject:value];</div><div class="line"></div><div class="line"><span class="built_in">NSValue</span> *v = arr[<span class="number">0</span>];</div><div class="line">[v getValue:&amp;rect];</div></pre></td></tr></table></figure>
<ul>
<li><code>#import</code>时，带尖括号的语句是用来导入系统头文件的，是只读的；而带引号的语句说明导入的是项目本地的头文件，是可编辑的。</li>
<li>self：<ul>
<li><code>self</code> is a special variable in Objective-C, inside an instance method this variable refers to the receiver(object) of the message that invoked the method, while in a class method <code>self</code> will indicate which class is calling.</li>
<li><code>self</code> refers to the actual object that is executing the current method, it is an invisible argument passed automatically by the runtime environment to your instance methods.</li>
</ul>
</li>
<li>对象的初始化过程：来自NSObject的类方法alloc，为该类（对象？）分配一块足够大的内存，以存放该类的全部实例变量，并将其清零；实例方法init用于获得一个对象并使其运行。</li>
<li>为什么要写成：<code>Car *car = [[Car alloc] init]; 而不是 Car *car = [Car alloc]; [car init];</code>? （关键词：类簇）<ul>
<li>因为初始化方法返回的对象可能与分配的对象不同。如NSNumber、NSString和NSArray这样的类簇的情况。</li>
<li>由于init方法可以接受参数，所以该方法的代码能够检查其接受的参数，并断定返回另一个类的对象可能更合适。</li>
<li>Xcode会检查是否alloc与init是嵌套的，如果不是会给出提示。<code>*** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;*** -objCType only defined for abstract class.  Define -[NSPlaceholderNumber objCType]!’</code></li>
</ul>
</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSNumber *<span class="keyword">boo </span>= [[NSNumber alloc] initWithBool:NO]<span class="comment">;</span></div><div class="line">NSNumber *<span class="keyword">boo1 </span>= [NSNumber alloc]<span class="comment">;</span></div><div class="line">NSNumber *<span class="keyword">boo2 </span>= [<span class="keyword">boo1 </span>initWithBool:NO]<span class="comment">;</span></div><div class="line">NSLog(@<span class="string">"boo: %@ \n boo1: %@ \n boo2: %@"</span>,[<span class="keyword">boo </span>class],[<span class="keyword">boo1 </span>class],[<span class="keyword">boo2 </span>class])<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>这段代码打印的的结果是：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boo: </span>__NSCFBoolean</div><div class="line"><span class="keyword">boo1: </span>NSPlaceholderNumber</div><div class="line"><span class="keyword">boo2: </span>__NSCFBoolean</div></pre></td></tr></table></figure></p>
<p>可见，仅仅分配内存的对象boo1和初始化方法返回的boo2并不相同。</p>
<ul>
<li>通常，接受参数最多的初始化方法最终成为 <strong>指定初始化函数</strong>。</li>
<li>预编译指令<code>@property</code>可以通知编译器：“这个对象具有这个类型的这个名称的这种属性”，还可以传递一些关于property（如<code>readonly</code>和<code>readwrite</code>）和对象的内存管理（<code>retain</code>，<code>assign</code>或<code>copy</code>）的信息；<code>@synthesize</code>预编译指令可以通知编译器生成访问器方法。</li>
<li>有的属性列表文件，特别是首选项文件，是以压缩的二进制格式存储的。通过使用plutil命令：<code>plutil -convert xml1 文件名.plist</code>，可以将这些文件转换成人可以理解的字面形式。</li>
<li>对于KVC，Cocoa会自动装箱和开箱标量值。也就是说，当使用 <code>setValueForKey</code>时，它自动将标量值（int、float和struct）放入<code>NSNumber</code>或<code>NSValue</code>中；当使用<code>-setValueForKey:</code>时，它自动将标量值从这些对象中取出。仅KVC具有这种自动装箱功能，常规方法调用和属性语法不具备该功能。</li>
<li><p><code>valueForKey:</code>在Objective-C运行时中使用元数据打开对象并进入其中查找需要的信息。在C或C++语言中不能执行这种操作。通过使用KVC，没有相关getter方法也能获取对象值，不需要通过对象指针来直接访问实例变量。</p>
<blockquote>
<p>这里体现的就是Objective-C“自省”的特性吧？</p>
</blockquote>
</li>
<li><p>（在console的打印结果中）注意<null>与(null)之间的区别。<null>是一种<code>[NSNull null]</code>对象，而(null)是一个真正的<code>nil</code>值。</null></null></p>
</li>
<li><code>NSPredicate</code>字符串中也可以用<code>%K</code>来指定键路径。如<code>predicate = [NSPredicate predicateWithFormat: @&quot;%K beginswith %@&quot;, @&quot;name&quot;, @&quot;B&quot;];</code>。</li>
<li>谓词机制不进行静类型检查。</li>
<li>在编写谓词字符串时，尽量使用[cd]修饰符。其中，c表示“不区分大小写（case insensitive）”，d表示“不区分发音符号（diacritic insensitive）”，[cd]表示“既不区分大小写，也不区分发音符号”。如：<code>predicate = [NSPredicate predicateWithFormat: @&quot;name BEGINSWITH[cd] &#39;HERB&#39;&quot;];</code>。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;OOP真正的革命性就是它在调用代码中使用间接（indirect），如使用变量、文件和参数等。“没有什么是通过间接解决不了的问题，如果有，就再加一层。”比如黑魔法第二课中提到的&lt;code&gt;#define _CONCAT(A,B)  A ## B&lt;/code&gt;的作用
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://www.calios.gq/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>随笔一则-0209-旅行与Objective-C</title>
    <link href="http://www.calios.gq/2017/02/09/%E9%9A%8F%E7%AC%94%E4%B8%80%E5%88%99-0209-%E6%97%85%E8%A1%8C%E4%B8%8EObjective-C/"/>
    <id>http://www.calios.gq/2017/02/09/随笔一则-0209-旅行与Objective-C/</id>
    <published>2017-02-09T05:36:33.000Z</published>
    <updated>2017-06-12T05:44:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>我居然在24小时之内将自己蠢蠢欲动极其想去旅行的心平抚了下来。也是有点小佩服自己。</p>
<p>我想，旅行可以带给我的，是一个未知的世界。我为之欣喜并享受其中的，正是对未知的探索。</p>
<p>而同样，这两天来，在潜意识中，黑魔法的课程也在引导我一步步去回归当初学习Objective-C的初心，重新审视这门被我用了近五年、却依旧深感知之甚少的语言。</p>
<p>这样看来，旅行于我，是平面上扩展视野的疆土，是滋养心尖的养分；而Objective-C于我，是立体上挖掘一门语言的美感，是构建知识树的根基。二者在某种程度上，带给我的是类似的体验。这或许正是居然能够用后者来抚慰前者的原因吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我居然在24小时之内将自己蠢蠢欲动极其想去旅行的心平抚了下来。也是有点小佩服自己。&lt;/p&gt;
&lt;p&gt;我想，旅行可以带给我的，是一个未知的世界。我为之欣喜并享受其中的，正是对未知的探索。&lt;/p&gt;
&lt;p&gt;而同样，这两天来，在潜意识中，黑魔法的课程也在引导我一步步去回归当初学习Ob
    
    </summary>
    
    
      <category term="PragmaticProgrammer" scheme="http://www.calios.gq/tags/PragmaticProgrammer/"/>
    
      <category term="脑洞开一开" scheme="http://www.calios.gq/tags/%E8%84%91%E6%B4%9E%E5%BC%80%E4%B8%80%E5%BC%80/"/>
    
      <category term="随笔" scheme="http://www.calios.gq/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Some barriers when using TesseractOCR</title>
    <link href="http://www.calios.gq/2017/01/11/Some-barriers-when-using-TesseractOCR/"/>
    <id>http://www.calios.gq/2017/01/11/Some-barriers-when-using-TesseractOCR/</id>
    <published>2017-01-11T03:32:57.000Z</published>
    <updated>2017-01-19T08:32:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.Install TesseractOCR with CocoaPods.</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">pod</span> <span class="string">'TesseractOCRiOS'</span>, <span class="string">'4.0.0'</span></div></pre></td></tr></table></figure>
<p>2.Download tessdata, generally from Github:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/tesseract-ocr/</span>tessdata<span class="regexp">/raw/m</span>aster<span class="regexp">/eng.traineddata</span></div></pre></td></tr></table></figure></p>
<p>Then move them to the <code>/usr/local/share/tessdata</code> folder.<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo mv -v eng.traineddata <span class="regexp">/usr/</span>local<span class="regexp">/share/</span>tessdata<span class="regexp">/</span></div></pre></td></tr></table></figure></p>
<p>However, it crashed saying:</p>
<blockquote>
<p>actual_tessdata_num_entries \&lt;= TESSDATA_NUM_ENTRIES:Error:Assert failed:in file ..\ccutil\tessdatamanager.cpp, line 55</p>
</blockquote>
<p>and would never work with the FAQ <a href="https://github.com/tesseract-ocr/tesseract/wiki/FAQ#actual_tessdata_num_entries_-tessdata_num_entrieserrorassert-failedin-file-ccutiltessdatamanagercpp-line-55_" target="_blank" rel="external">here</a> by checking out the right version(for me, it’s 4.0.0) of trained data.</p>
<p>Finally, the issue <a href="https://github.com/gali8/Tesseract-OCR-iOS/issues/299" target="_blank" rel="external">here</a> solved this creepy problem by checking out <a href="https://github.com/tesseract-ocr/tessdata/tree/bf82613055ebc6e63d9e3b438a5c234bfd638c93" target="_blank" rel="external">this version</a> of trained data. This is just such a… boring problem…</p>
<p>Here’s a little sample for how to use it, and, enjoy yourself. :]<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">G8Tesseract *tesseract = [[G8Tesseract alloc] initWithLanguage:@<span class="string">"eng"</span>]<span class="comment">;</span></div><div class="line">                                       tesseract.delegate = weakSelf<span class="comment">;</span></div><div class="line">                                       tesseract.charWhitelist = @<span class="string">"@.()&#123;&#125;/\\!*&amp;#0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="comment">;</span></div><div class="line">                                       tesseract.engineMode = G8OCREngineModeTesseractOnly<span class="comment">;</span></div><div class="line">                                       tesseract.pageSegmentationMode = G8PageSegmentationModeAuto<span class="comment">;</span></div><div class="line">                                       tesseract.image = [image g8_blackAndWhite]<span class="comment">;</span></div><div class="line">                                       tesseract.maximumRecognitionTime = <span class="number">2</span>.<span class="number">0</span><span class="comment">;</span></div><div class="line">                                       [tesseract recognize]<span class="comment">;</span></div><div class="line"></div><div class="line">                                       <span class="keyword">dispatch_async(dispatch_get_main_queue(), </span>^&#123;</div><div class="line">                                           weakSelf.codeTextView<span class="meta">.text</span> = [[tesseract recognizedText] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]<span class="comment">;</span></div><div class="line">                                           weakSelf.codeImageView.image = image<span class="comment">;</span></div><div class="line">                                       &#125;)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><strong>Updated at 170119</strong></p>
<p>When compiled with terminal, bitcode should be disabled in podfile.</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">post_install <span class="built_in">do</span> |<span class="type">installer</span>|</div><div class="line">    <span class="type">installer</span>.pods_project.targets.each <span class="built_in">do</span> |<span class="type">target</span>|</div><div class="line">        <span class="type">target</span>.build_configurations.each <span class="built_in">do</span> |<span class="type">config</span>|</div><div class="line">            <span class="type">config</span>.build_settings['ENABLE_BITCODE'] = 'false'</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="https://www.raywenderlich.com/93276/implementing-tesseract-ocr-ios" target="_blank" rel="external">https://www.raywenderlich.com/93276/implementing-tesseract-ocr-ios</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.Install TesseractOCR with CocoaPods.&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="TesseractOCR" scheme="http://www.calios.gq/tags/TesseractOCR/"/>
    
  </entry>
  
  <entry>
    <title>Some methods for DownloadManager</title>
    <link href="http://www.calios.gq/2017/01/10/%E4%B8%8B%E8%BD%BD%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
    <id>http://www.calios.gq/2017/01/10/下载管理的一些实现方法/</id>
    <published>2017-01-10T03:03:28.000Z</published>
    <updated>2017-01-11T07:05:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着苹果提供API的不断完善，实现下载管理的方法也发生了一些变化。从使用更方便的第三方库，到完全可以用自带API实现毫无压力。且将各种方法记录于此，权当备查。</p>
<p>首先定义一下下载管理的范围：</p>
<ul>
<li>可以同时下载多个文件；</li>
<li>对于单个文件而已，可以下载/暂定/恢复下载/取消下载/显示下载进度；</li>
<li>可以控制同时下载的最大数量。</li>
</ul>
<p>接下来，从最早采用的实现方法说起。</p>
<ol>
<li>NSOperationQueue</li>
</ol>
<ul>
<li>创建继承自<code>NSOperation</code>的自定义类；</li>
<li>将下载需要的网络请求（如<code>NSURLSessionDownloadTask</code>）作为其中的一个属性；</li>
</ul>
<ol>
<li>dispatch_queue_create()</li>
<li>NSURLSession</li>
</ol>
<p><strong>核心：All the other APIs -> model -> UI</strong></p>
<p><strong>这里附上苹果开发者论坛中，一位开发者与苹果开发者的关于<code>NSURLSession</code>的问答（2015年7月）。</strong></p>
<p>我需要在我的app中上传200张图片，<br>1.我该使用<code>NSURLSessionUploadTask</code>还是其他什么类？<br>答：<code>NSURLSessionUploadTask</code>.<br>2.为了让这些upload保持在background，我该做些什么？<br>答：把所有的upload扔进一个<code>NSURLSession</code>的background session中。<br>3.当app没有在运行的时候，我该做些什么？（没有明确回答）<br>4.针对以上3点，我该在<code>NSURLSession</code>外面包一层<code>NSOperation</code>以便于使用<code>NSOperationQueue</code>，还是说，iOS会有它自己的内部queue来正确处理<code>NSURLSession</code>对象们？<br>答：这个很难说。一般来说，我是<code>NSOperation</code>的死忠粉，但由于background session和app生命周期的交互方式，用<code>NSOperation</code>来解决<code>NSURLSession</code>的background session的问题却有些棘手。<br>具体来说，通常的流程是这样的：</p>
<p>1.你的app开始一堆后台传输；<br>2.用户把它移到后台；<br>3.系统暂停了你的app；<br>4.传输在后台继续运行；<br>5.系统终止了你的app；<br>6.传输继续在后台运行；<br>7.传输结束；<br>8.系统重新启动你的app。</p>
<p>如果你使用<code>NSOperation</code>来追踪每个传输，当你在第8步重新启动app时，就需要重新创建那一堆的operation。当然，在第8步是需要重新创建<em>一些东西</em>，只是重新创建<code>NSOperation</code>要比重新创建其他不那么复杂的对象棘手些。</p>
<p>5.你的意思是说，如果我一次性把200个<code>NSURLSessionUploadTask</code>的实例添加到同一个background session配置的<code>NSURLSession</code>中，iOS会把它们都正确处理好？<br>答：是的。<code>NSURLSession</code>后台下载系统会很乐意处理几百个请求的。它在内部将它们串联起来，所以在任何时候只有少量的请求是在执行中。<br>6.如果是的话，对于task的数量是否有所限制？<br>答：没有硬性规定，但我通常建议不要做的太过分。在我看来，几百个请求是可以接受的，几千个请求就有点勉强，上万的请求就有点2。。我通常建议，如果你不得不处理上千个单独的item，你可以把它们打包起来，然后进行一个可恢复的传输。然而，有一些问题：</p>
<ul>
<li>做这种事情需要严谨的服务器端的支持。<ul>
<li><code>NSURLSession</code>的background session自动处理下载的断点续传。但对于上传并非如此。如果你需要上传的断点续传，你就得涉及到每次的连接数据（这里原文用的是”tears”，不太理解。。）。考虑到这个原因，把上传文件打包成合理大小的整块文件就很有必要，这样上传就会产生一打的进度，即使有可能连接失败，也好过你的app重新恢复上传。</li>
</ul>
</li>
</ul>
<p><strong>另外，对于如何知道当前并行的下载数，<code>MZDownloadManager</code>的作者也在这个issue下给出了<a href="https://github.com/mzeeshanid/MZDownloadManager/issues/29" target="_blank" rel="external">答案</a>。简而言之，就是通过筛选存储着model的array，得到状态为“下载中”的model的数量。</strong> </p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="https://forums.developer.apple.com/thread/10239" target="_blank" rel="external">https://forums.developer.apple.com/thread/10239</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着苹果提供API的不断完善，实现下载管理的方法也发生了一些变化。从使用更方便的第三方库，到完全可以用自带API实现毫无压力。且将各种方法记录于此，权当备查。&lt;/p&gt;
&lt;p&gt;首先定义一下下载管理的范围：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以同时下载多个文件；&lt;/li&gt;
&lt;li&gt;对
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="Download" scheme="http://www.calios.gq/tags/Download/"/>
    
      <category term="NSURLSession" scheme="http://www.calios.gq/tags/NSURLSession/"/>
    
  </entry>
  
  <entry>
    <title>Background fetch</title>
    <link href="http://www.calios.gq/2017/01/10/Background-fetch/"/>
    <id>http://www.calios.gq/2017/01/10/Background-fetch/</id>
    <published>2017-01-10T03:00:51.000Z</published>
    <updated>2017-01-11T06:46:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>如下是iOS7开始支持的background fetch在下载管理中的应用。</p>
<p>1.Target -> Capabilities -> Background Modes，打开开关，勾选<code>Background fetch</code>一项。<br>2.在负责下载管理的<code>CDDownloadManager</code>，或是<code>AppDelegate</code>中，添加<code>@property (nonatomic, copy) void (^savedCompletionHandler)();</code>属性，用于临时存储<code>application:handleEventsForBackgroundURLSession:completionHandler:</code>传入的block（详细说明见后文）。<br>3.在<code>AppDelegate.m</code>中添加如下方法：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>application:<span class="params">(UIApplication *)</span>application handleEventsForBackgroundURLSession:<span class="params">(NSString *)</span>identifier completionHandler:<span class="params">(void (^)</span><span class="params">()</span>)completionHandler</div><div class="line">&#123;</div><div class="line">    NSLog<span class="params">(@<span class="string">"%s"</span>,__FUNCTION__)</span>;</div><div class="line"></div><div class="line">    [CDDownloadManager sharedManager].savedCompletionHandler = completionHandler;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在iOS中，当后台传输结束或是需要认证时，如果你的app不是正在运行的状态，它就会自动在后来重新启动，然后app的<code>UIApplicationDelegate</code> 会收到<code>application:handleEventsForBackgroundURLSession:completionHandler:</code>消息。这个函数中包括导致app启动的session的identifier。你的app应该在用相同的identifier创建后台configuration对象之前，把这个completion handler存下来。新创建的session会自动和正在执行的后台活动关联起来。</p>
<p>4.在<code>CDDownloadManager.m</code>，或是其他创建了<code>NSURLSession</code>实例的类中，实现如下方法：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)URLSessionDidFinishEventsForBackgroundURLSession:(<span class="built_in">NSURLSession</span> *)session</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.session getTasksWithCompletionHandler:^(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLSessionDataTask</span> *&gt; * _Nonnull dataTasks, <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLSessionUploadTask</span> *&gt; * _Nonnull uploadTasks, <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLSessionDownloadTask</span> *&gt; * _Nonnull downloadTasks) &#123;</div><div class="line">        <span class="keyword">if</span> (downloadTasks.count == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// A.</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">self</span>.savedCompletionHandler != <span class="literal">nil</span>) &#123;</div><div class="line">                <span class="keyword">void</span>(^completionHandler)() = <span class="keyword">self</span>.savedCompletionHandler;</div><div class="line"></div><div class="line">                <span class="keyword">self</span>.savedCompletionHandler = <span class="literal">nil</span>;</div><div class="line"></div><div class="line">                <span class="comment">// B.</span></div><div class="line">                [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</div><div class="line">                    completionHandler();</div><div class="line">                    <span class="comment">// C.</span></div><div class="line">                    UNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];</div><div class="line">                    content.title = <span class="string">@"Calios said:"</span>;</div><div class="line">                    content.body = <span class="string">@"Hi, what about enjoy Swift in 2017?"</span>;</div><div class="line">                    content.sound = [UNNotificationSound defaultSound];</div><div class="line">                    content.badge = @([[<span class="built_in">UIApplication</span> sharedApplication] applicationIconBadgeNumber] + <span class="number">1</span>);</div><div class="line"></div><div class="line">                    UNTimeIntervalNotificationTrigger *trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:<span class="number">5.</span>f repeats:<span class="literal">NO</span>];</div><div class="line">                    UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:<span class="string">@"FiveSecond"</span> content:content trigger:trigger];</div><div class="line"></div><div class="line">                    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</div><div class="line">                    [center addNotificationRequest:request withCompletionHandler:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">                        <span class="keyword">if</span> (!error) &#123;</div><div class="line">                            <span class="built_in">NSLog</span>(<span class="string">@"add notification request succeed!"</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;];</div><div class="line">                &#125;];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应上段代码的几点说明：<br>A. 这里的<code>self.savedCompletionHandler</code>就是上面在<code>AppDelegate.m</code>中被赋值的家伙。<br>B. 由于提供的completion handler是<code>UIKIt</code>的一部分，所以一定要在主线程中调用。<br>C. 这里的操作是在所有下载完成后弹出一个本地通知，并在console显示一行log。可以根据需求自行更改。<strong>注：</strong>iOS 10之后，本地通知和远程通知相关的接口都移到了<code>UserNotification</code>中，API也有很多变化，这里不再赘述，更多详情可参见喵神的<a href="https://onevcat.com/2016/08/notification/" target="_blank" rel="external">这篇博客</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如下是iOS7开始支持的background fetch在下载管理中的应用。&lt;/p&gt;
&lt;p&gt;1.Target -&gt; Capabilities -&gt; Background Modes，打开开关，勾选&lt;code&gt;Background fetch&lt;/code&gt;一项。&lt;br&gt;2.在
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="Background" scheme="http://www.calios.gq/tags/Background/"/>
    
  </entry>
  
  <entry>
    <title>Block学习笔记</title>
    <link href="http://www.calios.gq/2017/01/10/Block%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.calios.gq/2017/01/10/Block学习笔记/</id>
    <published>2017-01-10T02:59:16.000Z</published>
    <updated>2017-01-11T06:49:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Block声明"><a href="#1-Block声明" class="headerlink" title="1.Block声明"></a>1.Block声明</h3><p>编译器和运行时让block中引用的所有变量都被保存下来，以备在block的所有副本的生命周期中使用。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)block1</div><div class="line">&#123;</div><div class="line">    <span class="built_in">int</span> (^myTest)(<span class="built_in">int</span>) = ^(<span class="built_in">int</span> <span class="built_in">num</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span> * <span class="built_in">num</span>;</div><div class="line">    &#125;;</div><div class="line">    NSLog(@<span class="string">"double: %d"</span>,myTest(<span class="number">9</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-在block中改变的外部变量，需要用-block声明"><a href="#2-在block中改变的外部变量，需要用-block声明" class="headerlink" title="2.在block中改变的外部变量，需要用__block声明"></a>2.在block中改变的外部变量，需要用<code>__block</code>声明</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)block2</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSArray</span> *stringsArray = @[ <span class="string">@"string 1"</span>,</div><div class="line">                               <span class="string">@"String 21"</span>, <span class="comment">// &lt;-</span></div><div class="line">                               <span class="string">@"string 12"</span>,</div><div class="line">                               <span class="string">@"String 11"</span>,</div><div class="line">                               <span class="string">@"Strîng 21"</span>, <span class="comment">// &lt;-</span></div><div class="line">                               <span class="string">@"Striñg 21"</span>, <span class="comment">// &lt;-</span></div><div class="line">                               <span class="string">@"String 02"</span> ];</div><div class="line"></div><div class="line">    <span class="built_in">NSLocale</span> *currentLocale = [<span class="built_in">NSLocale</span> currentLocale];</div><div class="line">    __block <span class="built_in">NSUInteger</span> orderedSameCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="built_in">NSArray</span> *diacriticInsensitiveSortArray = [stringsArray sortedArrayUsingComparator:^(<span class="keyword">id</span> string1, <span class="keyword">id</span> string2) &#123;</div><div class="line"></div><div class="line">        <span class="built_in">NSRange</span> string1Range = <span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [string1 length]);</div><div class="line">        <span class="built_in">NSComparisonResult</span> comparisonResult = [string1 compare:string2 options:<span class="built_in">NSDiacriticInsensitiveSearch</span> range:string1Range locale:currentLocale];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (comparisonResult == <span class="built_in">NSOrderedSame</span>) &#123;</div><div class="line">            orderedSameCount++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> comparisonResult;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"diacriticInsensitiveSortArray: %@"</span>, diacriticInsensitiveSortArray);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"orderedSameCount: %lu"</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)orderedSameCount);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-block支持不定个数的参数（variadic-arguments）"><a href="#3-block支持不定个数的参数（variadic-arguments）" class="headerlink" title="3.block支持不定个数的参数（variadic arguments）"></a>3.block支持不定个数的参数（variadic arguments）</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)block3</div><div class="line">&#123;</div><div class="line">    <span class="keyword">void</span> (^variadicParams)(<span class="built_in">NSString</span>*, ...) = ^(<span class="built_in">NSString</span> *format, ...) &#123;</div><div class="line">        <span class="keyword">id</span> eachObject;</div><div class="line">        va_list argumentList;   <span class="comment">// va_list是指向变量列表的指针</span></div><div class="line">        <span class="keyword">if</span> (format) &#123;   <span class="comment">// 第一个参数并不是变量列表中的一个</span></div><div class="line">            <span class="built_in">NSMutableArray</span> *tmpArray = [<span class="built_in">NSMutableArray</span> arrayWithObject:format];</div><div class="line">            va_start(argumentList, format); <span class="comment">// 初始化va_list，并让它指向传入的参数（format）后面紧跟的第一个参数</span></div><div class="line">            <span class="keyword">while</span> ((eachObject = va_arg(argumentList, <span class="keyword">id</span>)) != <span class="literal">nil</span>)&#123;  <span class="comment">//   va_arg，取出列表中的下一个参数。必须指明参数的类型（这样va_arg才能知道该给它分配多少空间）</span></div><div class="line">                [tmpArray addObject:eachObject];    <span class="comment">// 不会把任何nil对象添加到tmpArray中</span></div><div class="line">            &#125;</div><div class="line">            va_end(argumentList);   <span class="comment">// 释放va_list这个数据结构所持有的任何内存</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"variadic params: %@"</span>,tmpArray);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    variadicParams(<span class="string">@"11"</span>,<span class="string">@"22"</span>,<span class="string">@"333"</span>,<span class="string">@"666"</span>,<span class="literal">nil</span>);  <span class="comment">//   Calios:这里最后一个参数必须传nil，args必须有最后一个结尾，否则是无法判断的。But，why？</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-几种类型的变量与block的交互"><a href="#4-几种类型的变量与block的交互" class="headerlink" title="4.几种类型的变量与block的交互"></a>4.几种类型的变量与block的交互</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSInteger</span> CounterGlobal;    <span class="comment">//   Calios:It throws out error for not finding CounterGlobal if extern is added. But, why?</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> CounterStatic;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)block4</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSInteger</span> localCounter = <span class="number">42</span>;</div><div class="line">    __block <span class="keyword">char</span> localCharacter;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> (^aBlock)(<span class="keyword">void</span>) = ^(<span class="keyword">void</span>) &#123;</div><div class="line">        ++CounterGlobal;</div><div class="line">        ++CounterStatic;</div><div class="line">        CounterGlobal = localCounter; <span class="comment">// localCounter fixed at block creation</span></div><div class="line">        localCharacter = <span class="string">'a'</span>; <span class="comment">// sets localCharacter in enclosing scope</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    ++localCounter; <span class="comment">// unseen by the block</span></div><div class="line">    localCharacter = <span class="string">'b'</span>;</div><div class="line"></div><div class="line">    aBlock(); <span class="comment">// execute the block</span></div><div class="line">    <span class="comment">// localCharacter now 'a'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-当block被复制的时候，它会对block中使用的对象变量产生强引用。"><a href="#5-当block被复制的时候，它会对block中使用的对象变量产生强引用。" class="headerlink" title="5.当block被复制的时候，它会对block中使用的对象变量产生强引用。"></a>5.当block被复制的时候，它会对block中使用的对象变量产生强引用。</h3><p>如果你在一个方法的实现中使用了block：</p>
<ul>
<li>如果你使用了实例变量的引用，那么就对 <strong>self</strong> 产生了强引用；</li>
<li>如果你使用了实例变量的值，那么就对 <strong>该变量</strong> 产生了强引用。<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">	- (<span class="literal">void</span>)block5</div><div class="line">	&#123;</div><div class="line"><span class="literal">void</span> (^doSomethingWithObject)(id) = ^(id <span class="keyword">var</span>)&#123;</div><div class="line">	NSLog(@<span class="string">"do something: %@"</span>,<span class="keyword">var</span>);</div><div class="line">&#125;;</div><div class="line">dispatch<span class="string">\_queue\_t</span> queue = dispatch<span class="string">\_queue\_create("com.calios.BlockSample.someQueue",</span> DISPATCH<span class="string">\_QUEUE\_SERIAL);</span></div><div class="line">dispatch<span class="string">\_async(queue,</span> ^&#123;    <span class="regexp">// dispatch\_async()是将block拷贝到指定的queue中，而复制操作（Block\_copy()）会将block移动到堆上。</span></div><div class="line">	// instanceVariable <span class="keyword">is</span> used <span class="keyword">by</span> reference, a strong reference <span class="keyword">is</span> made <span class="keyword">to</span> self</div><div class="line">	doSomethingWithObject(instanceVariable);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">id localVariable = instanceVariable;</div><div class="line">dispatch<span class="string">\_async(queue,</span> ^&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 localVariable is used by value, a strong reference is made to localVariable</div><div class="line">	 (and not to self).</div><div class="line">	 */</div><div class="line">	doSomethingWithObject(localVariable);</div><div class="line">&#125;);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6-应该避免的做法"><a href="#6-应该避免的做法" class="headerlink" title="6.应该避免的做法"></a>6.应该避免的做法</h3><p>block字面量（即^{ … }）是代表这个block的局部栈数据结构的地址。因此，局部栈数据结构的作用于就是仅限于大括号中的语句，所以你应 <strong>避免</strong> 向下面这样使用block。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)block6</div><div class="line">&#123;</div><div class="line">    dontDoThis();</div><div class="line">    dontDoThisEither();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dontDoThis</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span> (^blockArray[<span class="number">3</span>])(<span class="keyword">void</span>);  <span class="comment">// an array of 3 block references</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</div><div class="line">        blockArray[i] = ^&#123; <span class="built_in">printf</span>(<span class="string">"hello, %d\n"</span>, i); &#125;;</div><div class="line">        <span class="comment">// WRONG: The block literal scope is the "for" loop.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dontDoThisEither</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span> (^block)(<span class="keyword">void</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = arc4random() % <span class="number">1024</span>;</div><div class="line">    <span class="keyword">if</span> (i &gt; <span class="number">1000</span>) &#123;</div><div class="line">        block = ^&#123; <span class="built_in">printf</span>(<span class="string">"got i at: %d\n"</span>, i); &#125;;</div><div class="line">        <span class="comment">// WRONG: The block literal scope is the "then" clause.</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Block声明&quot;&gt;&lt;a href=&quot;#1-Block声明&quot; class=&quot;headerlink&quot; title=&quot;1.Block声明&quot;&gt;&lt;/a&gt;1.Block声明&lt;/h3&gt;&lt;p&gt;编译器和运行时让block中引用的所有变量都被保存下来，以备在block的所有副本的
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="Block" scheme="http://www.calios.gq/tags/Block/"/>
    
  </entry>
  
  <entry>
    <title>写在2017年初</title>
    <link href="http://www.calios.gq/2017/01/10/%E5%86%99%E5%9C%A82017%E5%B9%B4%E5%88%9D/"/>
    <id>http://www.calios.gq/2017/01/10/写在2017年初/</id>
    <published>2017-01-10T02:22:16.000Z</published>
    <updated>2017-01-10T03:25:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在本地的Homebrew被我搞挂掉之后，博客休眠了两个多月。本地的草稿箱一直增加，online的内容一直没变化。实在不能忍了。</p>
<p>终于在2017年的第十天被我修理好了。继续第三年的blog之旅。</p>
<p><strong>但求把知识变成能力；</strong><br><strong>但求把枯涩的知识变成丰盈的语言；</strong><br><strong>但求我心依旧。</strong></p>
<p>—— Calios<br>2017.01.10</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在本地的Homebrew被我搞挂掉之后，博客休眠了两个多月。本地的草稿箱一直增加，online的内容一直没变化。实在不能忍了。&lt;/p&gt;
&lt;p&gt;终于在2017年的第十天被我修理好了。继续第三年的blog之旅。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但求把知识变成能力；&lt;/strong
    
    </summary>
    
    
      <category term="2017" scheme="http://www.calios.gq/tags/2017/"/>
    
      <category term="随笔" scheme="http://www.calios.gq/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>浅析自定义UINavigationBar返回按钮（一）</title>
    <link href="http://www.calios.gq/2016/10/28/%E6%B5%85%E6%9E%90%E8%87%AA%E5%AE%9A%E4%B9%89UINavigationBar%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.calios.gq/2016/10/28/浅析自定义UINavigationBar返回按钮（一）/</id>
    <published>2016-10-28T09:52:21.000Z</published>
    <updated>2016-11-01T05:15:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/navbar.png" alt="" title="自定义navigationBar返回按钮"></p>
<p>这里主要有两个关键点：一是把原有的上一层的title去掉，二是把返回按钮的indicator图片换成自定义的。</p>
<p>对于第一点，解决办法是：</p>
<pre><code>[[UIBarButtonItem appearance] setBackButtonTitlePositionAdjustment:UIOffsetMake(0, -60) forBarMetrics:UIBarMetricsDefault];
</code></pre><p>对于第二点，有两个解决办法：</p>
<pre><code>// Solution 1:
UIImage *img = [UIImage imageNamed:@&quot;itm_back&quot;];
[UINavigationBar appearance].backIndicatorImage = img;
[UINavigationBar appearance].backIndicatorTransitionMaskImage = img;

// Solution 2:
[[UIBarButtonItem appearance] setBackButtonBackgroundImage:[img resizableImageWithCapInsets:UIEdgeInsetsMake(0, img.size.width - 1, 0, 0)] forState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
</code></pre><p>对于第一个解决办法，需要注意的是，如果是自定义的back indicator image，<code>backIndicatorImage</code>和<code>backIndicatorTransitionMaskImage</code>必须成对出现，<a href="https://developer.apple.com/reference/uikit/uinavigationbar/1624938-backindicatortransitionmaskimage" target="_blank" rel="external">同时设置</a>。</p>
<p>对于第二个解决办法，需要注意的是，如果直接把<code>img</code>传进去，就会发现，图片被拉长了，变成了一柄剑。。。</p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/navBar-sword.png" alt=""></p>
<p>而在<code>-setBackButtonBackgroundImage: forState: barMetrics</code>的api中，特意添加了注释提醒开发者：<code>backgroundImage must be a resizable image for good results.</code></p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/nav-showFrame.png" alt=""></p>
<p>这里我的理解是，navigation bar返回按钮的图片+文字的placeholder有固定尺寸，当图片不够填充满这个区域的时候，会自动拉伸，所以注释中要求开发者传入一个可调整大小的图片作为参数。</p>
<p>而当我们调用<code>resizableImageWithCapInsets:</code>方法，并传入capInsets时，相当于锁定了cap insets的部分，让其余部分进行拉伸。在上面的代码中，设置capInsets为<code>UIEdgeInsetsMake(0, img.size.width, 0, 0)</code>，相当于保证原图片宽度范围内的图片不被拉伸，也就保证了原图片的显示效果。当然，调用<code>resizableImageWithCapInsets:</code>方法，<a href="https://developer.apple.com/reference/uikit/uiimage/1624102-resizableimagewithcapinsets" target="_blank" rel="external">实际上是返回了一张新图片，原有的图片是无法触及的</a>。</p>
<p>可以通过下面面包片模具的🌰来理解这个方法（嗯，吃货的思路就是这么独特。。～_～ ）：</p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/bread.jpeg" alt=""></p>
<p>蓝色框范围内是原面包片（即原图片）；蓝色框和绿色框之间的面包边儿就是你设定的capInsets，这取决于你使用什么样的模具；而绿色框范围内是你可以自由发挥的部分，里面夹猕猴桃香蕉片随你（即可拉伸范围。。嗯，对于面包片是纵向的伸展）。</p>
<hr>
<p>以下引自苹果官方文档，列在此处，备查。</p>
<blockquote>
<p>从iOS5.0及之后，可以通过以下（自定义bar样式）列举的方法来自定义UINavigationBar的样式。你可以用<code>[UINavigationBar appearance]</code>来自定义所有UINavigationBar的样式，也可以只改变单独的一个。</p>
<p>在iOS 7中，UINavigationBar的<code>tintColor</code>会影响返回指示按钮的图片、按钮的标题和按钮的图片。<code>barTintColor</code>会影响bar本身的颜色。另外，navigation bar默认是半透明的。开关半透明的设置不会影响按钮，因为它们是没有背景的。</p>
<p>自定义bar样式：</p>
<ul>
<li><code>backIndicatorImage</code>：返回按钮边上的图片</li>
<li><code>backIndicatorTransitionMaskImage</code>：在push和pop过程中作为内容的蒙版的图片（@_@）</li>
<li><code>titleVerticalPositionAdjustmentForBarMetrics:</code>：对给定的横屏或竖屏的bar调整title的垂直方向的位置偏移。</li>
<li><code>titleTextAttributes</code>：bar的title的各种显示属性，如字体、颜色、阴影等。</li>
</ul>
</blockquote>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="https://developer.apple.com/reference/uikit/uinavigationbar" target="_blank" rel="external">https://developer.apple.com/reference/uikit/uinavigationbar</a></li>
<li><a href="https://developer.apple.com/reference/uikit/uibarbuttonitem?language=objc" target="_blank" rel="external">https://developer.apple.com/reference/uikit/uibarbuttonitem?language=objc</a></li>
<li><a href="http://stackoverflow.com/a/20986544/1594792" target="_blank" rel="external">http://stackoverflow.com/a/20986544/1594792</a></li>
<li><a href="http://stackoverflow.com/a/29937730/1594792" target="_blank" rel="external">http://stackoverflow.com/a/29937730/1594792</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xkwcv.com1.z0.glb.clouddn.com/navbar.png&quot; alt=&quot;&quot; title=&quot;自定义navigationBar返回按钮&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里主要有两个关键点：一是把原有的上一层的title去掉，二是把返
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.calios.gq/tags/iOS/"/>
    
      <category term="UIKit" scheme="http://www.calios.gq/tags/UIKit/"/>
    
  </entry>
  
  <entry>
    <title>如何更新Mac中自带的Vim</title>
    <link href="http://www.calios.gq/2016/10/18/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0Mac%E4%B8%AD%E8%87%AA%E5%B8%A6%E7%9A%84Vim/"/>
    <id>http://www.calios.gq/2016/10/18/如何更新Mac中自带的Vim/</id>
    <published>2016-10-18T09:07:31.000Z</published>
    <updated>2017-01-11T07:08:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天翻卖桃君的公众号，温故了一下Vim 8.0的种种我目前也用不上的特性，竟是兴奋了一会儿，接着就开始考虑怎么把本机的Vim升级成8.0了。</p>
<p>根据SOF上的一个回答，步骤如下：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ # Create the directories you need</div><div class="line">$ sudo <span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/local/bin</div><div class="line">$ # Download, compile, <span class="built_in">and</span> install the latest Vim</div><div class="line">$ <span class="keyword">cd</span> ~</div><div class="line">$ hg clone http<span class="variable">s:</span>//bitbucket.org/<span class="keyword">vim</span>-mirror/<span class="keyword">vim</span> <span class="built_in">or</span> git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/<span class="keyword">vim</span>/<span class="keyword">vim</span>.git</div><div class="line">$</div><div class="line">$ <span class="keyword">cd</span> <span class="keyword">vim</span></div><div class="line">$ ./configure --prefix=/<span class="keyword">opt</span>/local</div><div class="line">$ <span class="keyword">make</span></div><div class="line">$ sudo <span class="keyword">make</span> install</div><div class="line">$ # Add the binary <span class="keyword">to</span> your path, ahead of /usr/bin</div><div class="line">$ <span class="keyword">echo</span> <span class="string">'PATH=/opt/local/bin:$PATH'</span> &gt;&gt; ~/.bash_profile</div><div class="line">$ # Reload bash_profile <span class="keyword">so</span> the <span class="keyword">changes</span> take effect in this window</div><div class="line">$ <span class="keyword">source</span> ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong></p>
<p><code>/usr/bin</code>路径下的文件，除非有明确的理由，否则不要改动。一旦操作失误，无法回退。所以，谨慎为妙。</p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="http://stackoverflow.com/a/7211910/1594792" target="_blank" rel="external">http://stackoverflow.com/a/7211910/1594792</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天翻卖桃君的公众号，温故了一下Vim 8.0的种种我目前也用不上的特性，竟是兴奋了一会儿，接着就开始考虑怎么把本机的Vim升级成8.0了。&lt;/p&gt;
&lt;p&gt;根据SOF上的一个回答，步骤如下：&lt;br&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="http://www.calios.gq/tags/Mac/"/>
    
      <category term="Terminal" scheme="http://www.calios.gq/tags/Terminal/"/>
    
      <category term="Vim" scheme="http://www.calios.gq/tags/Vim/"/>
    
  </entry>
  
</feed>
