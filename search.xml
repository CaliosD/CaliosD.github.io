<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[KVO & KVC 知识点小结]]></title>
      <url>http://www.calios.gq/2017/05/12/KVO-KVC-missing-points/</url>
      <content type="html"><![CDATA[<h3 id="1-KVO"><a href="#1-KVO" class="headerlink" title="1.KVO"></a>1.KVO</h3><h5 id="1-1-属性依赖的机制"><a href="#1-1-属性依赖的机制" class="headerlink" title="1.1 属性依赖的机制"></a>1.1 属性依赖的机制</h5><p>在objc.io讲解KVC和KVO的一篇<a href="https://www.objc.io/issues/7-foundation/key-value-coding-and-observing/" target="_blank" rel="external">文章</a>中，举了一个体现属性依赖机制的例子，例子的逻辑结构如下图。完整代码见<a href="https://github.com/objcio/issue-7-lab-color-space-explorer" target="_blank" rel="external">github</a>。</p>
<a id="more"></a>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/1.1%20PropertyDependency.png" alt="属性依赖机制"></p>
<p><strong>图解：</strong></p>
<ul>
<li>该图表现了通过改变L、a、b的滑块，更新上图右侧view的背景颜色的实现原理。</li>
<li>L、a、b代表Lab色彩空间中颜色的三种影响因素。</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (<span class="name">NSSet&lt;NSString</span> *&gt;) keyPathsForValuesAffectingValueForKey: (NSString *)key<span class="comment">;</span></div></pre></td></tr></table></figure>
<ul>
<li>key：受key path影响的key。</li>
<li>return：返回影响指定key的一组key path。</li>
<li>使用：<code>+ (NSSet&lt;NSString *&gt;) keyPathsForValuesAffecting&lt;Key&gt;</code>。</li>
</ul>
<p><strong>详解：</strong></p>
<ul>
<li>red的变化受L影响，green变化受L和a影响，blue变化受L和b影响，最终red、green和blue共同决定color属性，即view显示的背景颜色。</li>
<li>通过实现对应的+keyPathsForValuesAffectingRedComponent/GreenComponent/BlueComponent/Color来指定各个属性之间的依赖关系。</li>
<li>添加属性后，会在代码提示中自动生成如下名称的方法，选择一个就好了。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSSet</span> *)keyPathsForValuesAffectingRedComponent</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObject:<span class="string">@"lComponent"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSSet</span> *)keyPathsForValuesAffectingGreenComponent</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@"lComponent"</span>, <span class="string">@"aComponent"</span>, <span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSSet</span> *)keyPathsForValuesAffectingBlueComponent</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@"lComponent"</span>, <span class="string">@"bComponent"</span>, <span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSSet</span> *)keyPathsForValuesAffectingColor</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObjects:<span class="string">@"redComponent"</span>, <span class="string">@"greenComponent"</span>, <span class="string">@"blueComponent"</span>, <span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-2-KVO"><a href="#1-2-KVO" class="headerlink" title="1.2 KVO"></a>1.2 KVO</h5><p>添加对LabColor的实例对象labColor的属性color的观察者，并添加相应的响应事件，更新view的backgroundColor。</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>addObserver:<span class="params">(NSObject *)</span>anObserver</div><div class="line">         forKeyPath:<span class="params">(NSString *)</span>keyPath</div><div class="line">            options:<span class="params">(NSKeyValueObservingOptions)</span>options</div><div class="line">            context:<span class="params">(void *)</span>context</div><div class="line">- <span class="params">(void)</span>observeValueForKeyPath:<span class="params">(NSString *)</span>keyPath</div><div class="line">                      ofObject:<span class="params">(id)</span>object</div><div class="line">                        change:<span class="params">(NSDictionary *)</span>change</div><div class="line">                       context:<span class="params">(void *)</span>context</div></pre></td></tr></table></figure>
<p>对于options的几个可选值：</p>
<ul>
<li>获取变化之前的值用NSKeyValueObservingOptionOld，获取变化之后的值用NSKeyValueObservingOptionNew，二者都取用按位或。</li>
<li>在添加观察者之前就立即发送变化的通知用NSKeyValueObservingOptionInitial，可以通过这种一次性的通知确定被观察者某属性的初始值。</li>
<li>在即将发生变化之前发送通知用NSKeyValueObservingOptionPrior（通常都是发生变化后发送通知）。<br>建议设置Context，避免子类和父类观察同一对象的同一属性。</li>
</ul>
<p><strong>注意：</strong> KVO的add方法并不对观察对象、被观察对象和context持有强引用，所以要自行确保对于观察对象、被观察对象和context的强引用。</p>
<h5 id="1-3-手动通知"><a href="#1-3-手动通知" class="headerlink" title="1.3 手动通知"></a>1.3 手动通知</h5><ul>
<li>如何手动通知？</li>
</ul>
<p>当我们需要override 属性的setter方法时，有时候需要添加一些自定义的控制，再进行赋值。这时需要关闭系统自动调用 <code>-willChangeValueForKey:</code>和 <code>-didChangeValueForKey:</code>的行为，改为手动调用这两个方法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)automaticallyNotifiesObserversForLComponent;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setLComponent:(<span class="keyword">double</span>)lComponent;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (_lComponent == lComponent) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"lComponent"</span>];</div><div class="line">    _lComponent = lComponent;</div><div class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"lComponent"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>何时需要手动通知？<ul>
<li>使用 <code>-will|didChangeValueForKey:</code>的正确方式是，当你没有通过KVO兼容的accessor或setter改变property时，这种情况下KVO机制是不会捕获到变化的，需要手动触发。</li>
<li>只要触发setter，即使当前值没有改变，也会产生KVO的通知。当处于效率考虑、希望避免这种无用通知时可以考虑手动通知。</li>
</ul>
</li>
</ul>
<h5 id="1-4-KVO与线程"><a href="#1-4-KVO与线程" class="headerlink" title="1.4 KVO与线程"></a>1.4 KVO与线程</h5><p>通常来说，不推荐把KVO和多线程混合使用。因为KVO的行为是同步的，发生变化的线程和处理变化的线程应该是同一个线程。如果要使用多队列或是线程，我们不应该跨队列或是跨线程使用KVO。</p>
<h5 id="1-5-KVO实现细节"><a href="#1-5-KVO实现细节" class="headerlink" title="1.5 KVO实现细节"></a>1.5 KVO实现细节</h5><p>自动的KVO是通过一种叫<code>isa-swizzling</code>的技术实现的。isa指针通常是指向对象的类，类的分发表中包含着指向该类实现的方法的一些指针。<br>当观察者被注册为要观察对象的某个属性时，被观察者对象isa指针就被改变了，它不再指向实际的类，而是指向一个中间类。因此isa指针并不能反映实例所属的真正类。如果想要获取实例对象的类，应该使用class方法。</p>
<p>（然而，在Mike Ash一篇<a href="https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html" target="_blank" rel="external">谈论KVO在runtime层面如何实现的文章</a>中谈到，当你第一次观察指定类的对象时，KVO会在runtime创建一个全新的、继承自你的class的子类。在这个全新的类中，它override了任何被观察key的set方法，然后把你的对象的isa指针转移，这样你的对象就成为了这个新类的实例。被override的方法正是通知观察者实现的本质。逻辑是这样的：对于key的改变必须走key的set方法。通过override它的set方法，就可以劫持它，并且在它被调用的时候发送通知给观察者。苹果公司实在是不想将这个机制暴露出来，因此，除了setter之外，那个动态的子类还override了<code>-class</code>方法，来向你返回原始的类。如果你不仔细研究的话，KVO改变的对象就像没有被观察一样。私以为，Mike说得更接近真相。毕竟，真相只有一个。:P）</p>
<h5 id="1-6-KVO相关API"><a href="#1-6-KVO相关API" class="headerlink" title="1.6 KVO相关API"></a>1.6 KVO相关API</h5><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/KVO%20API.png" alt="KVO API"></p>
<h3 id="2-KVC"><a href="#2-KVC" class="headerlink" title="2.KVC"></a>2.KVC</h3><h5 id="2-1-不需要-property的KVC"><a href="#2-1-不需要-property的KVC" class="headerlink" title="2.1 不需要@property的KVC"></a>2.1 不需要@property的KVC</h5><ul>
<li>直接添加 <code>-&lt;key&gt;</code> 和 <code>-set&lt;Key&gt;:</code> 方法；</li>
<li>要正确处理nil，需要override <code>-setNilValueForKey:</code> 方法；</li>
<li>还可以通过override如下方法来让一个类支持KVC，但是会影响性能。</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(id)</span>valueForUndefinedKey:<span class="params">(NSString *)</span>key;</div><div class="line">- <span class="params">(void)</span>setValue:<span class="params">(id)</span>value forUndefinedKey:<span class="params">(NSString *)</span>key;</div></pre></td></tr></table></figure>
<ul>
<li>Foundation 框架支持直接访问实例变量。请小心的使用这个特性。你可以去查看 <code>+accessInstanceVariablesDirectly</code> 的文档。这个值默认是 <code>YES</code> 的时候，Foundation 会按照 <code>_&lt;key&gt;</code>, <code>_is&lt;Key&gt;</code>, <code>&lt;key&gt;</code>和 <code>is&lt;Key&gt;</code> 的顺序查找实例变量。</li>
</ul>
<h5 id="2-2-通过集合代理对象实现KVC"><a href="#2-2-通过集合代理对象实现KVC" class="headerlink" title="2.2 通过集合代理对象实现KVC"></a>2.2 通过集合代理对象实现KVC</h5><h5 id="2-3-常见错误"><a href="#2-3-常见错误" class="headerlink" title="2.3 常见错误"></a>2.3 常见错误</h5><ul>
<li>KVO 旨在观察 <em>关系 (relationship)</em> 而不是集合。我们不能观察 NSArray，我们只能观察一个对象的属性——而这个属性有可能是 NSArray。相似地，观察 self 不是永远都生效的。而且这不是一个好的设计。</li>
</ul>
<h5 id="2-4-KVV（键值验证）"><a href="#2-4-KVV（键值验证）" class="headerlink" title="2.4 KVV（键值验证）"></a>2.4 KVV（键值验证）</h5><ul>
<li>KVV 也是 KVC API 的一部分。这是一个用来验证属性值的 API，只是它光靠自己很难提供逻辑和功能。</li>
<li>用 KVV 验证 model 类的值是 Cocoa 的惯例。</li>
<li>需要在model中提供 <code>-validate&lt;Key&gt;:error:</code>方法。</li>
</ul>
<h5 id="2-5-KVC相关API"><a href="#2-5-KVC相关API" class="headerlink" title="2.5 KVC相关API"></a>2.5 KVC相关API</h5><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/KVC%20API.png" alt="KVC API"></p>
<h5 id="2-6-valueForKey-实现过程"><a href="#2-6-valueForKey-实现过程" class="headerlink" title="2.6 -valueForKey: 实现过程"></a>2.6 <code>-valueForKey:</code> 实现过程</h5><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/KVC%20Process.jpg" alt="valueForKey:"></p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref:"></a>Ref:</h3><ul>
<li><a href="https://www.objc.io/issues/7-foundation/key-value-coding-and-observing/" target="_blank" rel="external">https://www.objc.io/issues/7-foundation/key-value-coding-and-observing/</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html</a></li>
<li><a href="https://stackoverflow.com/q/3018242/1594792" target="_blank" rel="external">https://stackoverflow.com/q/3018242/1594792</a></li>
<li><a href="https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html" target="_blank" rel="external">https://www.mikeash.com/pyblog/friday-qa-2009-01-23.html</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> KVC </tag>
            
            <tag> KVO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WebSocket初探]]></title>
      <url>http://www.calios.gq/2017/04/19/WebSocket%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<h3 id="1-基础概要"><a href="#1-基础概要" class="headerlink" title="1.基础概要"></a>1.基础概要</h3><p><strong>应用层</strong>，主要解决如何包装数据：HTTP、FTP、Telnet等。其中，HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。所以是<strong>短连接</strong>。相对而言，socket连接是<strong>长连接</strong>，两端一旦建立连接将不会主动断掉。但由于各种环境因素可能会断开，所以当一个socket连接中没有数据传输时，为了维持连接需要发送<strong>心跳消息</strong>。<br><strong>传输层</strong>，主要解决数据如何在网络中传输：TCP协议。<br><strong>网络层</strong>，主要解决数据如何在网络中传输：IP协议。</p>
<blockquote>
<p>心跳消息（Heartbeat Message）：是一种发送源发送到接收方的消息，这种消息可以让接收方确定发送源是否以及何时出现故障或终止。常用于高可用性或容错处理的目的。</p>
</blockquote>
<p>socket是对TCP/IP协议的封装和应用，本身<strong><strong>并不是协议</strong></strong>，<strong><strong>而是一个调用接口（API）</strong></strong>，通过socket，我们才能使用TCP/IP协议。</p>
<p>“TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。就像操作系统会提供标准的编程接口，比如win32编程接口一样，TCP/IP也要提供可供程序员做网络开发所用的接口，这就是Socket编程接口。”</p>
<blockquote>
<p><strong>TCP连接的三次握手和四次分手：</strong><br>来自网络的流程图：<br><img src="http://7xkwcv.com1.z0.glb.clouddn.com/TCP3344.jpg" alt="TCP3344"></p>
<p><strong>TCP与UDP的区别：</strong></p>
<ul>
<li>TCP是面向连接的，保证连接的可靠性；</li>
<li>UDP在传送数据之前并不与对方建立连接，对收到的数据也不发送确认信号，是无连接的、不可靠的数据传输协议。</li>
<li>MSN采用TCP协议，QQ采用UDP，所以后者更快一些。</li>
</ul>
</blockquote>
<h3 id="2-利用Socket建立网络连接的步骤"><a href="#2-利用Socket建立网络连接的步骤" class="headerlink" title="2.利用Socket建立网络连接的步骤"></a>2.利用Socket建立网络连接的步骤</h3><p>ClientSocket，ServerSocket</p>
<p>套接字之间的连接步骤：</p>
<ul>
<li>服务器监听：处于等待客户端连接请求的状态，实时监控网络状态。</li>
<li>客户端请求：ClientSocket必须首先描述它要连接的ServerSocket，指出ServerSocket的地址和端口号，然后提出连接请求。</li>
<li>连接确认：当ServerSocket接收到ClientSocket的连接请求时，就响应请求，建立一个新的线程，把ServerSocket的描述发给ClientSocket，一旦Client确认了此描述，双方就正式建立连接。而ServerSocket继续处于监听状态，继续接收其他ClientSocket的连接请求。</li>
</ul>
<h3 id="3-WebSocket"><a href="#3-WebSocket" class="headerlink" title="3.WebSocket"></a>3.WebSocket</h3><p>WebSocket是HTML5开始提供的一种浏览器和服务器间进行<strong>全双工通讯</strong>的网络技术。在WebSocket API中，浏览器和服务器只需要做一个握手的动作，就可以形成一条快速通道，二者就可以直接进行数据互传。</p>
<blockquote>
<p>全双工：通讯传输的术语。指可以同时（瞬时）进行信号的双向传输。与之相对，单工就是只允许甲方向乙方传送信息，而乙方不能向甲方传送。</p>
</blockquote>
<p>面对这种情况，HTML5定义了WebSocket协议，节省服务器资源和带宽，并达到实时通讯。</p>
<p>具体规范见<a href="https://tools.ietf.org/html/rfc6455#section-4" target="_blank" rel="external">官网的RFC 6455文档</a>及<a href="https://www.gitbook.com/book/chenjianlong/rfc-6455-websocket-protocol-in-chinese/details" target="_blank" rel="external">翻译版本</a>。</p>
<p>客户端的WebSocket对象共绑定了四个事件：</p>
<ul>
<li>onopen：连接建立时触发；</li>
<li>onmessage：收到服务器消息时触发；</li>
<li>onerror：连接出错时触发；</li>
<li>onclose：连接关闭时触发。</li>
</ul>
<blockquote>
<p>socket与websocket的差别：</p>
<ul>
<li>socket是更底层。</li>
<li>websocket是在普通的socket的基础上添加一些framing和一次http兼容的握手机制。这个http兼容的握手机制只是为了允许websocket在webserver运行的同一个端口上进行连接，但一旦连接建立，webserver就不再loop中了。</li>
</ul>
</blockquote>
<h3 id="4-IM即时聊天的解决方案"><a href="#4-IM即时聊天的解决方案" class="headerlink" title="4.IM即时聊天的解决方案"></a>4.IM即时聊天的解决方案</h3><p>IM的主流技术：</p>
<ul>
<li>http polling：即轮询，是在特定的时间间隔（如1秒），由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客户端的浏览器。缺点是，浏览器不断向服务器发出请求，HTTP request的header是很长的，里面包含的数据可能很小，占用带宽和服务器资源。</li>
</ul>
<p>来自网络的流程图：<br><img src="http://7xkwcv.com1.z0.glb.clouddn.com/4.1%20Polling" alt="polling"></p>
<ul>
<li>http long-polling：即长轮询，又称comet。当server端没有数据推送到client端时，请求不会立即返回，而是被server端hold住，直到有数据发送，或者超时，才发送响应。client收到响应之后，立即重新发起http请求。</li>
</ul>
<p>来自网络的流程图：<br><img src="http://7xkwcv.com1.z0.glb.clouddn.com/4.2%20Long%20Polling" alt="long polling"></p>
<ul>
<li>socket长连接。</li>
</ul>
<p>Socket开源框架：<a href="https://github.com/robbiehanson/CocoaAsyncSocket" target="_blank" rel="external">CocoaAsyncSocket</a>，<a href="https://github.com/socketio/socket.io-client-swift" target="_blank" rel="external">socketio/socket.io-client-swift</a><br>WebSocket开源框架:<a href="https://github.com/facebook/SocketRocket" target="_blank" rel="external">facebook/SocketRocket</a>，<a href="https://github.com/tidwall/SwiftWebSocket" target="_blank" rel="external">tidwall/SwiftWebSocket</a><br>UI方面开源框架：<a href="https://github.com/jessesquires/JSQMessagesViewController" target="_blank" rel="external">JSQMessagesViewController</a></p>
<p>第三方SDK集成：</p>
<ul>
<li>前期：环信，容联云（集成了聊天、视频、语音）。</li>
<li>Firebase：<a href="https://firebase.google.com/（已墙。。bye。。。）" target="_blank" rel="external">https://firebase.google.com/（已墙。。bye。。。）</a></li>
<li>野狗：<a href="https://www.wilddog.com/（小团队，坐标望京）" target="_blank" rel="external">https://www.wilddog.com/（小团队，坐标望京）</a></li>
<li>微信用的WebRTC。</li>
</ul>
<p>其他协议：</p>
<ul>
<li>MQTT：是一个客户端服务端架构的发布/订阅模式的消息传输协议。知名的IM移动app，应该都是用的这个。听说XMPP到一定并发量有天坑。。？</li>
<li>XMPP：是一种以XML为基础的开放式即时通信协议。</li>
</ul>
<h3 id="5-iOS端与web端通过socket建立通讯"><a href="#5-iOS端与web端通过socket建立通讯" class="headerlink" title="5.iOS端与web端通过socket建立通讯"></a>5.iOS端与web端通过socket建立通讯</h3><p>web端：使用的是nodejs的socket.io。<br>iOS端：使用的是<a href="https://github.com/socketio/socket.io-client-swift" target="_blank" rel="external">socket.io的Swift版本</a>。</p>
<h5 id="5-1-web端配置"><a href="#5-1-web端配置" class="headerlink" title="5.1 web端配置"></a>5.1 web端配置</h5><ul>
<li>安装node.js：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></li>
<li>安装node.js的web框架express：<code>npm install —save express@4.15.2</code></li>
<li>创建index.js并添加如下代码：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'express'</span>)();</div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">  res.send(<span class="string">'&lt;h1&gt;Hello world&lt;/h1&gt;'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">http.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'listening on *:3000'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><p>运行 <code>node index.js</code>，terminal显示正在监听3000端口。<br><img src="http://7xkwcv.com1.z0.glb.clouddn.com/5.1.1%20run%20node" alt="run node"></p>
</li>
<li><p>浏览器访问<a href="http://localhost:3000。" target="_blank" rel="external">http://localhost:3000。</a><br><img src="http://7xkwcv.com1.z0.glb.clouddn.com/5.1%20visit%20localhost" alt="visit localhost"></p>
</li>
<li><p>添加显示对话窗口的html页面。</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.IO chat<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">      * &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">box-sizing</span>: border-box; &#125;</div><div class="line">      <span class="selector-tag">body</span> &#123; <span class="attribute">font</span>: <span class="number">13px</span> Helvetica, Arial; &#125;</div><div class="line">      <span class="selector-tag">form</span> &#123; <span class="attribute">background</span>: <span class="number">#000</span>; <span class="attribute">padding</span>: <span class="number">3px</span>; <span class="attribute">position</span>: fixed; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">width</span>: <span class="number">100%</span>; &#125;</div><div class="line">      <span class="selector-tag">form</span> <span class="selector-tag">input</span> &#123; <span class="attribute">border</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="attribute">width</span>: <span class="number">90%</span>; <span class="attribute">margin-right</span>: .<span class="number">5%</span>; &#125;</div><div class="line">      <span class="selector-tag">form</span> <span class="selector-tag">button</span> &#123; <span class="attribute">width</span>: <span class="number">9%</span>; <span class="attribute">background</span>: <span class="built_in">rgb</span>(130, 224, 255); <span class="attribute">border</span>: none; <span class="attribute">padding</span>: <span class="number">10px</span>; &#125;</div><div class="line">      <span class="selector-id">#messages</span> &#123; <span class="attribute">list-style-type</span>: none; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</div><div class="line">      <span class="selector-id">#messages</span> <span class="selector-tag">li</span> &#123; <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>; &#125;</div><div class="line">      <span class="selector-id">#messages</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(odd)</span> &#123; <span class="attribute">background</span>: <span class="number">#eee</span>; &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"messages"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"m"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>安装socket.io：<code>npm install —save socket.io</code>。</li>
<li><p>将socket相关的逻辑已更新到sample的<code>index.js</code>和<code>index.html</code>中。</p>
</li>
<li><p>最终，两个浏览器窗口之间，可以进行实时接发消息，web端配置就完成了。</p>
</li>
</ul>
<h5 id="5-2-iOS端配置"><a href="#5-2-iOS端配置" class="headerlink" title="5.2 iOS端配置"></a>5.2 iOS端配置</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>cd WebSocketSample/ClientWebSocket</div><div class="line"><span class="variable">$ </span>open SocketChat.xcodeproj</div></pre></td></tr></table></figure>
<p>项目完整代码见Github: <a href="https://github.com/CaliosD/WebSocketSample" target="_blank" rel="external">https://github.com/CaliosD/WebSocketSample</a></p>
<h3 id="6-参考文档"><a href="#6-参考文档" class="headerlink" title="6.参考文档"></a>6.参考文档</h3><ul>
<li><a href="https://socket.io/get-started/chat/" target="_blank" rel="external">https://socket.io/get-started/chat/</a></li>
<li><a href="http://www.appcoda.com/socket-io-chat-app/" target="_blank" rel="external">http://www.appcoda.com/socket-io-chat-app/</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Regex Notes]]></title>
      <url>http://www.calios.gq/2017/04/15/Regex-Notes/</url>
      <content type="html"><![CDATA[<h3 id="Some-definitions-before-we-start"><a href="#Some-definitions-before-we-start" class="headerlink" title="Some definitions before we start:"></a>Some definitions before we start:</h3><ul>
<li><strong>literal</strong>: A <strong>literal</strong> is any character we use in a search or matching expression, for example, to find <strong>ind</strong> in w <strong>ind</strong> ows the <strong>ind</strong> is a <strong>literal</strong> string - each character plays a part in the search, it is <strong>literally</strong> the string we want to find.</li>
</ul>
<a id="more"></a>
<ul>
<li><strong>metacharacter</strong>: A <strong>metacharacter</strong> is one or more special characters that have a unique meaning and are NOT used as <strong>literals</strong> in the search expression, for example, the character ^ (circumflex or caret) is a <strong>metacharacter</strong>.</li>
<li><strong>target string</strong>: This term describes the string that we will be searching, that is, the string in which we want to find our match or search pattern.</li>
<li><strong>search expression</strong>: Most commonly called the regular expression. This term describes the search expression that we will be using to search our target string, that is, the pattern we use to find what we want.</li>
<li><strong>escape sequence</strong>: An <strong>escape sequence</strong> is a way of indicating that we want to use one of our <strong>metacharacters</strong> as a <strong>literal</strong>. In a regular expression an <strong>escape sequence</strong> involves placing the <strong>metacharacter</strong> <code>\</code> (backslash) in front of the <strong>metacharacter</strong> that we want to use as a <strong>literal</strong>, for example, if we want to find <strong>(s)</strong> in the target string <strong>window(s)</strong> then we use the search expression <code>\(s\)</code> and if we want to find <code>\\file</code> in the target string <code>:\\file</code> then we would need to use the search expression <code>\\\\file</code> (each <code>\</code> we want to search for as a <strong>literal</strong> (there are 2) is preceded by an <strong>escape sequence )</strong>.</li>
</ul>
<h3 id="1-Brackets-Ranges-and-Negation"><a href="#1-Brackets-Ranges-and-Negation" class="headerlink" title="1.Brackets, Ranges and Negation"></a>1.Brackets, Ranges and Negation</h3><ul>
<li><code>[ ]</code> : Match anything inside the square brackets for <strong>ONE character position, once and only once</strong>.</li>
<li><code>-</code> : The - (dash) <strong>inside square brackets</strong> is the ‘range separator’ and allows us to define a range.<ul>
<li>Note: - inside brackets(as a literal) must come first or last.</li>
</ul>
</li>
<li><code>^</code> : The ^ (circumflex or caret) <strong>inside square brackets</strong> negates the expression.<ul>
<li>Note: There are no spaces between the range delimiter values.</li>
</ul>
</li>
</ul>
<h3 id="2-Positioning-or-Anchors"><a href="#2-Positioning-or-Anchors" class="headerlink" title="2.Positioning (or Anchors)"></a>2.Positioning (or Anchors)</h3><ul>
<li><code>^</code> : The ^ (circumflex or caret) <strong>when not used inside square brackets</strong> means look only at the beginning of the target string.</li>
<li><code>$</code> : The $ (dollar) means look only at the end of the target string.</li>
<li><code>.</code> : The . (period) means any character(s) in this position.</li>
</ul>
<p>3.Iteration ‘metacharacters’</p>
<p>The following is a set of <strong>iteration metacharacters</strong> that can control the <strong>number of times</strong> the <strong>preceding</strong> character is found in our searches.</p>
<ul>
<li><code>?</code> : The ? (question mark) matches when the preceding character occurs 0 or 1 times only.</li>
<li><code>*</code>: The * (asterisk or star) matches when the preceding character occurs 0 or more times.</li>
<li><code>+</code> : The + (plus) matches when the preceding character occurs 1 or more times.</li>
<li><code>{n}</code> : Matches when the preceding character, or character range, occurs n times exactly.</li>
<li><code>{n,m}</code> : Matches when the preceding character occurs at least n times but not more than m times.</li>
<li><code>{n, }</code> : Matches when the preceding character occurs at least n times.</li>
</ul>
<h3 id="4-More-‘metacharacters’"><a href="#4-More-‘metacharacters’" class="headerlink" title="4.More ‘metacharacters’"></a>4.More ‘metacharacters’</h3><ul>
<li><code>()</code> : The ( (open parenthesis) and ) (close parenthesis) may be used to group (or bind) parts of our search expression together. Officially this is called a subexpression and subexpressions may be nested to any depth.</li>
<li><code>|</code>: The | (vertical bar or pipe) is called alternation in techspeak and means find the left hand OR right values.</li>
</ul>
<h3 id="5-Common-Extensions-and-Abbreviations"><a href="#5-Common-Extensions-and-Abbreviations" class="headerlink" title="5.Common Extensions and Abbreviations"></a>5.Common Extensions and Abbreviations</h3><ul>
<li><code>\d</code> : Match any character in the range 0 - 9.</li>
<li><code>\D</code> : Match any character NOT in the range 0 - 9.</li>
<li><code>\s</code> : Match any whitespace characters (space, tab etc.).</li>
<li><code>\S</code> : Match any character NOT whitespace (space, tab).</li>
<li><code>\w</code> : Match any character in the range 0 - 9, A - Z, a - z and punctuation.</li>
<li><code>\W</code> : Match any character NOT the range 0 - 9, A - Z, a - z and punctuation.</li>
<li><code>\b</code> : Word boundary. Match any character(s) at the beginning <code>(\bxx)</code> and/or end <code>(xx\b)</code> of a word.</li>
<li><code>\B</code> : Not word boundary. Match any character(s) NOT at the beginning <code>(\bxx)</code> and/or end <code>(xx\b)</code> of a word.</li>
</ul>
<p><strong>PS</strong>: Punctuation symbols: <code>. , &quot; &#39; ? ! ; : # $ % &amp; ( ) * + - / &lt; &gt; = @ [ ] \ ^ _ { } | ~</code></p>
<h3 id="6-Some-pragmatic-gists-for-checking-URL-validation-in-Objective-C"><a href="#6-Some-pragmatic-gists-for-checking-URL-validation-in-Objective-C" class="headerlink" title="6.Some pragmatic gists for checking URL validation in Objective-C"></a>6.Some pragmatic gists for checking URL validation in Objective-C</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IP address check.</span></div><div class="line">- (<span class="built_in">BOOL</span>)isIPAddress &#123;</div><div class="line">    <span class="built_in">NSString</span> *result = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> containsProtocol]) &#123;</div><div class="line">        result = [result componentsSeparatedByString:<span class="string">@"//"</span>].lastObject;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSRegularExpression</span> *regex = [[<span class="built_in">NSRegularExpression</span> alloc] initWithPattern:<span class="string">@"[a-zA-Z]"</span> options:<span class="number">0</span> error:<span class="literal">NULL</span>];</div><div class="line">    <span class="built_in">NSInteger</span> matches = [regex numberOfMatchesInString:result options:<span class="number">0</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, result.length)];</div><div class="line">    <span class="keyword">return</span> (matches &lt;= <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IP address validation check.</span></div><div class="line">- (<span class="built_in">BOOL</span>)isValidIPAddress &#123;</div><div class="line">    <span class="built_in">NSString</span> *result = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> containsProtocol]) &#123;</div><div class="line">        result = [result componentsSeparatedByString:<span class="string">@"//"</span>].lastObject;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSString</span> *ipRegEx = <span class="string">@"(\\d&#123;1,3&#125;\\.)&#123;3&#125;(\\d)&#123;1,3&#125;(:\\d&#123;1,&#125;)?"</span>;</div><div class="line">    <span class="built_in">NSPredicate</span> *ipTest = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, ipRegEx];</div><div class="line">    <span class="keyword">return</span> [ipTest evaluateWithObject:result];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DNS address validation check.</span></div><div class="line">- (<span class="built_in">BOOL</span>)isValidDNSAddress &#123;</div><div class="line">    <span class="built_in">NSString</span> *result = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span> containsProtocol]) &#123;</div><div class="line">        result = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"http://%@"</span>,<span class="keyword">self</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSString</span> *urlRegEx =</div><div class="line">    <span class="string">@"(http|https)://((\\w)*|([0-9]*)|([-|_])*)+([\\.|/]((\\w)*|([0-9]*)|([-|_])*))+(:[0-9]&#123;1,&#125;)?"</span>;</div><div class="line">    <span class="built_in">NSPredicate</span> *urlTest = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, urlRegEx];</div><div class="line">    <span class="keyword">return</span> [urlTest evaluateWithObject:result];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>For more details and test case, please check <a href="https://gist.github.com/CaliosD/9e4262d0151764f3a07b32dc2ce90eff" target="_blank" rel="external">here</a>.</p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul>
<li><a href="http://www.zytrax.com/tech/web/regex.htm" target="_blank" rel="external">http://www.zytrax.com/tech/web/regex.htm</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Regex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CAS登录之iOS端总结]]></title>
      <url>http://www.calios.gq/2017/04/12/CAS%E7%99%BB%E5%BD%95%E4%B9%8BiOS%E7%AB%AF%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>CAS（集中式认证服务，Central Authentication Service）登录在后台开发中使用很广泛，它可以允许一个用户访问多个web app，而只需要提供一次凭证（如用户名和密码）。不仅方便用户跨程序使用系统，也实现了认证和web app分类，提高了安全性。</p>
<p>目前在移动端（本文以iOS为例）涉及到CAS登录的项目主要有两种实现方式：CAS模拟登录和RESTful方式的登录。现总结如下，供以后备查。</p>
<a id="more"></a>
<h3 id="1-CAS模拟登录"><a href="#1-CAS模拟登录" class="headerlink" title="1.CAS模拟登录"></a>1.CAS模拟登录</h3><p>这种方式相当于模拟登录web端，在请求回web app的登录页面后，返回CAS登录页面，从中获取lt和execution，请求CAS登录接口时，带上service=BaseURL/web-name/shiro-cas，通过这个操作判断是否登录，如果登录，就在web server中种入session，使得之后移动端调用web server的接口可以生效。</p>
<h5 id="1-1-使用的项目"><a href="#1-1-使用的项目" class="headerlink" title="1.1 使用的项目"></a>1.1 使用的项目</h5><p>CAS不被公司拥有的、无法提供Restful方式的项目接口。</p>
<h5 id="1-2-登录流程示意图"><a href="#1-2-登录流程示意图" class="headerlink" title="1.2 登录流程示意图"></a>1.2 登录流程示意图</h5><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/CAS%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE-%E8%84%B1%E6%95%8F.jpg" alt="CAS模拟登录示意图"></p>
<p>注：</p>
<ul>
<li>Step1为GET，Step2、3为POST。</li>
<li>Step2的j_captcha_response即为验证码。</li>
<li>请求验证码一步非必需。</li>
</ul>
<h3 id="2-RESTful方式"><a href="#2-RESTful方式" class="headerlink" title="2.RESTful方式"></a>2.RESTful方式</h3><p>可以使用Github上的开源demo（<a href="https://github.com/acu-dev/objc-cas-client）实现，也可以直接使用AFNetworking实现。本质上流程完全相同。" target="_blank" rel="external">https://github.com/acu-dev/objc-cas-client）实现，也可以直接使用AFNetworking实现。本质上流程完全相同。</a></p>
<h5 id="2-1-登录流程示意图"><a href="#2-1-登录流程示意图" class="headerlink" title="2.1 登录流程示意图"></a>2.1 登录流程示意图</h5><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/CAS%E7%99%BB%E5%BD%95RESTful%E6%B5%81%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE-%E8%84%B1%E6%95%8F.jpg" alt="RESTful方式"></p>
<p>注：</p>
<ul>
<li>Step1、2、3均为POST。</li>
</ul>
<h5 id="2-2-技术细节"><a href="#2-2-技术细节" class="headerlink" title="2.2 技术细节"></a>2.2 技术细节</h5><ul>
<li>Step1：请求TGT时 server路径形如：<a href="http://xxx.xxx.xxx.xxx/cas/v1/tickets/" target="_blank" rel="external">http://xxx.xxx.xxx.xxx/cas/v1/tickets/</a> 。需要传递账号密码参数给CAS，形如： account=somebody&amp;password=password。TGT请求成功时响应状态码为201，并且包含Location字段，形如：Location: <a href="http://www.whatever.com/cas/v1/tickets/{TGT" target="_blank" rel="external">http://www.whatever.com/cas/v1/tickets/{TGT</a> id}，然后截取TGT并保存。</li>
<li>Step2：根据TGT 请求ST server路径形如：<a href="http://xxx.xxx.xxx.xxx//cas/v1/tickets/TGT-xxxxxxxxx。参数形如：service=http://localhost:8080/web-name，成功后保存返回的ST。" target="_blank" rel="external">http://xxx.xxx.xxx.xxx//cas/v1/tickets/TGT-xxxxxxxxx。参数形如：service=http://localhost:8080/web-name，成功后保存返回的ST。</a></li>
<li>Step3：调用WebServer登录接口需要将获得的ST作为参数传递，形如：cas-service-ticket=ST-xxxxxxxxx.</li>
<li>登出CAS请求（DELETE）形如：<a href="http://xxx.xxx.xxx.xxx/cas/v1/tickets/TGT-xxxxxxxxx。然后向WebServer发起POST登出请求（即调用接口" target="_blank" rel="external">http://xxx.xxx.xxx.xxx/cas/v1/tickets/TGT-xxxxxxxxx。然后向WebServer发起POST登出请求（即调用接口</a> /web-name/logout） 成功后判定为整个登出流程完成。</li>
</ul>
<h3 id="3-参考资料："><a href="#3-参考资料：" class="headerlink" title="3.参考资料："></a>3.参考资料：</h3><ul>
<li>CAS原理介绍：<a href="http://p.primeton.com/articles/53c64e25e13823319f000068" target="_blank" rel="external">http://p.primeton.com/articles/53c64e25e13823319f000068</a></li>
<li>CAS认证的说明：<a href="https://www.purdue.edu/apps/account/html/cas_presentation_20110407.pdf" target="_blank" rel="external">https://www.purdue.edu/apps/account/html/cas_presentation_20110407.pdf</a></li>
<li>iOS开源Demo：<a href="https://github.com/acu-dev/objc-cas-client" target="_blank" rel="external">https://github.com/acu-dev/objc-cas-client</a></li>
<li>Jasig CAS RESTful API：<a href="https://wiki.jasig.org/display/CASUM/RESTful+API" target="_blank" rel="external">https://wiki.jasig.org/display/CASUM/RESTful+API</a></li>
<li>REST Protocol：<a href="https://apereo.github.io/cas/4.2.x/protocol/REST-Protocol.html" target="_blank" rel="external">https://apereo.github.io/cas/4.2.x/protocol/REST-Protocol.html</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CAS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GPS and related]]></title>
      <url>http://www.calios.gq/2017/03/22/GPS-and-related/</url>
      <content type="html"><![CDATA[<h3 id="iPhone-Location-How-apps-access-the-iPhone-location-and-what-they-can-do-with-it"><a href="#iPhone-Location-How-apps-access-the-iPhone-location-and-what-they-can-do-with-it" class="headerlink" title="iPhone Location: How apps access the iPhone location and what they can do with it."></a>iPhone Location: How apps access the iPhone location and what they can do with it.</h3><ul>
<li>Requesting an appropriate level of accuracy(the options are 3km, 1km, 100m, 10m, Best, or Best for navigation) is all about minimizing battery drain.<ul>
<li>At a low of accuracy(e.g. 3km), the phone could determine its location solely from cellular or wifi signals, which would avoid powering up the GPS and conserve battery life.</li>
<li>At higher levels of accuracy(e.g. 10m), the phone listens to all available signals that it can use to determine its location — which includes GPS and iBeacons, in addition to wifi and cellular</li>
<li>Apple does not say specifically say which signals are used at which levels of accuracy.</li>
</ul>
</li>
<li>An app can force the use of GPS by specifying “Best” — this will cause the phone to use GPS constantly to determine location as accurately as possible.</li>
<li>When the phone has a lock on 4 satellites, it can determine its elevation.<ul>
<li>With 3 satellites, it can only determine location.</li>
</ul>
</li>
<li>Significant Location Changes Only<ul>
<li>As an alternative to receiving updates every time the phone moves, an app can request that it receive a location update only when the phone’s location has changed “significantly”.</li>
<li>This will avoid powering up the GPS and will rely on cell towers and wifi signals only — resulting in substantially reduced power consumption.</li>
<li>“Significant” is not defined.</li>
</ul>
</li>
<li>Region Monitoring<ul>
<li>where an app defines one or more regions by specifying their center and radius.</li>
<li>Then the phone notifies the app whenever it enters or exits a region.</li>
<li>This uses wifi and cell towers only, so accuracy is similar to “significant changes only” and regions will only work if they are fairly large.</li>
</ul>
</li>
<li>iBeacons<ul>
<li>iBeacons are small wireless sensors that can transmit data to an iPhone using Bluetooth Low Energy(BLE)</li>
<li>iBeacons allow apps to receive special promotions, coupons, recommendations, etc, from business in real time when users are nearby</li>
<li>An app can display the information received from the business, or it can make use of the knowledge that the iBeacon is nearby for navigational purposes as a form of region monitoring.</li>
</ul>
</li>
<li>Inaccuracy Makes Distances Long<ul>
<li>When tracking the user’s path with high level of accuracy, any inaccuracies in location measurement will almost always cause the path to be longer than it should.</li>
</ul>
</li>
<li>“Snapping” to Roads<ul>
<li>To counteract the extra distance problem and provide a smoother path, iPhone will “snap” location updates to a known road network when the user is traveling about 15mph(on the assumption that the user is driving or biking during that time).</li>
<li>Apps have no way of knowing when this is happening — all they see are location updates like normal, but when the locations are later projected on a map, it is clear when this was happening.</li>
</ul>
</li>
<li>GPS Signal Quality<ul>
<li>GPS requires line-of-sight communication, so anything that blocks a direct path from the phone to a satellite can interfere with the signal (this includes trees, mountains, buildings, car roofs, etc)</li>
<li>When a direct GPS signal is blocked and the user is near a large solid object like a building, the GPS signal can arrive at the phone indirectly after bouncing off the building.</li>
<li>Because GPS works by measuring very precisely how long the signal takes to get from the satellite to the phone, when the signal takes a longer path like this, the calculated location will be off.</li>
</ul>
</li>
<li>Post-Processing<ul>
<li>It is difficult to overcome these limitations on the phone while the app is running.</li>
<li>However, if the app is recording a user’s path and saving it to a server(e.g. the way a fitness tracking app would), the server can make some corrections after upload, such as<ul>
<li>Snapping to roads or other known locations</li>
<li>Smoothing out jagged parts of the path</li>
<li>Replacing the inaccurate elevation reported by the phone with known elevation at that location</li>
</ul>
</li>
</ul>
</li>
<li>Map Displays<ul>
<li>iPhone makes displaying maps in apps really easy</li>
<li>Many common functions are built-in and require very little from the app developer, including:<ul>
<li>Displaying user location on the map</li>
<li>Displaying annotations and overlays on the map that zoom and scale with the map</li>
<li>Centering the map on the user’s location</li>
</ul>
</li>
<li>Geocoding(getting latitude/longitude coordinates from an address) and reverse geocoding(getting an address from latitude/longitude coordinates) is also built-in and quite easy to use</li>
</ul>
</li>
<li><strong>How iPhone determines its location:</strong><ul>
<li>Four types of signals<ul>
<li>iPhone can use 4 different types of signals to determine its location<ul>
<li>Cellular</li>
<li>Wifi</li>
<li>GPS</li>
<li>Bluetooth (from iBeacons)</li>
</ul>
</li>
<li>The phone’s location is determined by combining one or more of these signals(Which signals are used depends on availability and the requested accuracy)</li>
<li>All of this happens behind the scenes — any app can access the location of the phone, but the app does not know how it was calculated</li>
</ul>
</li>
<li>Cellular<ul>
<li>The location of cell towers is known to a high degree of accuracy. Based on the signal strength from various towers, the phone can estimate how far it is from each of them and calculate the phone’s location</li>
<li>This is always available when the phone has cell coverage, but is not very accurate since the towers can be far away and distance based on signal strength is not very accurate</li>
</ul>
</li>
<li>Wifi<ul>
<li>The phone uses the same process to determine location using wifi signals as it does for cellular signals, with distance estimated to the wifi hotspots based on signal strength</li>
<li>The locations of wifi hotspots have been crowdsourced for this purpose</li>
<li>Using wifi is more accurate than cell towers, but the user needs to have wifi turned on</li>
</ul>
</li>
<li>iBeacons<ul>
<li>When the phone detects a Bluetooth Low Energy signal from an iBeacon, in addition to knowing that an iBeacon is nearby, the phone can use the relative signal strength from multiple iBeacons to determine its location using the same technique that it uses for cellular and wifi signals</li>
<li>iBeacon signals only travel about 50 feet, so this location would be fairly accurate</li>
<li>This is particularly useful indoors, where GPS reception is poor</li>
</ul>
</li>
<li>GPS<ul>
<li>GPS is the most accurate of the 4 signals, but it is slow to get started</li>
<li>The phone needs to “lock on” 3-4 satellites within its line of sight before it can use GPS to determine location<ul>
<li>This can take anywhere from 15 seconds to several minutes, depending on the phone’s view of the sky</li>
<li>3 satellites can provide location; a fourth provides elevation</li>
<li>The phone uses its location calculated from other sources(e.g. cellular and wifi) to determine which satellites are within its line of sight at the current time, speeding up this process(this is called Assisted GPS, or A-GPS)</li>
</ul>
</li>
<li>Before the phone has a GPS lock, location is less accurate</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="In-iOS8-is-there-any-way-to-turn-off-all-radios-EXCEPT-GPS"><a href="#In-iOS8-is-there-any-way-to-turn-off-all-radios-EXCEPT-GPS" class="headerlink" title="In iOS8 is there any way to turn off all radios EXCEPT GPS?"></a>In iOS8 is there any way to turn off all radios EXCEPT GPS?</h3><p>(Latest answer on Aug 13, 2016. <a href="https://discussions.apple.com/thread/6543352?start=15&amp;tstart=0" target="_blank" rel="external">https://discussions.apple.com/thread/6543352?start=15&amp;tstart=0</a>)<br>iOS 9 has enabled GPS in Airplane mode. Tried and tested, works as it should.<br>iOS 8 walk-around would be setting sim-card pin, restarting the phone, not entering pin#, sim would be deactivated, however the phone would still look for emergency bands.<br>iOS 7 had a bug that would activate GPS when compass app was launched while the phone was in Airplane mode.</p>
<p>Since iOS 8.2, you can still use the GPS even in flight mode.(<a href="http://apple.stackexchange.com/questions/98649/does-airplane-mode-disable-gps?rq=1" target="_blank" rel="external">http://apple.stackexchange.com/questions/98649/does-airplane-mode-disable-gps?rq=1</a>)<br>GPS continues to work in airplane mode. Tested on iPhone 5s and SE with iOS 8, 9 and now 10. It may take longer (up to several minutes)to get the first fix but has full performance afterwards. It even works in an airplane when the iPhone is close to a window.</p>
<hr>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref:"></a>Ref:</h3><ul>
<li><a href="https://learnaboutcoding.wordpress.com/iphone-course/iphone-location/" target="_blank" rel="external">https://learnaboutcoding.wordpress.com/iphone-course/iphone-location/</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> GPS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Objective-C Runtime Programming Guide 翻译及详解]]></title>
      <url>http://www.calios.gq/2017/03/16/Objective-C-Runtime-Programming-Guide-%E7%BF%BB%E8%AF%91%E5%8F%8A%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>近日大脑一抽筋，尝试使用GitBook Editor的同时翻了一篇Runtime Programming的官方文档。</p>
<p>链接在此：<a href="https://caliosd.gitbooks.io/objective-c-runtime-programming-guide/" target="_blank" rel="external">https://caliosd.gitbooks.io/objective-c-runtime-programming-guide/</a></p>
<p>以此留念。欢迎各种批评指正。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Runtime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[SourceRead]-MJExtension]]></title>
      <url>http://www.calios.gq/2017/03/07/%5BSourceRead%5D-MJExtension/</url>
      <content type="html"><![CDATA[<p>MJExtension的源码，从最常用的<code>-objectArrayWithKeyValuesArray:</code>（字典数组转模型数组）和<code>-keyValuesArrayWithObjectArray:</code>（模型数组转字典数组）入手，就进入了<code>NSObject+MJKeyValue</code>分类。在梳理过这个类的实现方法之后，发现归根到底，核心的方法就这两个：<code>-setKeyValue:error:</code>（字典转模型）和<code>-keyValuesWithError:</code>（模型转字典）。</p>
<p>我们分别来看这两个方法。</p>
<h3 id="setKeyValue-error"><a href="#setKeyValue-error" class="headerlink" title="-setKeyValue:error:"></a><code>-setKeyValue:error:</code></h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (instance<span class="keyword">type</span>)setKeyValues:(<span class="type">NSDictionary</span> *)keyValues error:(<span class="type">NSError</span> *__autoreleasing *)error</div><div class="line">&#123;</div><div class="line">    <span class="type">MJAssertError</span>([keyValues isKindOfClass:[<span class="type">NSDictionary</span> class]], self, error, @<span class="string">"keyValues参数不是一个字典"</span>);</div><div class="line">    …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进入函数后，首先是一个断言，保证传入参数是一个字典。这里体现了防御式编程的思想，具体介绍可以看<a href="https://en.wikipedia.org/wiki/Defensive_programming" target="_blank" rel="external">wiki</a>（英文版比中文版的信息完整）。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSArray *ignoredPropertyNames = <span class="literal">nil</span>;</div><div class="line"><span class="keyword">if</span> ([[<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>] <span class="title">respondsToSelector</span>:@<span class="title">selector</span>(<span class="title">ignoredPropertyNames</span>)]) &#123;</span></div><div class="line">      ignoredPropertyNames = [[<span class="keyword">self</span> <span class="class"><span class="keyword">class</span>] <span class="title">ignoredPropertyNames</span>];</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先检查是否有需要忽略的属性，即不进行字典和模型转换的属性。<code>ignoredPropertyNames</code>这个方法来自<code>MJKeyValue</code>协议，除此之外，<code>MJKeyValue</code>协议中还定义了一些对于属性名的特殊处理，如替换属性名（<code>replacedKeyFromPropertyName</code>），指定数组中需要转换的模型类（<code>objectClassInArray</code>），和字典转模型完毕/模型转字典完毕时调用的方法。</p>
<p>往下走，进入核心部分。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[self class] enumerateIvarsWithBlock:^(<span class="name">MJIvar</span> *ivar, BOOL *stop) &#123;    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>enumerateIvarsWithBlock:</code>实现如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)enumerateIvarsWithBlock:(MJIvarsBlock)block</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> MJCachedIvarsKey;</div><div class="line">    <span class="comment">// 获得成员变量</span></div><div class="line">    <span class="built_in">NSMutableArray</span> *cachedIvars = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;MJCachedIvarsKey);    <span class="comment">// A</span></div><div class="line">    <span class="keyword">if</span> (cachedIvars == <span class="literal">nil</span>) &#123;</div><div class="line">        cachedIvars = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"></div><div class="line">        [<span class="keyword">self</span> enumerateClassesWithBlock:^(__<span class="keyword">unsafe_unretained</span> Class c, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">            <span class="comment">// 1.获得所有的成员变量</span></div><div class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount = <span class="number">0</span>;</div><div class="line">            Ivar *ivars = class_copyIvarList(c, &amp;outCount);    <span class="comment">// B</span></div><div class="line"></div><div class="line">            <span class="comment">// 2.遍历每一个成员变量</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i&lt;outCount; i++) &#123;</div><div class="line">                MJIvar *ivar = [MJIvar cachedIvarWithIvar:ivars[i]];    <span class="comment">// C</span></div><div class="line">                ivar.srcClass = c;</div><div class="line">                <span class="built_in">NSString</span> *key = [<span class="keyword">self</span> ivarKey:ivar.propertyName];</div><div class="line">                [ivar setKey:key forClass:<span class="keyword">self</span>];</div><div class="line">                <span class="comment">// 数组中的模型类</span></div><div class="line">                [ivar setObjectClassInArray:[<span class="keyword">self</span> ivarObjectClassInArray:ivar.propertyName] forClass:<span class="keyword">self</span>];</div><div class="line">                [cachedIvars addObject:ivar];    <span class="comment">// D</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 3.释放内存</span></div><div class="line">            free(ivars);    <span class="comment">// B</span></div><div class="line">        &#125;];</div><div class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, &amp;MJCachedIvarsKey, cachedIvars, OBJC_ASSOCIATION_RETAIN_NONATOMIC);    <span class="comment">// A</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 遍历成员变量</span></div><div class="line">    <span class="built_in">BOOL</span> stop = <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">for</span> (MJIvar *ivar <span class="keyword">in</span> cachedIvars) &#123;</div><div class="line">        block(ivar, &amp;stop);</div><div class="line">        <span class="keyword">if</span> (stop) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有这样三个点可以看一下：<br>A：<code>id objc_getAssociatedObject(id object, const void *key)</code>和<code>void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)</code>这一对方法，没什么需要赘述的。<br>B：<code>Ivar *class_copyIvarList(Class cls, unsigned int *outCount)</code>经常用来获取类的成员变量列表，返回值是一个指针的数组，类型是Ivar，在使用过之后记得到调用<code>free()</code>来释放数组的内存。</p>
<blockquote>
<p>我在这里简单写了一个获取类的成员变量列表的方法，仅供参考。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)printIvarsOfClass:(Class)c</div><div class="line">&#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ivarCount = <span class="number">0</span>;</div><div class="line">    Ivar *ivars = class_copyIvarList(c, &amp;ivarCount);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"====== Ivars of %@ are: "</span>, c);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ivarCount; i++) &#123;</div><div class="line">        Ivar var = ivars[i];</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* name = ivar_getName(var);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* typeEncoding = ivar_getTypeEncoding(var);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%s, %s \n"</span>, name, typeEncoding);</div><div class="line">    &#125;</div><div class="line">    free(ivars);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>C：用Ivar初始化一个<code>MJIvar</code>实例。MJIvar可以理解为在原有的Ivar基础上，添加了成员名、成员属性名、类型等常用属性和常用方法。<br>D：将设置好的MJIvar实例添加到缓存的成员变量中，以备后用，同时也提高了后续使用的效率。</p>
<p>后面的代码，作者注释已经很清楚了，就不再赘述。</p>
<h3 id="keyValuesWithError"><a href="#keyValuesWithError" class="headerlink" title="-keyValuesWithError:"></a><code>-keyValuesWithError:</code></h3><p>来看这个核心方法：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSDictionary</span> *)keyValuesWithError:(<span class="built_in">NSError</span> *__autoreleasing *)error</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 如果自己不是模型类</span></div><div class="line">    <span class="keyword">if</span> ([MJFoundation isClassFromFoundation:[<span class="keyword">self</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> (<span class="built_in">NSDictionary</span> *)<span class="keyword">self</span>;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先涉及到<code>MJFoundation</code>类的一个（也是唯一一个）方法：<code>+isClassFromFoundation:</code>。代码并不复杂：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load</div><div class="line">&#123;</div><div class="line">    _foundationClasses = [<span class="built_in">NSSet</span> setWithObjects:</div><div class="line">                          [<span class="built_in">NSObject</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSURL</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSDate</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSNumber</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSDecimalNumber</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSData</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSMutableData</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSArray</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSMutableArray</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSDictionary</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSString</span> <span class="keyword">class</span>],</div><div class="line">                          [<span class="built_in">NSMutableString</span> <span class="keyword">class</span>], <span class="literal">nil</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">BOOL</span>)isClassFromFoundation:(Class)c</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [_foundationClasses containsObject:c];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>只是检查一下传入的类是否属于基本类。这里要看的，其实是它上面的方法<code>+(void)load</code>。</p>
<blockquote>
<p><code>+load</code>在所属类一加载完的时候就会被调用，非常早。如果是在应用中或是应用链接的框架中实现<code>+load</code>，<code>+load</code>会在<code>main()</code>函数调用之前执行。如果是在一个可加载的bundle中实现<code>+load</code>，它就会在bundle加载的过程中执行。<code>+load</code>特别的一点是，如果在类和该类的category中都实现了<code>+load</code>方法，两个<code>+load</code>方法都会被执行。这就意味着<code>+load</code>是存放类似method swizzling这种魔鬼的好地方。:]</p>
<p>与<code>+load</code>类似的是<code>+initialize</code>方法，它是个比<code>+load</code>更安全的存放代码的地方。当类第一次加载的时候，<code>+initialize</code>并不会调用。当有消息发送给类的 时候，runtime会首先检查<code>+initialize</code>是否已经被调用，如果没有，就会在处理消息发送之前先调用<code>+initialize</code>。</p>
</blockquote>
<p>更多关于<code>+load</code>和<code>+initialize</code>的讲解，可以看Mike Ash的<a href="https://www.mikeash.com/pyblog/friday-qa-2009-05-22-objective-c-class-loading-and-initialization.html" target="_blank" rel="external">这篇</a>。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Runtime </tag>
            
            <tag> SourceRead </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C的几个基本概念：结构体、指针、函数指针、内存分配等]]></title>
      <url>http://www.calios.gq/2017/02/27/C%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%9A%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%8C%87%E9%92%88%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E3%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%89/</url>
      <content type="html"><![CDATA[<h3 id="typedef-struct和单纯struct定义的差别"><a href="#typedef-struct和单纯struct定义的差别" class="headerlink" title="typedef struct和单纯struct定义的差别"></a>typedef struct和单纯struct定义的差别</h3><p>通常来说是<code>typedef</code>和<code>struct</code>定义都写。</p>
<figure class="highlight thrift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">X</span> </span>&#123;</div><div class="line">    int x;</div><div class="line">&#125;X;</div></pre></td></tr></table></figure>
<p>为了更加清晰明了，拆成两部分来看：</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span> &#123;            <span class="comment">// 第一部分</span></div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">&#125;;</div><div class="line">typedef <span class="class"><span class="keyword">struct</span> <span class="title">S</span></span> S;   <span class="comment">// 第二部分</span></div></pre></td></tr></table></figure>
<p>首先第一部分，在struct的命名空间中，定义了唯一的<code>S</code>。此时，你可以用<code>struct S</code>来定义变量或者函数的参数。比如这样：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">struct</span> S argument)</span></span>;  <span class="comment">// 这里的struct是必需的</span></div></pre></td></tr></table></figure></p>
<p>第二部分在全局的命名空间中添加了一个叫<code>S</code>的别名，这就允许你这么写了：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(S argument)</span></span>;         <span class="comment">// 这里不再需要struct了</span></div></pre></td></tr></table></figure>
<p>既然定义唯一标识的命名空间不同，在struct中和全局都定义<code>S</code>就没有问题。因为这不是重复定义唯一标识，而是相当于在不同空间创建不同的标识。</p>
<p>让我们把差别表现得更明显一点：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> S &#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">&#125;T;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">S</span><span class="params">()</span> </span>&#123;&#125;     <span class="comment">// 正确</span></div><div class="line"><span class="comment">// void T() &#123;&#125;     // 错误：T已经被定义为struct S的别名了</span></div></pre></td></tr></table></figure>
<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>对于一个变量而言，可以看做由四部分构成：</p>
<ul>
<li>名字</li>
<li>存储位置</li>
<li>存储的数据类型</li>
<li>当前的值</li>
</ul>
<p>如果能够理解这两点：1.变量是怎样存储的，2.除了名字之外通过其他方式也可以获取变量，那么就几乎可以理解指针的概念了。</p>
<p>先来看一个简单的例子：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">int x = <span class="number">39</span>;     </div><div class="line">int* y = <span class="variable">&amp;x</span>;         </div><div class="line">printf(<span class="string">"x: \n\t value:%d \n\t addr:%p \ny: \n\t value:%d \n\t addr: %p \n"</span>,x,<span class="variable">&amp;x</span>,*y,<span class="variable">&amp;y</span>);</div><div class="line"><span class="symbol"></span></div><div class="line">Output:</div><div class="line"><span class="symbol">x:</span></div><div class="line"><span class="symbol">	 value:</span><span class="number">39</span></div><div class="line"><span class="symbol">	 addr:</span><span class="number">0x7fff5fbff728</span></div><div class="line"><span class="symbol">y:</span></div><div class="line"><span class="symbol">	 value:</span><span class="number">39</span></div><div class="line"><span class="symbol">	 addr:</span> <span class="number">0x7fff5fbff720</span></div></pre></td></tr></table></figure>
<p>我们着重来看这一行：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *y = &amp;x;</div></pre></td></tr></table></figure></p>
<ul>
<li>“*”是指针的标志，意思是我们不想在这个变量中存储的实际的数值，而是只存一个指向这个数值的地址。</li>
<li>“*”前面的数据类型，表示的是从指针存储的地址中一次能够读写的数据字节数。这里是<code>int</code>，所以是32位的4字节，64位的8字节。</li>
<li><code>y</code>是这个指针变量的名字；</li>
<li><code>=</code>是把右边的值赋给左边；</li>
<li><code>&amp;</code>，读作”xx的地址”，是引用的操作符。<strong>引用，意味着将一个已有变量的地址赋给一个指针变量。</strong></li>
</ul>
<p>所以这一句的意思是：把<code>x</code>的地址赋值给一个类型为<code>int</code>的指针变量<code>y</code>。</p>
<p>反过来，一旦你获取了一个存储着地址的指针变量，通过这个指针很自然就可以获取它指向的值，比如上面例子最后一行打印<code>*y</code>可以得到<code>x</code>的值，这个操作就叫做 <strong>解引用</strong>，也可以理解为“按图索骥”，操作符是“*”，可以读作“被xx指向的值”。</p>
<p>对指针的理解，可以类比快捷方式：</p>
<p>比如我在<code>/Users/calios/Desktop</code>路径下创建一个名为<code>aliasTest.txt</code>的文件，打开并输入<code>This is aliasTest file from Desktop.</code>并保存。右键创建快捷方式，并将名为<code>aliasTest.txt alias</code>的快捷方式扔到<code>/Users/calios/Documents</code>路径下。双击<code>aliasTest.txt alias</code>文件，将文件内容修改为<code>This is aliasTest file from Documents.</code>并保存。当然，聪明如你，肯定知道这时候修改的文件其实是源文件<code>aliasTest.txt</code>。此时，无论是从哪个路径下打开文件，看到的都是<code>This is aliasTest file from Documents.</code>。</p>
<p>同理，身处内存不同区域的指针变量，只要存储着同一个变量的地址，那么指向的值就是相同的。</p>
<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>理解了上面的指针，我们来看函数指针。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数声明</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFun</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</div><div class="line"><span class="keyword">void</span> (*funPointer)(<span class="keyword">int</span>);</div><div class="line"></div><div class="line"><span class="comment">// 函数实现</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myFun</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"myFun: %d\n"</span>,x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 函数调用</span></div><div class="line">funPointer = &amp;myFun;  <span class="comment">//将myFun函数的地址赋给funPointer变量</span></div><div class="line">(*funPointer)(<span class="number">200</span>);  <span class="comment">//通过函数指针变量来调用函数</span></div></pre></td></tr></table></figure>
<p>函数指针和变量指针在语言层面是没有差别的。但是在运行过程中，变量指针是指向堆区、栈区、静态区和全局区；而函数指针指向text区，就是代码段。所以函数指针执行括号的时候，会执行汇编的jump，就是跳转指令到text段的代码。</p>
<h3 id="指向结构体的指针"><a href="#指向结构体的指针" class="headerlink" title="指向结构体的指针"></a>指向结构体的指针</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">struct <span class="keyword">box </span>*p = …<span class="comment">;</span></div><div class="line">p-&gt;width = <span class="number">20</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p>在处理指向结构体类型的指针时，“-&gt;”可以让你一步实现对指针解引用，并获取指定的字段值。如上面代码中，第二行的“-&gt;”实现了指针p的解引用，并获取了结构体中<code>width</code>字段。</p>
<p>不管结构体的实例是什么——访问其成员其实就是加成员的偏移量。</p>
<h3 id="指针的比较"><a href="#指针的比较" class="headerlink" title="指针的比较"></a>指针的比较</h3><p>在使用指针来读取或修改它指向的值时，有时候通过比较两个指针是否指向同一个值是很有用的。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> data[<span class="number">2</span>] = &#123;<span class="number">99</span>,<span class="number">99</span>&#125;;</div><div class="line"><span class="keyword">int</span> *m = &amp;data[<span class="number">0</span>];</div><div class="line"><span class="keyword">int</span> *n = &amp;data[<span class="number">1</span>];</div><div class="line"><span class="keyword">if</span> (*m == *n) &#123;   <span class="comment">// A</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"the two values are the same"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"the two values ( %p vs %p ) are different"</span>,m,n);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>观察A处的判断条件，如果是<code>(*m == *n)</code>，比较的是两个指针指向的值是否相同，所以会走第一个分支；而如果是<code>(m == n)</code>，则比较的是两个指针本身的地址，所以会走第二个分支。</p>
<h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><p>在C语言中的，不指向任何数据的空指针用<code>NULL</code>表示。例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;</div></pre></td></tr></table></figure></p>
<p>而在Objective-C中通常用<code>nil</code>表示指向一个空对象，并逐渐摒弃了C中用<code>NULL</code>表示的方式。</p>
<p>同时也要注意，不要试图对NULL指针获取解引用，这会导致错误并立即退出程序。</p>
<h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><p>在讲解C语言中的内存区块分配之前，先来看一点说明。</p>
<p>通常来说可以把变量分成三种：</p>
<ul>
<li>局部变量</li>
<li>全局变量</li>
<li>静态变量<br>可以由它们组合成“全局静态变量”或是“局部静态变量”。</li>
</ul>
<p>接着我们来看五个内存区块：</p>
<p>1.程序区：也用来指代文本区，是存储可执行程序的二进制代码的区域。<br>2.数据区：分成以下两部分，通常位于堆的上面或者栈的上面，但绝不会在堆和栈之间的区域。</p>
<ul>
<li>未初始化的数据区：也叫<code>bss</code>。包括未初始化的全局变量、全局常量和局部静态变量。</li>
<li>初始化的数据区：包括初始化的全局变量、全局常量和局部静态变量。这部分的大小取决于源代码中数值所占的大小，在运行时不会改变。<br>3.栈区：用来存储函数中创建的变量，比如函数中的局部变量、传入函数的参数和返回值等。在栈中存储的变量在函数执行结束之后就会被移除。<br>4.堆区：用来支持动态内存分配。比如调用<code>malloc</code>、<code>calloc</code>或者<code>realloc</code>等方法。</li>
</ul>
<blockquote>
<p><code>malloc</code>的完整定义是<code>void *malloc(size_t size)</code>，它可以根据参数、从堆中动态分配一块内存，并返回指向第一个字节的指针，或是在出错的时候返回一个NULL。<br>与<code>malloc</code>相关的函数还有：</p>
<ul>
<li><code>calloc()</code>：为数组在内存中分配空间。</li>
<li><code>realloc()</code>：重新分配指定大小的内存空间。</li>
<li><code>free()</code>：释放之前分配的空间。</li>
</ul>
</blockquote>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li>Meaning of referencing and dereferencing：<br><a href="http://stackoverflow.com/a/14224977/1594792" target="_blank" rel="external">http://stackoverflow.com/a/14224977/1594792</a></li>
<li>Pointers in Objective-C：<br><a href="http://www.drdobbs.com/mobile/pointers-in-objective-c/225700236" target="_blank" rel="external">http://www.drdobbs.com/mobile/pointers-in-objective-c/225700236</a><br><a href="http://www.drdobbs.com/mobile/pointers-in-objective-c/225700236?pgno=2" target="_blank" rel="external">http://www.drdobbs.com/mobile/pointers-in-objective-c/225700236?pgno=2</a></li>
<li><a href="https://gist.github.com/CaliosD/192ba8bfb78f0c08ca85ac442eb20ca7" target="_blank" rel="external">https://gist.github.com/CaliosD/192ba8bfb78f0c08ca85ac442eb20ca7</a></li>
<li><a href="http://stackoverflow.com/questions/14588767/where-in-memory-are-my-variables-stored-in-c" target="_blank" rel="external">http://stackoverflow.com/questions/14588767/where-in-memory-are-my-variables-stored-in-c</a></li>
<li><a href="https://en.wikipedia.org/wiki/Struct_(C_programming_language" target="_blank" rel="external">https://en.wikipedia.org/wiki/Struct_(C_programming_language</a>)</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C的宏魔法]]></title>
      <url>http://www.calios.gq/2017/02/23/C%E7%9A%84%E5%AE%8F%E9%AD%94%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="“-”和”-”"><a href="#“-”和”-”" class="headerlink" title="“#”和”##”"></a>“#”和”##”</h2><ul>
<li><strong>#：String-izing Tokens</strong>，作用是把宏参数转化成以传入的参数名为内容的字符串。通常可以用于debug时打印参数。<br>比如说，如果定义成这样：<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define PRINT_TOKEN(<span class="name">token</span>) NSLog(<span class="name">#token</span> <span class="string">" is %d"</span>, token)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用时，<code>PRINT_TOKEN(1+2);</code>替换之后就会变为<code>NSLog(1+2 &quot; is %d&quot;, token);</code>得到<code>1+2 is 3</code>。</p>
<p>如果不使用#，就会变成：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">PRINT_TOKEN</span>(token) <span class="selector-tag">NSLog</span>(<span class="string">"token"</span> <span class="string">" is %d"</span>, token)</div></pre></td></tr></table></figure></p>
<p>这里我们期望<code>&quot; &quot;</code>的作用是变量替换，而在实际语言中，双引号有字符串拼接的作用。为了遵守单一职责的原则，#的存在是有意义的。</p>
<ul>
<li><strong>##：Pasting Tokens</strong>，在把宏参数拼接到一起、形成一个新的参数时非常有用。比如我们要通过一个变量，给另一个相关名字的变量赋值：</li>
</ul>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#define DECLARE_AND_SET(<span class="built_in">type</span>, varname, <span class="built_in">value</span>) <span class="built_in">type</span> varname = <span class="built_in">value</span>; <span class="built_in">type</span> orig_##varname = varname;</div><div class="line"></div><div class="line">DECLARE_AND_SET( <span class="built_in">int</span>, area, <span class="number">12</span> );</div></pre></td></tr></table></figure>
<p>在这个例子中，如果不使用“##”，就不能这样一步到位地实现粘贴成 <strong>变量</strong> 的目的。如果宏中的参数是类名，就需要先拼接字符串，再使用<code>NSClassFromString()</code>这样的方法将字符串转换成<code>Class</code>类型。这在实际项目中还是很有用的。</p>
<h2 id="metamacro-concat-宏"><a href="#metamacro-concat-宏" class="headerlink" title="metamacro_concat_宏"></a><code>metamacro_concat_</code>宏</h2><p>在<code>ReactiveCocoa</code>的代码中看到过这样两个宏定义：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#define metamacro_concat(A, B) \</span></div><div class="line">        metamacro_concat_(A, <span class="keyword">B)</span></div><div class="line"><span class="comment">#define metamacro_concat_(A, B) A ## B</span></div></pre></td></tr></table></figure>
<p><code>metamacro_concat_</code>这个宏其实和直接使用<code>##</code>语法基本等效，那么为什么不直接使用<code>##</code>写到使用它的宏里呢？</p>
<p>首先来理解下宏处理过程的操作流程图，可以想象成有一个指针，从前到后地查找宏和宏参数：</p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/NestedMacroHandling.jpg" alt="处理过程"></p>
<p>在宏计算的过程中出现多层嵌套时，都是遇到<code>##</code>就立即进行拼接。<code>metamacro_concat_</code>的作用相当于在<code>##</code>外面包了一层，降低了<code>##</code>的在宏处理时的“优先级”。</p>
<p>因此，同样是计算<code>metamacro_concat(1, metamacro_concat(2, 3))</code>，直接使用<code>##</code>和间接使用的推导过程就截然不同，具体推导如下。</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// Test-<span class="number">1</span>：直接使用`##`</div><div class="line">#define metamacro_concat(A,B)     A ## B</div><div class="line"></div><div class="line">metamacro_concat(<span class="number">1</span>, metamacro_concat(<span class="number">2</span>, <span class="number">3</span>))</div><div class="line">// 判断metamacro_concat中是否有#和##，有##，实参替换形参</div><div class="line">=&gt; <span class="number">1</span> ## metamacro_concat(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">=&gt; <span class="number">1</span>metamacro_concat(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">// 没有<span class="number">1</span>metamacro_concat的定义，报错。</div><div class="line"></div><div class="line"></div><div class="line">// Test-<span class="number">2</span>：间接使用`##`</div><div class="line">#define metamacro_concat(A,B)   _metamacro_concat(A,B)</div><div class="line">#define _metamacro_concat(A,B)  A ## B</div><div class="line"></div><div class="line">metamacro_concat(<span class="number">1</span>, metamacro_concat(<span class="number">2</span>,<span class="number">3</span>))</div><div class="line">// 判断metamacro_concat中是否有##，没有，替换成_metamacro_concat</div><div class="line">=&gt; _metamacro_concat(<span class="number">1</span>, metamacro_concat(<span class="number">2</span>,<span class="number">3</span>))</div><div class="line">=&gt; _metamacro_concat(<span class="number">1</span>, _metamacro_concat(<span class="number">2</span>,<span class="number">3</span>))</div><div class="line">=&gt; _metamacro_concat(<span class="number">1</span>, <span class="number">2</span> ## <span class="number">3</span>)</div><div class="line">=&gt; _metamacro_concat(<span class="number">1</span>, <span class="number">23</span>)</div><div class="line">=&gt; <span class="number">1</span> ## <span class="number">23</span></div><div class="line">=&gt; <span class="number">123</span></div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref: </strong></p>
<ul>
<li><a href="https://onevcat.com/2014/01/black-magic-in-macro/" target="_blank" rel="external">https://onevcat.com/2014/01/black-magic-in-macro/</a></li>
<li><a href="http://stackoverflow.com/a/3776901/1594792" target="_blank" rel="external">http://stackoverflow.com/a/3776901/1594792</a></li>
<li><a href="http://www.cprogramming.com/tutorial/cpreprocessor.html" target="_blank" rel="external">http://www.cprogramming.com/tutorial/cpreprocessor.html</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[__attribute__小结]]></title>
      <url>http://www.calios.gq/2017/02/20/attribute-%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="1-attribute-是什么？"><a href="#1-attribute-是什么？" class="headerlink" title="1.__attribute__是什么？"></a>1.<code>__attribute__</code>是什么？</h3><p><code>__attribute__</code>是Clang提供的、用来在C，C++和Objective-C中修饰代码定义的 <strong>编译指令</strong>。它为声明的代码提供了额外的属性，来帮助编译器优化或者为代码的使用者显示有用的警告信息。</p>
<h3 id="2-attribute-有什么用？"><a href="#2-attribute-有什么用？" class="headerlink" title="2.__attribute__有什么用？"></a>2.<code>__attribute__</code>有什么用？</h3><p><code>__attribute__</code>命令提供代码运行需要的上下文。提供上下文的重要性怎么强调都不过分。通过详细地给出API如何命令编译器的定义，开发者可以获得显而易见的益处。同样是一束鲜花，是要在情人节送给女朋友还是要用来探望术后的病人，效果是完全不同的。而<code>__attribute__</code>的作用就好像鲜花上附加的一张卡片，上面写的是“送给最爱的某某”还是“愿某某早日康复”是完全由你来决定的。</p>
<p>正如Mattt在<a href="http://nshipster.com/__attribute__/" target="_blank" rel="external">这里</a>指出的：</p>
<blockquote>
<p>当涉及到编译器优化时，上下文就是王道。通过约束你的代码的解释方式，你可以让生成的代码尽可能的高效。不只是为了编译器。下一个看代码的人也会感激（你所提供的）额外的上下文信息。</p>
</blockquote>
<h3 id="3-attribute-怎么用？"><a href="#3-attribute-怎么用？" class="headerlink" title="3.__attribute__怎么用？"></a>3.<code>__attribute__</code>怎么用？</h3><p>它的语法是这样的：<code>__attribute__((interrupt(“TYPE&quot;)))</code>。</p>
<p>每当你有机会来给代码定义（变量，参数，函数，方法，类等等）提供额外的上下文信息时，你都应该使用<code>__attribute__</code>。但除非你知道自己在干什么，否则，不要滥用。因为提供一个错误的上下文比没有提供上下文更糟糕。</p>
<h3 id="4-attribute-使用举例？"><a href="#4-attribute-使用举例？" class="headerlink" title="4.__attribute__使用举例？"></a>4.<code>__attribute__</code>使用举例？</h3><p><strong>声明一个API在某平台的可用性：<strong>attribute</strong>((availability(…)))：如 NS_AVAILABLE 和 NS_DEPRECATED</strong></p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define NS_AVAILABLE(<span class="name">_mac</span>, _ios) CF_AVAILABLE(<span class="name">_mac</span>, _ios)</div><div class="line">#define CF_AVAILABLE(<span class="name">_mac</span>, _ios) __attribute__((<span class="name">availability</span>(<span class="name">macosx</span>,introduced=_mac)))</div></pre></td></tr></table></figure>
<p>在<code>Foundation</code>库的<code>NSString.h</code>中的使用：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(BOOL)</span>containsString:<span class="params">(NSString *)</span>str NS_AVAILABLE<span class="params">(<span class="number">10</span>_10, <span class="number">8</span>_0)</span>;</div></pre></td></tr></table></figure></p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define NS_DEPRECATED(<span class="name">_macIntro</span>, _macDep, _iosIntro, _iosDep, ...) CF_DEPRECATED(<span class="name">_macIntro</span>, _macDep, _iosIntro, _iosDep, __VA_ARGS__)</div><div class="line">#define CF_DEPRECATED(<span class="name">_macIntro</span>, _macDep, _iosIntro, _iosDep, ...) __attribute__((<span class="name">availability</span>(<span class="name">macosx</span>,introduced=_macIntro,deprecated=_macDep,message=<span class="string">""</span> __VA_ARGS__)))</div></pre></td></tr></table></figure>
<p>同样在<code>Foundation</code>库的<code>NSString.h</code>中：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)initWithContentsOfFile:(<span class="built_in">NSString</span> *)path <span class="built_in">NS_DEPRECATED</span>(<span class="number">10</span>_0, <span class="number">10</span>_4, <span class="number">2</span>_0, <span class="number">2</span>_0);（用带有encoding/usedEncoding和error参数的方法替代）</div></pre></td></tr></table></figure></p>
<p><strong>声明一个函数中包含带有指定格式参数的格式化字符串：<strong>attribute</strong>((format(…)))：NS_FORMAT_FUNCTION</strong></p>
<p>在<code>Foundation</code>库的<code>NSObjCRuntime.h</code>中：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FOUNDATION_EXPORT <span class="keyword">void</span> <span class="built_in">NSLog</span>(<span class="built_in">NSString</span> *format, ...) <span class="built_in">NS_FORMAT_FUNCTION</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="built_in">NS_NO_TAIL_CALL</span>;</div><div class="line"><span class="meta">#define NS_FORMAT_FUNCTION(F,A) __attribute__((format(__NSString__, F, A)))</span></div></pre></td></tr></table></figure></p>
<p>语法说明：<code>__attribute__((format(format_type, format_string_index, first_format_argument_index)))
format_type: one of printf, scant, strftime, strfmon or __NSString__</code></p>
<p><strong>声明被修饰的函数必须在重写的时候调用super的方法：<strong>attribute</strong>((objc_requires_super))：NS_REQUIRES_SUPER</strong></p>
<p>在<code>Foundation</code>库的<code>NSObjcRuntime.h</code>中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NS_REQUIRES_SUPER    <span class="comment">// 防止头文件的重复包含和编译。</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_attribute(objc_requires_super)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NS_REQUIRES_SUPER __attribute__((objc_requires_super))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NS_REQUIRES_SUPER</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>比如在自定义的<code>@interface Student: NSObject</code>中声明了:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="name">void</span>)foo NS_REQUIRES_SUPER<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>那么在<code>@interface CollegeStudent: Student</code>的实现文件中，像这样写一个空的<code>-foo</code>函数是会报出警告的：<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)foo <span class="comment">&#123;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">warning: <span class="function"><span class="keyword">Method</span> <span class="title">possibly</span> <span class="title">missing</span> <span class="title">a</span> [<span class="title">super</span> <span class="title">foo</span>] <span class="title">call</span></span></div></pre></td></tr></table></figure></p>
<p><strong>其他更多的attribute使用：</strong></p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/Attributes%20in%20Clang%20%E2%80%94%20Clang%203.8%20documentation.png" alt="Attributes in Clange"></p>
<h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5.小结"></a>5.小结</h3><p>总而言之，当你想给自己写的类、方法、参数添加一些限制条件的时候，<code>__attribute__</code>可以为你提供一种可行的解决方案。</p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="https://blog.twitter.com/2014/attribute-directives-in-objective-c" target="_blank" rel="external">https://blog.twitter.com/2014/attribute-directives-in-objective-c</a></li>
<li><a href="http://releases.llvm.org/3.8.0/tools/clang/docs/AttributeReference.html" target="_blank" rel="external">http://releases.llvm.org/3.8.0/tools/clang/docs/AttributeReference.html</a></li>
<li><a href="http://nshipster.com/__attribute__/" target="_blank" rel="external">http://nshipster.com/__attribute__/</a></li>
<li><a href="http://blog.sunnyxx.com/2016/05/14/clang-attributes/" target="_blank" rel="external">http://blog.sunnyxx.com/2016/05/14/clang-attributes/</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Clang </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Objective-C基础教程（第2版）总结]]></title>
      <url>http://www.calios.gq/2017/02/17/Objective-C%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<ul>
<li>OOP真正的革命性就是它在调用代码中使用间接（indirect），如使用变量、文件和参数等。“没有什么是通过间接解决不了的问题，如果有，就再加一层。”比如黑魔法第二课中提到的<code>#define _CONCAT(A,B)  A ## B</code>的作用。再比如，键值编码（KVC）也是一种间接更改对象状态的方式。</li>
<li>过程式编程以函数为中心，面向对象编程以数据为中心。</li>
<li>类是一种结构，它表示对象的类型；对象是一种结构，它包含值和指向其类的隐藏指针。</li>
<li>在Objective-C中只要看到@符号，你都可以把它看成是C语言的扩展。如：NSLog(@“this is a log: %@“, log);</li>
<li>对象是带有代码的C struct。因此，id实际上是一个指针，指向其中的某个结构。</li>
<li>@interface告诉编译器这个类的对象的数据成员（即对象的C struct应该是什么样子）和它提供的特性。</li>
<li>Objective-C的中缀符（infix notation）。</li>
<li>Objective-C中并没有真正意义上的私有方法，也无法通过标记为私有方法而禁止其他代码调用它。这是Objective-C动态本质的副作用。</li>
</ul>
<blockquote>
<p>这里可以和runtime联系起来。因为即便在编译器编译后，代码也可以在运行时改变类所拥有的属性、或是改变方法调用的实现。这给开发者提供了很多便利，也不可避免地带来一些副作用（side effect）。</p>
</blockquote>
<ul>
<li>在Objective-C中每个方法调用都获得了一个名为self的隐藏参数，它是一个指向接收消息的对象的指针。方法使用self参数查找它们要使用的实例变量。eg: self-&gt;fillColor = c;</li>
<li>由于对象的局部变量特定于该对象的实例，因此称为实例变量，通常简写为ivars。</li>
<li>Objective-C有个极好的特性，你可以把类当做对象来向类发送消息。</li>
</ul>
<blockquote>
<p>这个“极好的特性”，是相对于谁来说的？C？其他语言？？</p>
</blockquote>
<ul>
<li>多态使得来自不同类的对象可以定义共享相同名称的方法。动态类型能使程序直到执行时才确定对象所属的类。动态绑定则能使程序直到执行时才确定要对对象调用的实际方法。而id类型是这三者的基础。</li>
<li>防御式编程。</li>
<li>Cocoa的方法名称如果以get开头，表明我们提供的是一个指针，而指针所指向的空间则是用来存储该方法生成的数据。如<code>NSValue</code>的<code>getValue:</code>方法。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithBytes:&amp;rect objCType:<span class="keyword">@encode</span>(<span class="built_in">CGRect</span>)];</div><div class="line"><span class="built_in">NSMutableArray</span> *arr = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">[arr addObject:value];</div><div class="line"></div><div class="line"><span class="built_in">NSValue</span> *v = arr[<span class="number">0</span>];</div><div class="line">[v getValue:&amp;rect];</div></pre></td></tr></table></figure>
<ul>
<li><code>#import</code>时，带尖括号的语句是用来导入系统头文件的，是只读的；而带引号的语句说明导入的是项目本地的头文件，是可编辑的。</li>
<li>self：<ul>
<li><code>self</code> is a special variable in Objective-C, inside an instance method this variable refers to the receiver(object) of the message that invoked the method, while in a class method <code>self</code> will indicate which class is calling.</li>
<li><code>self</code> refers to the actual object that is executing the current method, it is an invisible argument passed automatically by the runtime environment to your instance methods.</li>
</ul>
</li>
<li>对象的初始化过程：来自NSObject的类方法alloc，为该类（对象？）分配一块足够大的内存，以存放该类的全部实例变量，并将其清零；实例方法init用于获得一个对象并使其运行。</li>
<li>为什么要写成：<code>Car *car = [[Car alloc] init]; 而不是 Car *car = [Car alloc]; [car init];</code>? （关键词：类簇）<ul>
<li>因为初始化方法返回的对象可能与分配的对象不同。如NSNumber、NSString和NSArray这样的类簇的情况。</li>
<li>由于init方法可以接受参数，所以该方法的代码能够检查其接受的参数，并断定返回另一个类的对象可能更合适。</li>
<li>Xcode会检查是否alloc与init是嵌套的，如果不是会给出提示。<code>*** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;*** -objCType only defined for abstract class.  Define -[NSPlaceholderNumber objCType]!’</code></li>
</ul>
</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSNumber *<span class="keyword">boo </span>= [[NSNumber alloc] initWithBool:NO]<span class="comment">;</span></div><div class="line">NSNumber *<span class="keyword">boo1 </span>= [NSNumber alloc]<span class="comment">;</span></div><div class="line">NSNumber *<span class="keyword">boo2 </span>= [<span class="keyword">boo1 </span>initWithBool:NO]<span class="comment">;</span></div><div class="line">NSLog(@<span class="string">"boo: %@ \n boo1: %@ \n boo2: %@"</span>,[<span class="keyword">boo </span>class],[<span class="keyword">boo1 </span>class],[<span class="keyword">boo2 </span>class])<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>这段代码打印的的结果是：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boo: </span>__NSCFBoolean</div><div class="line"><span class="keyword">boo1: </span>NSPlaceholderNumber</div><div class="line"><span class="keyword">boo2: </span>__NSCFBoolean</div></pre></td></tr></table></figure></p>
<p>可见，仅仅分配内存的对象boo1和初始化方法返回的boo2并不相同。</p>
<ul>
<li>通常，接受参数最多的初始化方法最终成为 <strong>指定初始化函数</strong>。</li>
<li>预编译指令<code>@property</code>可以通知编译器：“这个对象具有这个类型的这个名称的这种属性”，还可以传递一些关于property（如<code>readonly</code>和<code>readwrite</code>）和对象的内存管理（<code>retain</code>，<code>assign</code>或<code>copy</code>）的信息；<code>@synthesize</code>预编译指令可以通知编译器生成访问器方法。</li>
<li>有的属性列表文件，特别是首选项文件，是以压缩的二进制格式存储的。通过使用plutil命令：<code>plutil -convert xml1 文件名.plist</code>，可以将这些文件转换成人可以理解的字面形式。</li>
<li>对于KVC，Cocoa会自动装箱和开箱标量值。也就是说，当使用 <code>setValueForKey</code>时，它自动将标量值（int、float和struct）放入<code>NSNumber</code>或<code>NSValue</code>中；当使用<code>-setValueForKey:</code>时，它自动将标量值从这些对象中取出。仅KVC具有这种自动装箱功能，常规方法调用和属性语法不具备该功能。</li>
<li><p><code>valueForKey:</code>在Objective-C运行时中使用元数据打开对象并进入其中查找需要的信息。在C或C++语言中不能执行这种操作。通过使用KVC，没有相关getter方法也能获取对象值，不需要通过对象指针来直接访问实例变量。</p>
<blockquote>
<p>这里体现的就是Objective-C“自省”的特性吧？</p>
</blockquote>
</li>
<li><p>（在console的打印结果中）注意<null>与(null)之间的区别。<null>是一种<code>[NSNull null]</code>对象，而(null)是一个真正的<code>nil</code>值。</null></null></p>
</li>
<li><code>NSPredicate</code>字符串中也可以用<code>%K</code>来指定键路径。如<code>predicate = [NSPredicate predicateWithFormat: @&quot;%K beginswith %@&quot;, @&quot;name&quot;, @&quot;B&quot;];</code>。</li>
<li>谓词机制不进行静类型检查。</li>
<li>在编写谓词字符串时，尽量使用[cd]修饰符。其中，c表示“不区分大小写（case insensitive）”，d表示“不区分发音符号（diacritic insensitive）”，[cd]表示“既不区分大小写，也不区分发音符号”。如：<code>predicate = [NSPredicate predicateWithFormat: @&quot;name BEGINSWITH[cd] &#39;HERB&#39;&quot;];</code>。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Some barriers when using TesseractOCR]]></title>
      <url>http://www.calios.gq/2017/01/11/Some-barriers-when-using-TesseractOCR/</url>
      <content type="html"><![CDATA[<p>1.Install TesseractOCR with CocoaPods.</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">pod</span> <span class="string">'TesseractOCRiOS'</span>, <span class="string">'4.0.0'</span></div></pre></td></tr></table></figure>
<p>2.Download tessdata, generally from Github:<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/tesseract-ocr/</span>tessdata<span class="regexp">/raw/m</span>aster<span class="regexp">/eng.traineddata</span></div></pre></td></tr></table></figure></p>
<p>Then move them to the <code>/usr/local/share/tessdata</code> folder.<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo mv -v eng.traineddata <span class="regexp">/usr/</span>local<span class="regexp">/share/</span>tessdata<span class="regexp">/</span></div></pre></td></tr></table></figure></p>
<p>However, it crashed saying:</p>
<blockquote>
<p>actual_tessdata_num_entries \&lt;= TESSDATA_NUM_ENTRIES:Error:Assert failed:in file ..\ccutil\tessdatamanager.cpp, line 55</p>
</blockquote>
<p>and would never work with the FAQ <a href="https://github.com/tesseract-ocr/tesseract/wiki/FAQ#actual_tessdata_num_entries_-tessdata_num_entrieserrorassert-failedin-file-ccutiltessdatamanagercpp-line-55_" target="_blank" rel="external">here</a> by checking out the right version(for me, it’s 4.0.0) of trained data.</p>
<p>Finally, the issue <a href="https://github.com/gali8/Tesseract-OCR-iOS/issues/299" target="_blank" rel="external">here</a> solved this creepy problem by checking out <a href="https://github.com/tesseract-ocr/tessdata/tree/bf82613055ebc6e63d9e3b438a5c234bfd638c93" target="_blank" rel="external">this version</a> of trained data. This is just such a… boring problem…</p>
<p>Here’s a little sample for how to use it, and, enjoy yourself. :]<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">G8Tesseract *tesseract = [[G8Tesseract alloc] initWithLanguage:@<span class="string">"eng"</span>]<span class="comment">;</span></div><div class="line">                                       tesseract.delegate = weakSelf<span class="comment">;</span></div><div class="line">                                       tesseract.charWhitelist = @<span class="string">"@.()&#123;&#125;/\\!*&amp;#0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="comment">;</span></div><div class="line">                                       tesseract.engineMode = G8OCREngineModeTesseractOnly<span class="comment">;</span></div><div class="line">                                       tesseract.pageSegmentationMode = G8PageSegmentationModeAuto<span class="comment">;</span></div><div class="line">                                       tesseract.image = [image g8_blackAndWhite]<span class="comment">;</span></div><div class="line">                                       tesseract.maximumRecognitionTime = <span class="number">2</span>.<span class="number">0</span><span class="comment">;</span></div><div class="line">                                       [tesseract recognize]<span class="comment">;</span></div><div class="line"></div><div class="line">                                       <span class="keyword">dispatch_async(dispatch_get_main_queue(), </span>^&#123;</div><div class="line">                                           weakSelf.codeTextView<span class="meta">.text</span> = [[tesseract recognizedText] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]<span class="comment">;</span></div><div class="line">                                           weakSelf.codeImageView.image = image<span class="comment">;</span></div><div class="line">                                       &#125;)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><strong>Updated at 170119</strong></p>
<p>When compiled with terminal, bitcode should be disabled in podfile.</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">post_install <span class="built_in">do</span> |<span class="type">installer</span>|</div><div class="line">    <span class="type">installer</span>.pods_project.targets.each <span class="built_in">do</span> |<span class="type">target</span>|</div><div class="line">        <span class="type">target</span>.build_configurations.each <span class="built_in">do</span> |<span class="type">config</span>|</div><div class="line">            <span class="type">config</span>.build_settings['ENABLE_BITCODE'] = 'false'</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="https://www.raywenderlich.com/93276/implementing-tesseract-ocr-ios" target="_blank" rel="external">https://www.raywenderlich.com/93276/implementing-tesseract-ocr-ios</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> TesseractOCR </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Some methods for DownloadManager]]></title>
      <url>http://www.calios.gq/2017/01/10/%E4%B8%8B%E8%BD%BD%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>随着苹果提供API的不断完善，实现下载管理的方法也发生了一些变化。从使用更方便的第三方库，到完全可以用自带API实现毫无压力。且将各种方法记录于此，权当备查。</p>
<p>首先定义一下下载管理的范围：</p>
<ul>
<li>可以同时下载多个文件；</li>
<li>对于单个文件而已，可以下载/暂定/恢复下载/取消下载/显示下载进度；</li>
<li>可以控制同时下载的最大数量。</li>
</ul>
<p>接下来，从最早采用的实现方法说起。</p>
<ol>
<li>NSOperationQueue</li>
</ol>
<ul>
<li>创建继承自<code>NSOperation</code>的自定义类；</li>
<li>将下载需要的网络请求（如<code>NSURLSessionDownloadTask</code>）作为其中的一个属性；</li>
</ul>
<ol>
<li>dispatch_queue_create()</li>
<li>NSURLSession</li>
</ol>
<p><strong>核心：All the other APIs -> model -> UI</strong></p>
<p><strong>这里附上苹果开发者论坛中，一位开发者与苹果开发者的关于<code>NSURLSession</code>的问答（2015年7月）。</strong></p>
<p>我需要在我的app中上传200张图片，<br>1.我该使用<code>NSURLSessionUploadTask</code>还是其他什么类？<br>答：<code>NSURLSessionUploadTask</code>.<br>2.为了让这些upload保持在background，我该做些什么？<br>答：把所有的upload扔进一个<code>NSURLSession</code>的background session中。<br>3.当app没有在运行的时候，我该做些什么？（没有明确回答）<br>4.针对以上3点，我该在<code>NSURLSession</code>外面包一层<code>NSOperation</code>以便于使用<code>NSOperationQueue</code>，还是说，iOS会有它自己的内部queue来正确处理<code>NSURLSession</code>对象们？<br>答：这个很难说。一般来说，我是<code>NSOperation</code>的死忠粉，但由于background session和app生命周期的交互方式，用<code>NSOperation</code>来解决<code>NSURLSession</code>的background session的问题却有些棘手。<br>具体来说，通常的流程是这样的：</p>
<p>1.你的app开始一堆后台传输；<br>2.用户把它移到后台；<br>3.系统暂停了你的app；<br>4.传输在后台继续运行；<br>5.系统终止了你的app；<br>6.传输继续在后台运行；<br>7.传输结束；<br>8.系统重新启动你的app。</p>
<p>如果你使用<code>NSOperation</code>来追踪每个传输，当你在第8步重新启动app时，就需要重新创建那一堆的operation。当然，在第8步是需要重新创建<em>一些东西</em>，只是重新创建<code>NSOperation</code>要比重新创建其他不那么复杂的对象棘手些。</p>
<p>5.你的意思是说，如果我一次性把200个<code>NSURLSessionUploadTask</code>的实例添加到同一个background session配置的<code>NSURLSession</code>中，iOS会把它们都正确处理好？<br>答：是的。<code>NSURLSession</code>后台下载系统会很乐意处理几百个请求的。它在内部将它们串联起来，所以在任何时候只有少量的请求是在执行中。<br>6.如果是的话，对于task的数量是否有所限制？<br>答：没有硬性规定，但我通常建议不要做的太过分。在我看来，几百个请求是可以接受的，几千个请求就有点勉强，上万的请求就有点2。。我通常建议，如果你不得不处理上千个单独的item，你可以把它们打包起来，然后进行一个可恢复的传输。然而，有一些问题：</p>
<ul>
<li>做这种事情需要严谨的服务器端的支持。<ul>
<li><code>NSURLSession</code>的background session自动处理下载的断点续传。但对于上传并非如此。如果你需要上传的断点续传，你就得涉及到每次的连接数据（这里原文用的是”tears”，不太理解。。）。考虑到这个原因，把上传文件打包成合理大小的整块文件就很有必要，这样上传就会产生一打的进度，即使有可能连接失败，也好过你的app重新恢复上传。</li>
</ul>
</li>
</ul>
<p><strong>另外，对于如何知道当前并行的下载数，<code>MZDownloadManager</code>的作者也在这个issue下给出了<a href="https://github.com/mzeeshanid/MZDownloadManager/issues/29" target="_blank" rel="external">答案</a>。简而言之，就是通过筛选存储着model的array，得到状态为“下载中”的model的数量。</strong> </p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="https://forums.developer.apple.com/thread/10239" target="_blank" rel="external">https://forums.developer.apple.com/thread/10239</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Download </tag>
            
            <tag> NSURLSession </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Background fetch]]></title>
      <url>http://www.calios.gq/2017/01/10/Background-fetch/</url>
      <content type="html"><![CDATA[<p>如下是iOS7开始支持的background fetch在下载管理中的应用。</p>
<p>1.Target -> Capabilities -> Background Modes，打开开关，勾选<code>Background fetch</code>一项。<br>2.在负责下载管理的<code>CDDownloadManager</code>，或是<code>AppDelegate</code>中，添加<code>@property (nonatomic, copy) void (^savedCompletionHandler)();</code>属性，用于临时存储<code>application:handleEventsForBackgroundURLSession:completionHandler:</code>传入的block（详细说明见后文）。<br>3.在<code>AppDelegate.m</code>中添加如下方法：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>application:<span class="params">(UIApplication *)</span>application handleEventsForBackgroundURLSession:<span class="params">(NSString *)</span>identifier completionHandler:<span class="params">(void (^)</span><span class="params">()</span>)completionHandler</div><div class="line">&#123;</div><div class="line">    NSLog<span class="params">(@<span class="string">"%s"</span>,__FUNCTION__)</span>;</div><div class="line"></div><div class="line">    [CDDownloadManager sharedManager].savedCompletionHandler = completionHandler;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在iOS中，当后台传输结束或是需要认证时，如果你的app不是正在运行的状态，它就会自动在后来重新启动，然后app的<code>UIApplicationDelegate</code> 会收到<code>application:handleEventsForBackgroundURLSession:completionHandler:</code>消息。这个函数中包括导致app启动的session的identifier。你的app应该在用相同的identifier创建后台configuration对象之前，把这个completion handler存下来。新创建的session会自动和正在执行的后台活动关联起来。</p>
<p>4.在<code>CDDownloadManager.m</code>，或是其他创建了<code>NSURLSession</code>实例的类中，实现如下方法：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)URLSessionDidFinishEventsForBackgroundURLSession:(<span class="built_in">NSURLSession</span> *)session</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, __FUNCTION__);</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.session getTasksWithCompletionHandler:^(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLSessionDataTask</span> *&gt; * _Nonnull dataTasks, <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLSessionUploadTask</span> *&gt; * _Nonnull uploadTasks, <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURLSessionDownloadTask</span> *&gt; * _Nonnull downloadTasks) &#123;</div><div class="line">        <span class="keyword">if</span> (downloadTasks.count == <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// A.</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">self</span>.savedCompletionHandler != <span class="literal">nil</span>) &#123;</div><div class="line">                <span class="keyword">void</span>(^completionHandler)() = <span class="keyword">self</span>.savedCompletionHandler;</div><div class="line"></div><div class="line">                <span class="keyword">self</span>.savedCompletionHandler = <span class="literal">nil</span>;</div><div class="line"></div><div class="line">                <span class="comment">// B.</span></div><div class="line">                [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</div><div class="line">                    completionHandler();</div><div class="line">                    <span class="comment">// C.</span></div><div class="line">                    UNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];</div><div class="line">                    content.title = <span class="string">@"Calios said:"</span>;</div><div class="line">                    content.body = <span class="string">@"Hi, what about enjoy Swift in 2017?"</span>;</div><div class="line">                    content.sound = [UNNotificationSound defaultSound];</div><div class="line">                    content.badge = @([[<span class="built_in">UIApplication</span> sharedApplication] applicationIconBadgeNumber] + <span class="number">1</span>);</div><div class="line"></div><div class="line">                    UNTimeIntervalNotificationTrigger *trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:<span class="number">5.</span>f repeats:<span class="literal">NO</span>];</div><div class="line">                    UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:<span class="string">@"FiveSecond"</span> content:content trigger:trigger];</div><div class="line"></div><div class="line">                    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</div><div class="line">                    [center addNotificationRequest:request withCompletionHandler:^(<span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">                        <span class="keyword">if</span> (!error) &#123;</div><div class="line">                            <span class="built_in">NSLog</span>(<span class="string">@"add notification request succeed!"</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;];</div><div class="line">                &#125;];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应上段代码的几点说明：<br>A. 这里的<code>self.savedCompletionHandler</code>就是上面在<code>AppDelegate.m</code>中被赋值的家伙。<br>B. 由于提供的completion handler是<code>UIKIt</code>的一部分，所以一定要在主线程中调用。<br>C. 这里的操作是在所有下载完成后弹出一个本地通知，并在console显示一行log。可以根据需求自行更改。<strong>注：</strong>iOS 10之后，本地通知和远程通知相关的接口都移到了<code>UserNotification</code>中，API也有很多变化，这里不再赘述，更多详情可参见喵神的<a href="https://onevcat.com/2016/08/notification/" target="_blank" rel="external">这篇博客</a>。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Background </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Block学习笔记]]></title>
      <url>http://www.calios.gq/2017/01/10/Block%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="1-Block声明"><a href="#1-Block声明" class="headerlink" title="1.Block声明"></a>1.Block声明</h3><p>编译器和运行时让block中引用的所有变量都被保存下来，以备在block的所有副本的生命周期中使用。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)block1</div><div class="line">&#123;</div><div class="line">    <span class="built_in">int</span> (^myTest)(<span class="built_in">int</span>) = ^(<span class="built_in">int</span> <span class="built_in">num</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">num</span> * <span class="built_in">num</span>;</div><div class="line">    &#125;;</div><div class="line">    NSLog(@<span class="string">"double: %d"</span>,myTest(<span class="number">9</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-在block中改变的外部变量，需要用-block声明"><a href="#2-在block中改变的外部变量，需要用-block声明" class="headerlink" title="2.在block中改变的外部变量，需要用__block声明"></a>2.在block中改变的外部变量，需要用<code>__block</code>声明</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)block2</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSArray</span> *stringsArray = @[ <span class="string">@"string 1"</span>,</div><div class="line">                               <span class="string">@"String 21"</span>, <span class="comment">// &lt;-</span></div><div class="line">                               <span class="string">@"string 12"</span>,</div><div class="line">                               <span class="string">@"String 11"</span>,</div><div class="line">                               <span class="string">@"Strîng 21"</span>, <span class="comment">// &lt;-</span></div><div class="line">                               <span class="string">@"Striñg 21"</span>, <span class="comment">// &lt;-</span></div><div class="line">                               <span class="string">@"String 02"</span> ];</div><div class="line"></div><div class="line">    <span class="built_in">NSLocale</span> *currentLocale = [<span class="built_in">NSLocale</span> currentLocale];</div><div class="line">    __block <span class="built_in">NSUInteger</span> orderedSameCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="built_in">NSArray</span> *diacriticInsensitiveSortArray = [stringsArray sortedArrayUsingComparator:^(<span class="keyword">id</span> string1, <span class="keyword">id</span> string2) &#123;</div><div class="line"></div><div class="line">        <span class="built_in">NSRange</span> string1Range = <span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [string1 length]);</div><div class="line">        <span class="built_in">NSComparisonResult</span> comparisonResult = [string1 compare:string2 options:<span class="built_in">NSDiacriticInsensitiveSearch</span> range:string1Range locale:currentLocale];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (comparisonResult == <span class="built_in">NSOrderedSame</span>) &#123;</div><div class="line">            orderedSameCount++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> comparisonResult;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"diacriticInsensitiveSortArray: %@"</span>, diacriticInsensitiveSortArray);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"orderedSameCount: %lu"</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)orderedSameCount);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-block支持不定个数的参数（variadic-arguments）"><a href="#3-block支持不定个数的参数（variadic-arguments）" class="headerlink" title="3.block支持不定个数的参数（variadic arguments）"></a>3.block支持不定个数的参数（variadic arguments）</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)block3</div><div class="line">&#123;</div><div class="line">    <span class="keyword">void</span> (^variadicParams)(<span class="built_in">NSString</span>*, ...) = ^(<span class="built_in">NSString</span> *format, ...) &#123;</div><div class="line">        <span class="keyword">id</span> eachObject;</div><div class="line">        va_list argumentList;   <span class="comment">// va_list是指向变量列表的指针</span></div><div class="line">        <span class="keyword">if</span> (format) &#123;   <span class="comment">// 第一个参数并不是变量列表中的一个</span></div><div class="line">            <span class="built_in">NSMutableArray</span> *tmpArray = [<span class="built_in">NSMutableArray</span> arrayWithObject:format];</div><div class="line">            va_start(argumentList, format); <span class="comment">// 初始化va_list，并让它指向传入的参数（format）后面紧跟的第一个参数</span></div><div class="line">            <span class="keyword">while</span> ((eachObject = va_arg(argumentList, <span class="keyword">id</span>)) != <span class="literal">nil</span>)&#123;  <span class="comment">//   va_arg，取出列表中的下一个参数。必须指明参数的类型（这样va_arg才能知道该给它分配多少空间）</span></div><div class="line">                [tmpArray addObject:eachObject];    <span class="comment">// 不会把任何nil对象添加到tmpArray中</span></div><div class="line">            &#125;</div><div class="line">            va_end(argumentList);   <span class="comment">// 释放va_list这个数据结构所持有的任何内存</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"variadic params: %@"</span>,tmpArray);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    variadicParams(<span class="string">@"11"</span>,<span class="string">@"22"</span>,<span class="string">@"333"</span>,<span class="string">@"666"</span>,<span class="literal">nil</span>);  <span class="comment">//   Calios:这里最后一个参数必须传nil，args必须有最后一个结尾，否则是无法判断的。But，why？</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-几种类型的变量与block的交互"><a href="#4-几种类型的变量与block的交互" class="headerlink" title="4.几种类型的变量与block的交互"></a>4.几种类型的变量与block的交互</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSInteger</span> CounterGlobal;    <span class="comment">//   Calios:It throws out error for not finding CounterGlobal if extern is added. But, why?</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> CounterStatic;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)block4</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSInteger</span> localCounter = <span class="number">42</span>;</div><div class="line">    __block <span class="keyword">char</span> localCharacter;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> (^aBlock)(<span class="keyword">void</span>) = ^(<span class="keyword">void</span>) &#123;</div><div class="line">        ++CounterGlobal;</div><div class="line">        ++CounterStatic;</div><div class="line">        CounterGlobal = localCounter; <span class="comment">// localCounter fixed at block creation</span></div><div class="line">        localCharacter = <span class="string">'a'</span>; <span class="comment">// sets localCharacter in enclosing scope</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    ++localCounter; <span class="comment">// unseen by the block</span></div><div class="line">    localCharacter = <span class="string">'b'</span>;</div><div class="line"></div><div class="line">    aBlock(); <span class="comment">// execute the block</span></div><div class="line">    <span class="comment">// localCharacter now 'a'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-当block被复制的时候，它会对block中使用的对象变量产生强引用。"><a href="#5-当block被复制的时候，它会对block中使用的对象变量产生强引用。" class="headerlink" title="5.当block被复制的时候，它会对block中使用的对象变量产生强引用。"></a>5.当block被复制的时候，它会对block中使用的对象变量产生强引用。</h3><p>如果你在一个方法的实现中使用了block：</p>
<ul>
<li>如果你使用了实例变量的引用，那么就对 <strong>self</strong> 产生了强引用；</li>
<li>如果你使用了实例变量的值，那么就对 <strong>该变量</strong> 产生了强引用。<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">	- (<span class="literal">void</span>)block5</div><div class="line">	&#123;</div><div class="line"><span class="literal">void</span> (^doSomethingWithObject)(id) = ^(id <span class="keyword">var</span>)&#123;</div><div class="line">	NSLog(@<span class="string">"do something: %@"</span>,<span class="keyword">var</span>);</div><div class="line">&#125;;</div><div class="line">dispatch<span class="string">\_queue\_t</span> queue = dispatch<span class="string">\_queue\_create("com.calios.BlockSample.someQueue",</span> DISPATCH<span class="string">\_QUEUE\_SERIAL);</span></div><div class="line">dispatch<span class="string">\_async(queue,</span> ^&#123;    <span class="regexp">// dispatch\_async()是将block拷贝到指定的queue中，而复制操作（Block\_copy()）会将block移动到堆上。</span></div><div class="line">	// instanceVariable <span class="keyword">is</span> used <span class="keyword">by</span> reference, a strong reference <span class="keyword">is</span> made <span class="keyword">to</span> self</div><div class="line">	doSomethingWithObject(instanceVariable);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">id localVariable = instanceVariable;</div><div class="line">dispatch<span class="string">\_async(queue,</span> ^&#123;</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 localVariable is used by value, a strong reference is made to localVariable</div><div class="line">	 (and not to self).</div><div class="line">	 */</div><div class="line">	doSomethingWithObject(localVariable);</div><div class="line">&#125;);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6-应该避免的做法"><a href="#6-应该避免的做法" class="headerlink" title="6.应该避免的做法"></a>6.应该避免的做法</h3><p>block字面量（即^{ … }）是代表这个block的局部栈数据结构的地址。因此，局部栈数据结构的作用于就是仅限于大括号中的语句，所以你应 <strong>避免</strong> 向下面这样使用block。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)block6</div><div class="line">&#123;</div><div class="line">    dontDoThis();</div><div class="line">    dontDoThisEither();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dontDoThis</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span> (^blockArray[<span class="number">3</span>])(<span class="keyword">void</span>);  <span class="comment">// an array of 3 block references</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</div><div class="line">        blockArray[i] = ^&#123; <span class="built_in">printf</span>(<span class="string">"hello, %d\n"</span>, i); &#125;;</div><div class="line">        <span class="comment">// WRONG: The block literal scope is the "for" loop.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dontDoThisEither</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">void</span> (^block)(<span class="keyword">void</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = arc4random() % <span class="number">1024</span>;</div><div class="line">    <span class="keyword">if</span> (i &gt; <span class="number">1000</span>) &#123;</div><div class="line">        block = ^&#123; <span class="built_in">printf</span>(<span class="string">"got i at: %d\n"</span>, i); &#125;;</div><div class="line">        <span class="comment">// WRONG: The block literal scope is the "then" clause.</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Block </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写在2017年初]]></title>
      <url>http://www.calios.gq/2017/01/10/%E5%86%99%E5%9C%A82017%E5%B9%B4%E5%88%9D/</url>
      <content type="html"><![CDATA[<p>在本地的Homebrew被我搞挂掉之后，博客休眠了两个多月。本地的草稿箱一直增加，online的内容一直没变化。实在不能忍了。</p>
<p>终于在2017年的第十天被我修理好了。继续第三年的blog之旅。</p>
<p><strong>但求把知识变成能力；</strong><br><strong>但求把枯涩的知识变成丰盈的语言；</strong><br><strong>但求我心依旧。</strong></p>
<p>—— Calios<br>2017.01.10</p>
]]></content>
      
        
        <tags>
            
            <tag> 2017 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅析自定义UINavigationBar返回按钮（一）]]></title>
      <url>http://www.calios.gq/2016/10/28/%E6%B5%85%E6%9E%90%E8%87%AA%E5%AE%9A%E4%B9%89UINavigationBar%E8%BF%94%E5%9B%9E%E6%8C%89%E9%92%AE%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/navbar.png" alt="" title="自定义navigationBar返回按钮"></p>
<p>这里主要有两个关键点：一是把原有的上一层的title去掉，二是把返回按钮的indicator图片换成自定义的。</p>
<p>对于第一点，解决办法是：</p>
<pre><code>[[UIBarButtonItem appearance] setBackButtonTitlePositionAdjustment:UIOffsetMake(0, -60) forBarMetrics:UIBarMetricsDefault];
</code></pre><p>对于第二点，有两个解决办法：</p>
<pre><code>// Solution 1:
UIImage *img = [UIImage imageNamed:@&quot;itm_back&quot;];
[UINavigationBar appearance].backIndicatorImage = img;
[UINavigationBar appearance].backIndicatorTransitionMaskImage = img;

// Solution 2:
[[UIBarButtonItem appearance] setBackButtonBackgroundImage:[img resizableImageWithCapInsets:UIEdgeInsetsMake(0, img.size.width - 1, 0, 0)] forState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
</code></pre><p>对于第一个解决办法，需要注意的是，如果是自定义的back indicator image，<code>backIndicatorImage</code>和<code>backIndicatorTransitionMaskImage</code>必须成对出现，<a href="https://developer.apple.com/reference/uikit/uinavigationbar/1624938-backindicatortransitionmaskimage" target="_blank" rel="external">同时设置</a>。</p>
<p>对于第二个解决办法，需要注意的是，如果直接把<code>img</code>传进去，就会发现，图片被拉长了，变成了一柄剑。。。</p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/navBar-sword.png" alt=""></p>
<p>而在<code>-setBackButtonBackgroundImage: forState: barMetrics</code>的api中，特意添加了注释提醒开发者：<code>backgroundImage must be a resizable image for good results.</code></p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/nav-showFrame.png" alt=""></p>
<p>这里我的理解是，navigation bar返回按钮的图片+文字的placeholder有固定尺寸，当图片不够填充满这个区域的时候，会自动拉伸，所以注释中要求开发者传入一个可调整大小的图片作为参数。</p>
<p>而当我们调用<code>resizableImageWithCapInsets:</code>方法，并传入capInsets时，相当于锁定了cap insets的部分，让其余部分进行拉伸。在上面的代码中，设置capInsets为<code>UIEdgeInsetsMake(0, img.size.width, 0, 0)</code>，相当于保证原图片宽度范围内的图片不被拉伸，也就保证了原图片的显示效果。当然，调用<code>resizableImageWithCapInsets:</code>方法，<a href="https://developer.apple.com/reference/uikit/uiimage/1624102-resizableimagewithcapinsets" target="_blank" rel="external">实际上是返回了一张新图片，原有的图片是无法触及的</a>。</p>
<p>可以通过下面面包片模具的🌰来理解这个方法（嗯，吃货的思路就是这么独特。。～_～ ）：</p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/bread.jpeg" alt=""></p>
<p>蓝色框范围内是原面包片（即原图片）；蓝色框和绿色框之间的面包边儿就是你设定的capInsets，这取决于你使用什么样的模具；而绿色框范围内是你可以自由发挥的部分，里面夹猕猴桃香蕉片随你（即可拉伸范围。。嗯，对于面包片是纵向的伸展）。</p>
<hr>
<p>以下引自苹果官方文档，列在此处，备查。</p>
<blockquote>
<p>从iOS5.0及之后，可以通过以下（自定义bar样式）列举的方法来自定义UINavigationBar的样式。你可以用<code>[UINavigationBar appearance]</code>来自定义所有UINavigationBar的样式，也可以只改变单独的一个。</p>
<p>在iOS 7中，UINavigationBar的<code>tintColor</code>会影响返回指示按钮的图片、按钮的标题和按钮的图片。<code>barTintColor</code>会影响bar本身的颜色。另外，navigation bar默认是半透明的。开关半透明的设置不会影响按钮，因为它们是没有背景的。</p>
<p>自定义bar样式：</p>
<ul>
<li><code>backIndicatorImage</code>：返回按钮边上的图片</li>
<li><code>backIndicatorTransitionMaskImage</code>：在push和pop过程中作为内容的蒙版的图片（@_@）</li>
<li><code>titleVerticalPositionAdjustmentForBarMetrics:</code>：对给定的横屏或竖屏的bar调整title的垂直方向的位置偏移。</li>
<li><code>titleTextAttributes</code>：bar的title的各种显示属性，如字体、颜色、阴影等。</li>
</ul>
</blockquote>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="https://developer.apple.com/reference/uikit/uinavigationbar" target="_blank" rel="external">https://developer.apple.com/reference/uikit/uinavigationbar</a></li>
<li><a href="https://developer.apple.com/reference/uikit/uibarbuttonitem?language=objc" target="_blank" rel="external">https://developer.apple.com/reference/uikit/uibarbuttonitem?language=objc</a></li>
<li><a href="http://stackoverflow.com/a/20986544/1594792" target="_blank" rel="external">http://stackoverflow.com/a/20986544/1594792</a></li>
<li><a href="http://stackoverflow.com/a/29937730/1594792" target="_blank" rel="external">http://stackoverflow.com/a/29937730/1594792</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何更新Mac中自带的Vim]]></title>
      <url>http://www.calios.gq/2016/10/18/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0Mac%E4%B8%AD%E8%87%AA%E5%B8%A6%E7%9A%84Vim/</url>
      <content type="html"><![CDATA[<p>前几天翻卖桃君的公众号，温故了一下Vim 8.0的种种我目前也用不上的特性，竟是兴奋了一会儿，接着就开始考虑怎么把本机的Vim升级成8.0了。</p>
<p>根据SOF上的一个回答，步骤如下：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ # Create the directories you need</div><div class="line">$ sudo <span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/local/bin</div><div class="line">$ # Download, compile, <span class="built_in">and</span> install the latest Vim</div><div class="line">$ <span class="keyword">cd</span> ~</div><div class="line">$ hg clone http<span class="variable">s:</span>//bitbucket.org/<span class="keyword">vim</span>-mirror/<span class="keyword">vim</span> <span class="built_in">or</span> git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/<span class="keyword">vim</span>/<span class="keyword">vim</span>.git</div><div class="line">$</div><div class="line">$ <span class="keyword">cd</span> <span class="keyword">vim</span></div><div class="line">$ ./configure --prefix=/<span class="keyword">opt</span>/local</div><div class="line">$ <span class="keyword">make</span></div><div class="line">$ sudo <span class="keyword">make</span> install</div><div class="line">$ # Add the binary <span class="keyword">to</span> your path, ahead of /usr/bin</div><div class="line">$ <span class="keyword">echo</span> <span class="string">'PATH=/opt/local/bin:$PATH'</span> &gt;&gt; ~/.bash_profile</div><div class="line">$ # Reload bash_profile <span class="keyword">so</span> the <span class="keyword">changes</span> take effect in this window</div><div class="line">$ <span class="keyword">source</span> ~/.bash_profile</div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong></p>
<p><code>/usr/bin</code>路径下的文件，除非有明确的理由，否则不要改动。一旦操作失误，无法回退。所以，谨慎为妙。</p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="http://stackoverflow.com/a/7211910/1594792" target="_blank" rel="external">http://stackoverflow.com/a/7211910/1594792</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Terminal </tag>
            
            <tag> Vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】Workspace & Project & Target & Scheme 的区别]]></title>
      <url>http://www.calios.gq/2016/09/03/%E3%80%90%E8%AF%91%E3%80%91Workspace-Project-Target-Scheme-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>来自<a href="http://stackoverflow.com/users/916299/james-webster" title="http://stackoverflow.com/users/916299/james-webster" target="_blank" rel="external">James Webster</a>的回答：</p>
<ul>
<li><strong>Workspace:</strong> 包含一个或多个<code>project</code>，这些<code>project</code>通常是相互关联的。</li>
<li><strong>Project:</strong> 包括代码和资源等等。（你会熟悉这些的。）</li>
<li><strong>Target:</strong> 每个<code>project</code>都有一个或多个<code>target</code>。<ul>
<li>每个target都定义了该<code>project</code>的 build setting列表。</li>
<li>每个target还定义了在build时需要引用或使用的类、资源、自定义脚本的列表。</li>
<li>Target通常用于同一个project的不同发布版本。<ul>
<li>比如，我的项目有两个target，一个通用构建和一个官方构建，其中后者包含额外测试功能，可能还包含几种背景音乐轨道，还有一个切换轨道的按钮。</li>
<li>你应该已经习惯于向默认的target中添加类和资源了。</li>
<li>你可以挑选哪些类／资源被添加到哪个target中。<ul>
<li>在我的例子中，我有一个叫“DebugHandler”的类要添加到官方构建中。</li>
</ul>
</li>
<li>如果你添加测试，就需要添加一个新的target了。</li>
</ul>
</li>
</ul>
</li>
<li><strong>Scheme: </strong> Scheme定义了当你按下“Build”，“Test”，“Profile”的时候会发生什么。<ul>
<li>通常情况下，每个target包括至少一个scheme。</li>
<li>你可以为你的target自动创建scheme，方法是在 Scheme > Manage Schemes，点“Autocreate Schemes Now”。</li>
</ul>
</li>
</ul>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="http://stackoverflow.com/a/20637892/1594792" target="_blank" rel="external">http://stackoverflow.com/a/20637892/1594792</a></li>
<li><a href="http://www.teratotech.com/blog/xcode-7-steps-to-easily-switch-between-multiple-environments/" target="_blank" rel="external">http://www.teratotech.com/blog/xcode-7-steps-to-easily-switch-between-multiple-environments/</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Xcode </tag>
            
            <tag> 译言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[某HR项目iOS端总结]]></title>
      <url>http://www.calios.gq/2016/08/19/%E6%9F%90HR%E9%A1%B9%E7%9B%AEiOS%E7%AB%AF%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="1-产品设计"><a href="#1-产品设计" class="headerlink" title="1.产品设计"></a>1.产品设计</h3><ul>
<li>及时更新RP图。</li>
<li>对于iOS和Android差异化不大的页面，可以使用一套RP图。</li>
<li>保证对页面逻辑的详细说明。</li>
<li>对于特殊状态（如筛选、搜索等）的说明／图解要清晰。</li>
</ul>
<h3 id="2-接口文档部分"><a href="#2-接口文档部分" class="headerlink" title="2.接口文档部分"></a>2.接口文档部分</h3><h5 id="2-1-文档编写的注意事项："><a href="#2-1-文档编写的注意事项：" class="headerlink" title="2.1 文档编写的注意事项："></a>2.1 文档编写的注意事项：</h5><ul>
<li>对于所有接口都通用的参数或JSON数据格式，可以添加公共设置的部分，集中说明。 </li>
<li>请求数据的参数，要说明哪些是必须的，哪些是可选的，可选的默认值是什么。 </li>
<li>说清请求数据的方式是GET还是POST。 </li>
<li>命名要清晰，对于<strong>名词</strong>命名的参数，区分清楚<code>xxId</code>和<code>xxTitle</code>，而不是<code>xx</code>。 </li>
<li>标记类型、状态类型的文字，与其移动端和服务器各自手动维护一组枚举值，不如传输<strong>文字本身</strong>。 </li>
<li>请求参数和返回参数中，特殊类型的数据要说明。如日期的格式是<code>yyyy-MM-dd</code>、<code>yyyy/MM/dd</code>还是<code>yyyy.MM</code>。 </li>
<li>无需将userId/username传给服务器时，坚决不传，避免服务器端对于userId/username的误用。</li>
<li>可以将“凡是以<code>xxId</code>命名的字段一定为表的主键”这样的规则写在文档开始的公共说明中。</li>
<li>明确可选参数对应值为空时，是传“key:”” ”还是直接不传参数的key。</li>
<li>文档中要有详实的例子，还要注意按照接口调用的时序组织文档。</li>
</ul>
<h5 id="2-2-工作流程："><a href="#2-2-工作流程：" class="headerlink" title="2.2 工作流程："></a>2.2 工作流程：</h5><ul>
<li>现在的流程：<br>  pc端数据库设计与开发 》移动端产品设计 》<strong>移动端开发 》移动端接口设计</strong> 》pc端接口开发 </li>
</ul>
<ul>
<li><p>可优化为：<br>  pc端数据库设计与开发 》移动端产品设计 》<strong>移动端接口设计 》移动端开发</strong> 》pc端接口开发 </p>
</li>
<li><p>优化后的好处：</p>
<ul>
<li>避免移动端Model构建时，逐个比对字段名称的问题。</li>
<li>减少pc端依照“移动端写的接口文档”各种修改字段名的问题。</li>
<li>面向接口进行代码设计，可以在项目初期就对各功能模块有整体认识。</li>
</ul>
</li>
</ul>
<h5 id="2-3-编写工具："><a href="#2-3-编写工具：" class="headerlink" title="2.3 编写工具："></a>2.3 编写工具：</h5><ul>
<li><p>现在的工具：<br>  word + SVN(?)</p>
</li>
<li><p>存在的问题：</p>
<ul>
<li>各种和文档相关的样式、乱码、排版的问题。</li>
<li>无法即时调试，需自行粘贴到postman去测试。</li>
</ul>
</li>
<li><p>可优化为：<br>  － swagger：<a href="http://editor.swagger.io/#/" target="_blank" rel="external">http://editor.swagger.io/#/</a><br>  － RAP（from Alibaba）： </p>
<ul>
<li>Github：<a href="https://github.com/thx/RAP" target="_blank" rel="external">https://github.com/thx/RAP </a><ul>
<li>说明：<a href="http://div.io/topic/642" target="_blank" rel="external">http://div.io/topic/642</a> </li>
<li>例子：<a href="http://rap.taobao.org/workspace/myWorkspace.do?projectId=5359#37446" target="_blank" rel="external">http://rap.taobao.org/workspace/myWorkspace.do?projectId=5359#37446</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="2-4-接口设计要考虑的问题（供参考）："><a href="#2-4-接口设计要考虑的问题（供参考）：" class="headerlink" title="2.4 接口设计要考虑的问题（供参考）："></a>2.4 接口设计要考虑的问题（供参考）：</h5><ul>
<li><a href="http://ismartstudio.com/mobile-app-server-side-api-should-be-designed-to-take-into-account-problems.html" target="_blank" rel="external">http://ismartstudio.com/mobile-app-server-side-api-should-be-designed-to-take-into-account-problems.html </a></li>
<li><a href="https://segmentfault.com/q/1010000002523945" title="https://segmentfault.com/q/1010000002523945" target="_blank" rel="external">https://segmentfault.com/q/1010000002523945</a> </li>
</ul>
<h3 id="3-移动端开发"><a href="#3-移动端开发" class="headerlink" title="3.移动端开发"></a>3.移动端开发</h3><h5 id="3-1-BugList分析"><a href="#3-1-BugList分析" class="headerlink" title="3.1 BugList分析"></a>3.1 BugList分析</h5><p>BugList（iOS端）汇总图表及明细<br>（见<code>XX HR iOS端BugList汇总及明细.xlsx</code>）</p>
<p>Bug数量最多的类型前三类（单位：个）：</p>
<ul>
<li>逻辑缺失（23）</li>
<li>和pc端对接问题（19）</li>
<li>未与RP图对照（14）</li>
</ul>
<p>逐个分析一下：</p>
<h5 id="3-1-1-逻辑缺失"><a href="#3-1-1-逻辑缺失" class="headerlink" title="3.1.1 逻辑缺失"></a>3.1.1 逻辑缺失</h5><p>共计23个逻辑缺失的Bug中，比较突出的问题有：</p>
<ul>
<li>数据更新后没有自动刷新的问题（6个）  </li>
<li>页面或数据状态的保存或传递问题（5个）；</li>
<li>网络请求时，可选参数key为空的处理（2个）。</li>
</ul>
<p><strong>解决建议</strong></p>
<ul>
<li>对于数据有可能更新的列表，要添加自动刷新功能；</li>
<li>请求数据时，可以不传的参数key需要单独处理。</li>
</ul>
<h5 id="3-1-2-和pc端对接问题"><a href="#3-1-2-和pc端对接问题" class="headerlink" title="3.1.2 和pc端对接问题"></a>3.1.2 和pc端对接问题</h5><p>和pc端对接的相关Bug中，问题主要集中在：</p>
<ul>
<li>移动端使用字段错误，导致展示错误信息（6个）；</li>
<li>不同接口的<code>BaseURL</code>不相同（后期已统一）（3个）；</li>
<li>移动端使用的校验方式与pc端不一致（3个）；</li>
<li>空值的传输和处理（3个）：当某字段的值为空时，需传给服务器key和空值。</li>
</ul>
<p><strong>解决建议</strong></p>
<ul>
<li>增强对接口文档的统一理解；</li>
<li>pc端和移动端可以在各自的接口开发时约定好：<ul>
<li>所有接口的<code>BaseURL</code>；</li>
<li>除了<code>status=1</code>和<code>status=-1</code>的状态外，其他可能存在<code>status=0</code>的接口。</li>
</ul>
</li>
</ul>
<h5 id="3-1-3-未与RP图对照"><a href="#3-1-3-未与RP图对照" class="headerlink" title="3.1.3 未与RP图对照"></a>3.1.3 未与RP图对照</h5><p>主要由于在RP图不断更新的过程中，未能及时变更相应流程、操作和用户友好性的细节。这一部分的bug，是应该在自测中消除掉的。</p>
<h5 id="3-2-代码分析"><a href="#3-2-代码分析" class="headerlink" title="3.2 代码分析"></a>3.2 代码分析</h5><h5 id="3-2-1-代码行数统计"><a href="#3-2-1-代码行数统计" class="headerlink" title="3.2.1 代码行数统计"></a>3.2.1 代码行数统计</h5><table>
<thead>
<tr>
<th>文件夹</th>
<th>代码行数</th>
</tr>
</thead>
<tbody>
<tr>
<td>Classes</td>
<td>21357</td>
</tr>
<tr>
<td>Utility</td>
<td>2941</td>
</tr>
<tr>
<td>Constant</td>
<td>1498</td>
</tr>
<tr>
<td>AppDelegate</td>
<td>201</td>
</tr>
<tr>
<td>Categories</td>
<td>1758</td>
</tr>
<tr>
<td><strong>Sum</strong></td>
<td><strong>27755</strong></td>
</tr>
</tbody>
</table>
<h5 id="3-2-2-公共类的封装"><a href="#3-2-2-公共类的封装" class="headerlink" title="3.2.2 公共类的封装"></a>3.2.2 公共类的封装</h5><ul>
<li><code>BaseFundamentalViewController</code>中封装了空数据的处理、网络请求等通用功能，项目中几乎所有controller都继承自该类。</li>
<li><code>BaseViewController</code>继承自<code>BaseFundamentalViewController</code>。主要封装了与TableView相关的功能，如上拉加载、添加／清除筛选条件等。没有特殊需求的普通列表的展示，只需要不到50行代码。</li>
<li><code>BaseWebViewController</code>继承自<code>BaseFundamentalViewController</code>。主要用于全屏的webview模板展示。</li>
</ul>
<h5 id="3-2-3-代码复用"><a href="#3-2-3-代码复用" class="headerlink" title="3.2.3 代码复用"></a>3.2.3 代码复用</h5><ul>
<li>以后可能用到的功能模块：<ul>
<li><code>Base</code>系列；</li>
<li>下载管理（<em>待完善</em>）；</li>
<li>WebView模板展示（GRMustache）；</li>
<li>表格展示（GridView）；</li>
<li>Charts展示（Charts）；</li>
<li>图片浏览及选择（支持多选，MWPhotoBrowser）；</li>
<li>表单的展示及填写（XLForm）；</li>
<li>年月选择器。</li>
</ul>
</li>
</ul>
<h3 id="4-美工-amp-测试"><a href="#4-美工-amp-测试" class="headerlink" title="4.美工 &amp; 测试"></a>4.美工 &amp; 测试</h3><ul>
<li>对于移动端的切图可以逐渐模板化，如某些固定尺寸、固定的需求（如：Android的图片设计时有效内容尽量居中，便于自行剪裁）等。</li>
<li>时间允许的条件下，同类型bug可以设置关联bug，方便开发人员统一修复。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> PragmaticProgrammer </tag>
            
            <tag> 脑洞开一开 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实用svn命令]]></title>
      <url>http://www.calios.gq/2016/07/24/%E5%AE%9E%E7%94%A8svn%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>1.Check all the changed files:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn <span class="keyword">st</span></div></pre></td></tr></table></figure></p>
<p>2.Check the differences between this version and the last version:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>svn diff -r PREV filename</div></pre></td></tr></table></figure></p>
<p>3.Undo add a file before commit:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- language: bash --&gt;</span></div><div class="line">	$ svn revert --recursive folder_name</div></pre></td></tr></table></figure></p>
<p>4.Undo delete a file before commit:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- language: bash --&gt;</span></div><div class="line">	$ svn revert . --recursive</div></pre></td></tr></table></figure></p>
<p>5.Delete all locally missing files: <a href="http://stackoverflow.com/questions/9600382/svn-command-to-delete-all-locally-missing-files" title="http://stackoverflow.com/questions/9600382/svn-command-to-delete-all-locally-missing-files" target="_blank" rel="external">solutions</a></p>
<p>6.Delete a folder from svn repository:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- language: bash --&gt;</span></div><div class="line">	$ svn delete http://www.yourrepository.com/svn/folder --message "Deleting"</div></pre></td></tr></table></figure></p>
<p>7.Revert to a previous SVN revision of a file:<br><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn <span class="keyword">merge</span> -c -<span class="number">854</span> l3toks.dtx</div></pre></td></tr></table></figure></p>
<p>8.Ignore Pods foler:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>svn propset <span class="symbol">svn:</span>ignore Pods .</div></pre></td></tr></table></figure></p>
<p>9.SVN remains in conflict status:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ svn resolved &lt;filename <span class="keyword">or</span> directory <span class="keyword">that</span> gives trouble&gt;</div></pre></td></tr></table></figure></p>
<p>10.View all historical changes to a file in SVN:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># history_of_file</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Outputs the full history of a given file as a sequence of</span></div><div class="line"><span class="comment"># logentry/diff pairs.  The first revision of the file is emitted as</span></div><div class="line"><span class="comment"># full text since there's not previous version to compare it to.</span></div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">history_of_file</span></span>() &#123;</div><div class="line">    url=<span class="variable">$1</span> <span class="comment"># current url of file</span></div><div class="line">    svn <span class="built_in">log</span> -q <span class="variable">$url</span> | grep -E <span class="_">-e</span> <span class="string">"^r[[:digit:]]+"</span> -o | cut -c2- | sort -n | &#123;</div><div class="line"></div><div class="line"><span class="comment">#       first revision as full text</span></div><div class="line">        <span class="built_in">echo</span></div><div class="line">        <span class="built_in">read</span> r</div><div class="line">        svn <span class="built_in">log</span> -r<span class="variable">$r</span> <span class="variable">$url</span>@HEAD</div><div class="line">        svn cat -r<span class="variable">$r</span> <span class="variable">$url</span>@HEAD</div><div class="line">        <span class="built_in">echo</span></div><div class="line"></div><div class="line"><span class="comment">#       remaining revisions as differences to previous revision</span></div><div class="line">        <span class="keyword">while</span> <span class="built_in">read</span> r</div><div class="line">        <span class="keyword">do</span></div><div class="line">            <span class="built_in">echo</span></div><div class="line">            svn <span class="built_in">log</span> -r<span class="variable">$r</span> <span class="variable">$url</span>@HEAD</div><div class="line">            svn diff -c<span class="variable">$r</span> <span class="variable">$url</span>@HEAD</div><div class="line">            <span class="built_in">echo</span></div><div class="line">        <span class="keyword">done</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$ history_of_file <span class="variable">$1</span></div></pre></td></tr></table></figure></p>
<p>11.Add tags for SVN:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># First of all, the `ios/1.0.39219` directory should already exists. If it doesn't, you can create it using `svn mkdir` like below.</span></div><div class="line"><span class="variable">$ </span>svn mkdir <span class="symbol">http:</span>/<span class="regexp">/path/to</span><span class="regexp">/project/tags</span><span class="regexp">/projectA/mobile</span><span class="regexp">/ios/</span><span class="number">1.0</span>.<span class="number">39219</span> -m <span class="string">"create tag v1.0 for iOS."</span></div><div class="line"><span class="variable">$ </span>svn copy <span class="symbol">http:</span>/<span class="regexp">/path/to</span><span class="regexp">/project/trunk</span><span class="regexp">/projectA/mobile</span><span class="regexp">/ios/project</span>A <span class="symbol">http:</span>/<span class="regexp">/path/to</span><span class="regexp">/project/tags</span><span class="regexp">/projectA/mobile</span><span class="regexp">/ios/</span><span class="number">1.0</span>.<span class="number">39219</span>/projectA -m <span class="string">"create v1.0. Before updating all the base url and cas url."</span></div><div class="line"></div><div class="line">Committed revision <span class="number">41000</span>.</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Terminal </tag>
            
            <tag> SVN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Set deployment target for CocoaPods’ pod in batches]]></title>
      <url>http://www.calios.gq/2016/07/07/Set-deployment-target-for-CocoaPods'-pod-in-batches/</url>
      <content type="html"><![CDATA[<p>When I tried to <code>pod update</code> an old project, it changed all the pods’ deployment target to 8.0. I’ve been tired up with changing it all the time and finally found <a href="http://stackoverflow.com/a/37289688/1594792" title="http://stackoverflow.com/a/37289688/1594792" target="_blank" rel="external">this solution</a>.</p>
<p>It says:</p>
<blockquote>
<p>While some development versions of CocoaPods (as well as pre-1.0 versions) may have propagated the deployment target of the project down to the pods, this is no longer the case in 1.0. To work around this, the current developer recommends using a post-install hook.<br>Here’s a brute force approach to force a hard-coded deployment target for every pod in the generated Pods project. Paste this at the end of your Podfile:<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">post_install <span class="built_in">do</span> |<span class="type">installer</span>|</div><div class="line">  <span class="type">installer</span>.pods_project.targets.each <span class="built_in">do</span> |<span class="type">target</span>|</div><div class="line">    <span class="type">target</span>.build_configurations.each <span class="built_in">do</span> |<span class="type">config</span>|</div><div class="line">      <span class="type">config</span>.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '<span class="number">9.2</span>'</div><div class="line">    <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>Replace <code>9.2</code> with whatever deployment target you would like to use.</p>
</blockquote>
<p>It does work in two of my projects and the warnings and errors are silent again. LOL.</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Xcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Some notes for Charts]]></title>
      <url>http://www.calios.gq/2016/05/27/Some-notes-for-Charts/</url>
      <content type="html"><![CDATA[<h3 id="Minimum-deployment-target-of-Charts-is-iOS-8-0"><a href="#Minimum-deployment-target-of-Charts-is-iOS-8-0" class="headerlink" title="Minimum deployment target of Charts is iOS 8.0."></a>Minimum deployment target of Charts is iOS <strong>8.0</strong>.</h3><h3 id="Cocoapods-1-0-0-tips"><a href="#Cocoapods-1-0-0-tips" class="headerlink" title="Cocoapods-1.0.0 tips."></a>Cocoapods-1.0.0 tips.</h3><ul>
<li>Add <code>use_frameworks!</code> for iOS 8+;</li>
<li>Specify a target for each pod.</li>
</ul>
<p>eg. if before you had your Podfile written like this:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">pod</span> <span class="string">'Alamofire'</span>, <span class="string">'~&gt; 3.1.4'</span></div><div class="line">pod <span class="string">'SwiftyJSON'</span>, <span class="string">'~&gt; 2.3.2'</span></div></pre></td></tr></table></figure>
<p>just change it to</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">target <span class="string">"TargetName"</span> <span class="built_in">do</span></div><div class="line">    pod <span class="string">'Alamofire'</span>, <span class="string">'~&gt; 3.1.4'</span></div><div class="line">    pod <span class="string">'SwiftyJSON'</span>, <span class="string">'~&gt; 2.3.2'</span></div><div class="line"><span class="built_in">end</span></div></pre></td></tr></table></figure>
<h3 id="Bridging-between-Objective-C-and-Swift"><a href="#Bridging-between-Objective-C-and-Swift" class="headerlink" title="Bridging between Objective-C and Swift."></a>Bridging between Objective-C and Swift.</h3><ul>
<li>In fact, after installing <code>Charts</code> with Cocoapods and building <code>.xcworkspace</code>, it automatically generates <code>Charts-Swift.h</code> file, which you can use directly in you <code>.m</code> file with <code>#import &lt;Charts/Charts-Swift.h&gt;</code>.(Here my project is OC-based.)</li>
<li>Check some build settings and parameters:<ul>
<li>Product Module Name: yourProject</li>
<li>Defines Module: YES</li>
<li>Embedded Content Contains Swift: YES</li>
<li>Install Objective-C Compatibility Header: YES</li>
<li>Objective-C Bridging Header: $(SRCROOT)/Sources/SwiftBridging.h</li>
</ul>
</li>
</ul>
<p>Here’s <a href="http://stackoverflow.com/a/24005242/1594792" target="_blank" rel="external">step by step integration for Xcode between Objc and Swift in project</a>.</p>
<p>However, I failed to use OC framework in Swift-based project with Cocoapods and still couldn’t tell why. I’ll add it later if I make it.</p>
<p><strong>Update on 2017-04-12</strong></p>
<p>I finally import Objective-C framework into Swift-based project, just after change <code>Targets/Build Settings/Swift Compiler-General/Install Objective-C Compatibility Header</code> in Xcode from <code>No</code> to <code>Yes</code>. :]</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[SourceRead]-CAPSPageMenu]]></title>
      <url>http://www.calios.gq/2016/05/25/%5BSourceRead%5D-CAPSPageMenu/</url>
      <content type="html"><![CDATA[<h3 id="［1］-所有配置选项均为extern-const-string"><a href="#［1］-所有配置选项均为extern-const-string" class="headerlink" title="［1］ 所有配置选项均为extern const string"></a>［1］ 所有配置选项均为extern const string</h3><p>具体来说，即：每个选项对应一个属性，在初始化方法中，通过获取到的选项字典依次给对象的各个属性赋值。</p>
<p>如：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CAPSPageMenu.h</span></div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> <span class="built_in">CAPSPageMenuOptionSelectionIndicatorHeight</span>;</div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> <span class="built_in">CAPSPageMenuOptionMenuItemSeparatorWidth</span>;</div><div class="line"></div><div class="line"><span class="comment">// CAPSPageMenu.m</span></div><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> <span class="built_in">CAPSPageMenuOptionSelectionIndicatorHeight</span>             = <span class="string">@"selectionIndicatorHeight"</span>;</div><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> <span class="built_in">CAPSPageMenuOptionMenuItemSeparatorWidth</span>               = <span class="string">@"menuItemSeparatorWidth"</span>;</div></pre></td></tr></table></figure></p>
<p>在初始化方法中，根据遍历传入的options参数，依次给各个属性赋值。<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (instance<span class="keyword">type</span>)initWithViewControllers:(<span class="type">NSArray</span> *)viewControllers frame:(<span class="type">CGRect</span>)frame options:(<span class="type">NSDictionary</span> *)options&#123;</div><div class="line">		for (<span class="type">NSString</span> *key in options) &#123;</div><div class="line">            if ([key isEqualToString:<span class="type">CAPSPageMenuOptionSelectionIndicatorHeight</span>]) &#123;</div><div class="line">                _selectionIndicatorHeight = [options[key] floatValue];</div><div class="line">            &#125; else if ([key isEqualToString: <span class="type">CAPSPageMenuOptionMenuItemSeparatorWidth</span>]) &#123;</div><div class="line">                _menuItemSeparatorWidth = [options[key] floatValue];</div><div class="line">            &#125;</div><div class="line">	...</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在使用时，传入组装好的自定义option。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  NSDictionary *parameters = @&#123;</div><div class="line"><span class="string">CAPSPageMenuOptionScrollMenuBackgroundColor:</span> [UIColor <span class="string">colorWithRed:</span><span class="number">30.0</span><span class="regexp">/255.0 green:30.0/</span><span class="number">255.0</span> <span class="string">blue:</span><span class="number">30.0</span>/<span class="number">255.0</span> <span class="string">alpha:</span><span class="number">1.0</span>],</div><div class="line"><span class="string">CAPSPageMenuOptionViewBackgroundColor:</span> [UIColor <span class="string">colorWithRed:</span><span class="number">20.0</span><span class="regexp">/255.0 green:20.0/</span><span class="number">255.0</span> <span class="string">blue:</span><span class="number">20.0</span>/<span class="number">255.0</span> <span class="string">alpha:</span><span class="number">1.0</span>],</div><div class="line"><span class="string">CAPSPageMenuOptionSelectionIndicatorColor:</span> [UIColor orangeColor]&#125;;</div><div class="line"></div><div class="line">  _pageMenu = [[CAPSPageMenu alloc] <span class="string">initWithViewControllers:</span>controllerArray <span class="string">frame:</span>CGRectMake(<span class="number">0.0</span>, <span class="number">0.0</span>, self.view.frame.size.width, self.view.frame.size.height) <span class="string">options:</span>parameters];</div><div class="line">  [self.view <span class="string">addSubview:</span>_pageMenu.view];</div></pre></td></tr></table></figure></p>
<p>在很多系统的类库中都使用这种方式来传递自定义的选项值。比如<code>NSAttributedString</code>的初始化方法<code>-initWithString:attributes:</code>中的<code>attributes</code>是自己组装的dictionary，而其中的key就是UIKit下<code>NSAttributedString.h</code>中的“Predefined character attributes for text.”</p>
<p>以后在写自己的类库中可以参考这种方式。</p>
<h3 id="［2］-关于UIScrollView的scrollsToTop属性"><a href="#［2］-关于UIScrollView的scrollsToTop属性" class="headerlink" title="［2］ 关于UIScrollView的scrollsToTop属性"></a>［2］ 关于<code>UIScrollView</code>的<code>scrollsToTop</code>属性</h3><p>当用户点击status bar时，点击位置下面最靠近status bar的scroll view会滚到顶部，但只有以下条件都满足时才会生效：</p>
<ul>
<li><code>scrollsToTop</code>属性值为<code>YES</code>；</li>
<li>代理方法<code>shouldScrollViewScrollToTop</code>没有返回<code>NO</code>；</li>
<li>没有已经处于顶部。</li>
</ul>
<p>这里需要注意的是，如果有<strong>不止一个</strong>scroll view的<code>scrollsToTop</code>被置为<code>YES</code>，那么<strong>所有</strong>scroll view的“点击滚动到顶部”<strong>都不会生效</strong>。</p>
<p>然而，UIScrollView的<code>scrollsToTop</code>默认是<code>YES</code>…所以，对于<code>CAPSPageMenu</code>中的两个scroll view，作者都手动将它们的<code>scrollsToTop</code>置为了<code>NO</code>。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_menuScrollView.<span class="keyword">scrollsToTop </span>      = NO<span class="comment">;;</span></div><div class="line">_controllerScrollView.<span class="keyword">scrollsToTop </span>= NO<span class="comment">;;</span></div></pre></td></tr></table></figure></p>
<p>另外，对于<code>UIScrollView</code>的子类们，如<code>UITableView</code>、<code>UICollectionView</code>、<code>UITextView</code>、<code>UIContainerView</code>等，该规则同样适用。</p>
<h3 id="［3］-为什么在点击item时需要一个Timer？"><a href="#［3］-为什么在点击item时需要一个Timer？" class="headerlink" title="［3］ 为什么在点击item时需要一个Timer？"></a>［3］ 为什么在点击item时需要一个Timer？</h3><p>未知。。。</p>
<h3 id="［4］-gestureRecognizer-shouldRecognizeSimultaneouslyWithGestureRecognizer"><a href="#［4］-gestureRecognizer-shouldRecognizeSimultaneouslyWithGestureRecognizer" class="headerlink" title="［4］-gestureRecognizer: shouldRecognizeSimultaneouslyWithGestureRecognizer:"></a>［4］<code>-gestureRecognizer: shouldRecognizeSimultaneouslyWithGestureRecognizer:</code></h3><p>虽然view和gesture recognizer可以是一对多的关系，但默认情况下，两个gesture recognizer是不能同时有效的。此时，若想两个gesture recognizer能同时处理它们各自的gesture，需要重写<code>UIScrollView</code>的protocol<code>-gestureRecognizer: shouldRecognizeSimultaneouslyWithGestureRecognizer:</code>，并在其中返回<code>YES</code>。</p>
<p>在一个gesture recognizer对于gesture的识别会阻塞另一个gesture recognizer的gesture识别时，这个方法就会被调用了。</p>
<p>当然，也可以根据需要在其中添加判断条件，使之返回不同的值。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)gestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(<span class="built_in">UIGestureRecognizer</span> *)otherGestureRecognizer</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> ([gestureRecognizer isKindOfClass:[<span class="built_in">UIPanGestureRecognizer</span> <span class="keyword">class</span>]]  &amp;&amp; [otherGestureRecognizer isKindOfClass:[<span class="built_in">UIScreenEdgePanGestureRecognizer</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">      &#125;    </div><div class="line">	<span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="http://stackoverflow.com/a/8960080/1594792" target="_blank" rel="external">http://stackoverflow.com/a/8960080/1594792</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/GestureRecognizer_basics/GestureRecognizer_basics.html#//apple_ref/doc/uid/TP40009541-CH2-SW2" target="_blank" rel="external">https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/GestureRecognizer_basics/GestureRecognizer_basics.html#//apple_ref/doc/uid/TP40009541-CH2-SW2</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> SourceRead </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随笔一则 5月23日移动端会议有感]]></title>
      <url>http://www.calios.gq/2016/05/24/%E9%9A%8F%E7%AC%94%E4%B8%80%E5%88%99-5%E6%9C%8823%E6%97%A5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BC%9A%E8%AE%AE%E6%9C%89%E6%84%9F/</url>
      <content type="html"><![CDATA[<h3 id="1-技术，最后的终点都是应用。所以，要充分考虑use-case。"><a href="#1-技术，最后的终点都是应用。所以，要充分考虑use-case。" class="headerlink" title="1. 技术，最后的终点都是应用。所以，要充分考虑use case。"></a>1. 技术，最后的终点都是应用。所以，要充分考虑use case。</h3><p><strong>例如：</strong>考虑iOS端如何实现图文混排的展示问题，在选择使用模板来规范获取到的html时，如果出现文字环绕图片的状况，是否也能完美展示？</p>
<p><strong>延伸思考：</strong>获取到的html来自哪里－》来自用户－》用户的行为不可控－》输入的图文样式不可控－》所以，调研时选定方案时，需要充分测试各种图文混排<br>的效果。</p>
<p><strong>结论：</strong>不止是测试需要测试案例，设计需要Persona，开发的技术调研、选择技术方案时也需要充分考虑use case。</p>
<h3 id="2-思考一个问题，要尽量全方位地考虑。"><a href="#2-思考一个问题，要尽量全方位地考虑。" class="headerlink" title="2. 思考一个问题，要尽量全方位地考虑。"></a>2. 思考一个问题，要尽量全方位地考虑。</h3><p><img src="http://mmbiz.qpic.cn/mmbiz/bwj0DnTUVQuIQvnX7vuvibCtVicEGt9jGXV03CW3RRSjAwAzs6jUmEKoIgNBoInCqn6pibl7TwB5x19SejSfEAvUQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="" title="思考能力的六大分类"></p>
<p>恰好今天早上看到了奴隶社会发的这篇<a href="http://mp.weixin.qq.com/s?__biz=MzA3NDMyOTcxMQ==&amp;mid=2651240054&amp;idx=1&amp;sn=927642e6f2a884458a2356b7e8dacf04&amp;scene=1&amp;srcid=0524kbGqhd8mXTrnlAU68vnh&amp;from=groupmessage&amp;isappinstalled=0#wechat_redirect" target="_blank" rel="external">《独立思考能力怎么培养？》</a>。一方面，对于自己子女今后的教育多了一分思考；另一方面，想到昨天的会议中也有部分与之相通。通常情况下，我们还都处于上图六个层次的底三层，仅限于应用。或者说，只知道<em>用什么（what）</em>和<em>怎么做（how）</em>，但是对于<em>为什么（why）</em>却知之甚少。</p>
<ul>
<li>为什么这种方案可以，为什么那种方案不可以？</li>
<li>如果选择这种方案，现有的实现方式是什么？</li>
<li>需要多少人月的投入？</li>
<li>我们能否在已有实现方式的基础上实现微创新？</li>
</ul>
<p>我相信思维这种东西，没有那么多天生的快与慢。快者，如福尔摩斯，也无非是以他自己的方式建造了一座记忆宫殿，而他知晓通往宫殿每个角落的最短路径。慢者，如我等，还需要刻意训练自己的思维能力，让大脑中的灰质细胞不断增加，让神经元更容易地将灰质细胞连接起来，让我们可以更加“融会贯通”。</p>
<h3 id="3-要经常总结，落到文字和图片上。"><a href="#3-要经常总结，落到文字和图片上。" class="headerlink" title="3.要经常总结，落到文字和图片上。"></a>3.要经常总结，落到文字和图片上。</h3><p>这个不用多说了。这也是我写这个博客的初衷之一吧。:)</p>
]]></content>
      
        
        <tags>
            
            <tag> PragmaticProgrammer </tag>
            
            <tag> 脑洞开一开 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Some notes for TextKit]]></title>
      <url>http://www.calios.gq/2016/05/17/Some-notes-for-TextKit/</url>
      <content type="html"><![CDATA[<h3 id="Use-semantic-approach-for-font-in-latter-projects"><a href="#Use-semantic-approach-for-font-in-latter-projects" class="headerlink" title="Use semantic approach for font in latter projects"></a>Use semantic approach for font in latter projects</h3><blockquote>
<ul>
<li>Using a semantic approach to font names, such as UIFontTextStyleSubHeadline, helps avoid hard-coded font names and styles throughout your code — and ensures that your app will respond properly to user-defined typography settings as expected.</li>
<li>Font descriptors help you avoid the use of hardcoded font strings to set font types and styles.</li>
<li>Font descriptors are a type of descriptor language that allows you to modify fonts by applying specific attributes, or to obtain details of font metrics, without the need to instantiate an instance ofUIFont.</li>
</ul>
</blockquote>
<h3 id="exclusionPaths-property"><a href="#exclusionPaths-property" class="headerlink" title="exclusionPaths property"></a><code>exclusionPaths</code> property</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NS_CLASS_AVAILABLE(10_0, 7_0) @interface NSTextContainer<span class="keyword"> :</span> NSObject &lt;NSCoding, NSTextLayoutOrientationProvider&gt;</div><div class="line"></div><div class="line">// Default value<span class="keyword"> :</span> empty<span class="built_in"> array </span> An<span class="built_in"> array </span>of UIBezierPath representing the exclusion paths inside the receiver's bounding rect.</div><div class="line">@property(copy, NS_NONATOMIC_IOSONLY) NSArray&lt;UIBezierPath *&gt; *exclusionPaths NS_AVAILABLE(10_11, 7_0);</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<blockquote>
<p> You might have noticed that the exclusionPaths property expects an instance of NSArray; therefore each container can support more than one exclusion path.</p>
</blockquote>
<h3 id="Class-clusters"><a href="#Class-clusters" class="headerlink" title="Class clusters"></a>Class clusters</h3><blockquote>
<p>Class clusters are a commonly used design pattern throughout Apple’s frameworks.<br>A class cluster is simply the Objective-C implementation of the Abstract Factory pattern, which provides a common interface for creating families of related or dependent objects without specifying the concrete classes. Familiar classes such as NSArray and NSNumber are in fact the public interface to a cluster of classes.</p>
</blockquote>
<h3 id="Set-hight-of-UITextView-CGFLOAT-MAX"><a href="#Set-hight-of-UITextView-CGFLOAT-MAX" class="headerlink" title="Set hight of UITextView CGFLOAT_MAX"></a>Set hight of UITextView <code>CGFLOAT_MAX</code></h3><p>In any case, this is more than enough to allow the UITextView to scroll and accommodate long passages of text.</p>
<h3 id="NSRange"><a href="#NSRange" class="headerlink" title="NSRange"></a><code>NSRange</code></h3><p>来自Mattt的一篇：<a href="http://nshipster.com/nsrange/" target="_blank" rel="external">http://nshipster.com/nsrange/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
            <tag> TextKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS上富文本的解决方案]]></title>
      <url>http://www.calios.gq/2016/05/17/iOS%E4%B8%8A%E5%AF%8C%E6%96%87%E6%9C%AC%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>富文本无非要实现两类效果：</p>
<ul>
<li>图片和文字的混排</li>
<li>文字样式的随意修改</li>
</ul>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul>
<li>通过CoreText/TextKit来原生实现</li>
<li>通过webView来间接实现</li>
</ul>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>一图胜千言：<br><img src="http://7xkwcv.com1.z0.glb.clouddn.com/iOS%E4%B8%8A%E5%AF%8C%E6%96%87%E6%9C%AC%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt=""></p>
<h4 id="通过CoreText-TextKit来原生实现"><a href="#通过CoreText-TextKit来原生实现" class="headerlink" title="通过CoreText/TextKit来原生实现"></a>通过CoreText/TextKit来原生实现</h4><p> iOS 6之前：CoreText,纯C语言,极其蛋疼<br> iOS 6开始：NSAttributedString,简单易用<br> iOS 7开始：TextKit,功能强大,简单易用</p>
<p><strong>对于NSAttributedString（iOS6开始）：</strong></p>
<ul>
<li>可以给指定范围（range）内的string添加属性（见UIKit中的<code>NSAttributedString.h</code>中的属性列表）；</li>
<li>可以使用它的类方法<code>attributedStringWithAttachment:</code>，将图片以附件（<code>NSTextAttachment</code>）的形式附加在已有NSAttributedString的后面。</li>
</ul>
<p><strong>对于TextKit（iOS7开始）：</strong></p>
<ul>
<li>可以通过继承<code>NSTextStorage</code>或<code>NSLayoutManager</code>来对不同的样式（如指定文字的高亮、背景颜色、下划线等）进行自定义处理；</li>
<li>可以设置<code>NSTextContainer</code>的<code>exclusionPaths</code>属性来设置镂空区域。</li>
</ul>
<p><strong>对于DTCoreText：</strong></p>
<ul>
<li>对CoreText进行了封装；</li>
<li>可以将html转换成<code>NSAttributedString</code>，而依然以<strong>html的样式</strong>展示出来；</li>
<li>支持CSS样式的展示；</li>
<li>支持内嵌html5视频及播放；</li>
<li>支持对多种附件（图片、视频等）的自定义处理；</li>
<li>支持远程图片等懒加载。</li>
</ul>
<p><strong>补充：</strong></p>
<p>正如<a href="http://stackoverflow.com/questions/4217820/convert-html-to-nsattributedstring-in-ios/18886718#18886718" target="_blank" rel="external">pix</a>所说，iOS7起，UIKit中添加了<code>initWithData:options:documentAttributes:error:</code>方法，可以用HTML来初始化一个NSAttributedString对象。如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">NSAttributedString</span> alloc] initWithData:[htmlString dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>]</div><div class="line">                                 options:@&#123;<span class="built_in">NSDocumentTypeDocumentAttribute</span>: <span class="built_in">NSHTMLTextDocumentType</span>,</div><div class="line">                                           <span class="built_in">NSCharacterEncodingDocumentAttribute</span>: @(<span class="built_in">NSUTF8StringEncoding</span>)&#125;</div><div class="line">                      documentAttributes:<span class="literal">nil</span> error:<span class="literal">nil</span>];</div></pre></td></tr></table></figure></p>
<p>但从评论中来看，普遍反映执行起来花费时间很长。所以类似情况，还是优先考虑使用DTCoreText。</p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li>CoreText教程：<a href="https://www.raywenderlich.com/4147/core-text-tutorial-for-ios-making-a-magazine-app" target="_blank" rel="external">https://www.raywenderlich.com/4147/core-text-tutorial-for-ios-making-a-magazine-app</a></li>
<li>DTCoreText: <a href="https://github.com/Cocoanetics/DTCoreText" target="_blank" rel="external">https://github.com/Cocoanetics/DTCoreText</a></li>
<li>DTCoreText-Demo: <a href="https://github.com/yoon-boom/DTCoreText-DEMO" target="_blank" rel="external">https://github.com/yoon-boom/DTCoreText-DEMO</a>(Happy to find an executable one!)</li>
<li>DTCoreText的源码分析：<a href="http://blog.cnbang.net/tech/2630/" target="_blank" rel="external">http://blog.cnbang.net/tech/2630/</a></li>
<li>TextKit教程：<a href="https://www.raywenderlich.com/50151/text-kit-tutorial" target="_blank" rel="external">https://www.raywenderlich.com/50151/text-kit-tutorial</a></li>
<li>YYText：<a href="https://github.com/ibireme/YYText" target="_blank" rel="external">https://github.com/ibireme/YYText</a></li>
<li><a href="http://stackoverflow.com/questions/4217820/convert-html-to-nsattributedstring-in-ios/18886718#18886718" target="_blank" rel="external">http://stackoverflow.com/questions/4217820/convert-html-to-nsattributedstring-in-ios/18886718#18886718</a></li>
</ul>
<h4 id="通过webView来间接实现"><a href="#通过webView来间接实现" class="headerlink" title="通过webView来间接实现"></a>通过webView来间接实现</h4><p>原理是类似symfony中的twig模板，将设计好的模板存在项目中（.mustache和.html），字体保存为.ttf，然后每次请求数据时，将服务器返回的html用这个模板进行渲染，再用嵌入的webview加载，从而得到整体风格一致的页面。</p>
<p>具体实现可以参考开源中国iOS版本的源码。</p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li>GRMustache：<a href="https://github.com/groue/GRMustache" target="_blank" rel="external">https://github.com/groue/GRMustache</a></li>
<li><a href="https://github.com/syntaxhighlighter/syntaxhighlighter" target="_blank" rel="external">https://github.com/syntaxhighlighter/syntaxhighlighter</a></li>
<li>开源中国iOS版本源码：<a href="http://git.oschina.net/oschina/iphone-app/tree/master" target="_blank" rel="external">http://git.oschina.net/oschina/iphone-app/tree/master</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> RichText </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to check if UITextField/UITextView is empty?]]></title>
      <url>http://www.calios.gq/2016/05/10/How-to-check-if-UITextField-UITextView-is-empty/</url>
      <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//============================================================</span></div><div class="line"><span class="comment">// Responders that implement the UIKeyInput protocol will be driven by the system-provided keyboard,</span></div><div class="line"><span class="comment">// which will be made available whenever a conforming responder becomes first responder.</span></div><div class="line"></div><div class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UIKeyInput</span> &lt;<span class="title">UITextInputTraits</span>&gt;</span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)hasText;</div><div class="line">- (<span class="keyword">void</span>)insertText:(<span class="built_in">NSString</span> *)text;</div><div class="line">- (<span class="keyword">void</span>)deleteBackward;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UITextInput</span> &lt;<span class="title">UIKeyInput</span>&gt;</span></div><div class="line"></div><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UITextField</span> : <span class="title">UIControl</span> &lt;<span class="title">UITextInput</span>, <span class="title">NSCoding</span>&gt;</span></div><div class="line"></div><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UITextView</span> : <span class="title">UIScrollView</span> &lt;<span class="title">UITextInput</span>&gt;</span></div></pre></td></tr></table></figure>
<p>In short, have a look at this image.</p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/How%20to%20check%20if%20UITextField:UITextView%20is%20empty@2x.png" alt=""></p>
<p>So, just call <code>[yourTextField hasText]</code> or <code>[yourTextView hasText]</code> and everything is done!</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Issue of lazy loading property]]></title>
      <url>http://www.calios.gq/2016/05/04/Issue-of-lazy-loading-property/</url>
      <content type="html"><![CDATA[<p>I’ve got some <code>readonly</code> properties in my .h file. And when I tried to lazy loading them as usual like this.<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MyView.h</span></div><div class="line">@property (nonatomic, strong, readonly) UILabel *titleLabel;</div><div class="line"></div><div class="line"><span class="comment">// MyView.m</span></div><div class="line">- (UIImageView *)imageView</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="variable">_imageView</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="variable">_imageView</span> = [UIImageView new];</div><div class="line">        <span class="variable">_imageView</span>.translatesAutoresizingMaskIntoConstraints = NO;</div><div class="line">        <span class="variable">_imageView</span>.backgroundColor = [UIColor clearColor];</div><div class="line">        <span class="variable">_imageView</span>.contentMode = UIViewContentModeScaleAspectFit;</div><div class="line">        <span class="variable">_imageView</span>.userInteractionEnabled = NO;</div><div class="line">        <span class="variable">_imageView</span>.accessibilityIdentifier = @<span class="string">"empty set image view"</span>;</div><div class="line"></div><div class="line">        <span class="variable">_imageView</span>.<span class="built_in">image</span> = <span class="variable">_defaultImage</span>;</div><div class="line"></div><div class="line">        [<span class="variable">_contentView</span> addSubview:<span class="variable">_imageView</span>];</div><div class="line">    &#125;</div><div class="line">    return <span class="variable">_imageView</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Then…bang! It threw out errors in bulk, yelling “Use of undeclared identifier ‘_imageView’”. What the hell have I done!</p>
<p>Luckily, I found some explainations <a href="http://stackoverflow.com/a/13670924/1594792" target="_blank" rel="external">here</a>. It says:</p>
<blockquote>
<p>Newer Xcode versions can create a @synthesize statement automatically and use the underscore prefix for instance variables. In this case however, <strong>since the property is read-only and you provide a getter method, Xcode does not synthesize the property automatically.</strong></p>
</blockquote>
<p>So, I have to @synthesize the property on my own, and now it’s quiet and cute again. :P</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[SolutionSummary] #1: UITableView／UICollectionView with empty data]]></title>
      <url>http://www.calios.gq/2016/05/04/SolutionSummary-1-UITableView%EF%BC%8FUICollectionView-with-empty-data/</url>
      <content type="html"><![CDATA[<h5 id="Use-case"><a href="#Use-case" class="headerlink" title="Use case"></a>Use case</h5><p>－ Empty data in <code>UITableView／UICollectionView</code><br>－ No network connection<br>－ Network connection failure<br>－ Loading data</p>
<h5 id="What-does-it-look-like-before"><a href="#What-does-it-look-like-before" class="headerlink" title="What does it look like before?"></a>What does it look like before?</h5><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// BaseViewController.h</span></div><div class="line">- (<span class="keyword">void</span>)showBlankViewWithString:(<span class="built_in">NSString</span> *)attention forView:(<span class="built_in">UIView</span> *)view;</div><div class="line">- (<span class="keyword">void</span>)hideBlankView;</div><div class="line"></div><div class="line"><span class="comment">// BaseViewController.m</span></div><div class="line"><span class="meta">#pragma mark - Blank</span></div><div class="line">- (<span class="keyword">void</span>)showBlankViewWithString:(<span class="built_in">NSString</span> *)attention forView:(<span class="built_in">UIView</span> *)view</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!_blankView) &#123;</div><div class="line">        <span class="built_in">CGFloat</span> x = view.frame.origin.x;</div><div class="line">        <span class="built_in">CGFloat</span> width = view.frame.size.width;</div><div class="line">        <span class="built_in">CGFloat</span> height = view.frame.size.height;</div><div class="line">        _blankView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>( x + (width - <span class="number">175</span>)/<span class="number">2.</span>f, height/<span class="number">3.</span>f, <span class="number">175</span>, <span class="number">200</span>)];</div><div class="line">        _blankView.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line"><span class="comment">//        [self.view insertSubview:_blankView aboveSubview:view];</span></div><div class="line">        [<span class="keyword">self</span>.view addSubview:_blankView];</div><div class="line"></div><div class="line">        <span class="built_in">UIImageView</span> *blankImgView = [[<span class="built_in">UIImageView</span> alloc] initWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"blank_content"</span>]];</div><div class="line">        blankImgView.frame = <span class="built_in">CGRectMake</span>(<span class="number">25</span>, <span class="number">0</span>, <span class="number">125</span>, <span class="number">150</span>);</div><div class="line">        [_blankView addSubview:blankImgView];</div><div class="line"></div><div class="line">        _attentionLabel = [[<span class="built_in">UILabel</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="built_in">CGRectGetMaxY</span>(blankImgView.frame) + kTVCVCellInset_X, <span class="number">175</span>, kMediumFontSize + <span class="number">2</span>)];</div><div class="line">        _attentionLabel.numberOfLines = <span class="number">0</span>;</div><div class="line">        _attentionLabel.textAlignment = <span class="built_in">NSTextAlignmentCenter</span>;</div><div class="line">        _attentionLabel.textColor = kLightGrayColor;</div><div class="line">        _attentionLabel.font = [<span class="built_in">UIFont</span> systemFontOfSize:kMediumFontSize];</div><div class="line">        [_blankView addSubview:_attentionLabel];</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span>.view bringSubviewToFront:_blankView];</div><div class="line">    _attentionLabel.text = attention;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)hideBlankView</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (_blankView != <span class="literal">nil</span>) &#123;</div><div class="line">        [_blankView removeFromSuperview];</div><div class="line">        _blankView  = <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And call these methods anywhere and choose the right <em>view</em> like this:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="literal">self</span> showBlankViewWithString:kNetworkFailureKey <span class="keyword">for</span>View:<span class="literal">self</span>.view];</div></pre></td></tr></table></figure></p>
<p>or write <em>if-else</em> everywhere like this:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">if</span> (tmpArray.count &lt;= <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.tableView.hidden = <span class="literal">YES</span>;</div><div class="line">    [<span class="keyword">self</span> showBlankViewWithString:<span class="string">@"No Data"</span> forView:<span class="keyword">self</span>.view];</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    [<span class="keyword">self</span> hideBlankView];</div><div class="line">    <span class="keyword">self</span>.tableView.hidden = <span class="literal">NO</span>;</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="What-does-it-look-like-now"><a href="#What-does-it-look-like-now" class="headerlink" title="What does it look like now?"></a>What does it look like now?</h5><p>Get your data as usual and just call:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">[self reloadListData:EmptyType_EmptyData]</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>or<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">[self reloadListData:EmptyType_NetworkError]</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>or<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">[self reloadListData:EmptyType_NoNetwork]</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>And all the annoying issues is done!</p>
<p>The only thing you need to do is inheriting from<code>BaseEmptyViewController</code> and set <code>needsEmptyDataHandling</code> to be <code>YES</code>.<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// YourViewController.h</span></div><div class="line"><span class="variable">@interface</span> <span class="attribute">YourViewController </span>: BaseEmptyViewController</div><div class="line"><span class="variable">@end</span></div><div class="line"></div><div class="line"><span class="comment">// YourViewController.m</span></div><div class="line">	self.needsEmptyDataHandling = YES;</div></pre></td></tr></table></figure></p>
<p>For more details, please check <a href="https://github.com/CaliosD/CDEmptyDataSet" target="_blank" rel="external">this</a>.</p>
<h5 id="References"><a href="#References" class="headerlink" title="References"></a>References</h5><p>－ <a href="http://blog.yangmeyer.de/ios-dev/2013/05/11/best-practice-handling-empty-table-views.html" target="_blank" rel="external">http://blog.yangmeyer.de/ios-dev/2013/05/11/best-practice-handling-empty-table-views.html</a><br>－ <a href="https://github.com/dzenbot/DZNEmptyDataSet" target="_blank" rel="external">https://github.com/dzenbot/DZNEmptyDataSet</a><br>－ <a href="http://stackoverflow.com/questions/7547934/animated-reloaddata-on-uitableview" target="_blank" rel="external">http://stackoverflow.com/questions/7547934/animated-reloaddata-on-uitableview</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> SolutionSummary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Some notes in `Table View Programming Guide for iOS`]]></title>
      <url>http://www.calios.gq/2016/05/04/Some-notes-in-Table-View-Programming-Guide-for-iOS/</url>
      <content type="html"><![CDATA[<blockquote>
<p>If you want to change the background color of a cell, do so in the <code>tableView:willDisplayCell:forRowAtIndexPath:</code> method of your table view delegate.</p>
<p>The table view’s data source implementation of <code>tableView:cellForRowAtIndexPath:</code> should always reset all content when reusing a cell.</p>
<p><code>indentationLevel</code> property for UITableViewCell</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dynamically adding class methods with runtime]]></title>
      <url>http://www.calios.gq/2016/04/26/Dynamically-adding-class-methods-with-runtime/</url>
      <content type="html"><![CDATA[<p>Today I learned how to add dynamic instance methods in class like this.<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSStringFromSelector</span>(sel) isEqualToString:<span class="string">@"sing"</span>]) &#123;</div><div class="line">        class_addMethod(<span class="keyword">self</span>, sel, (IMP)otherSing, <span class="string">"v@:"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> otherSing(<span class="keyword">id</span> <span class="keyword">self</span>, SEL cmd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ is singing."</span>,((People *)<span class="keyword">self</span>).name);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>When I was typing the code myself, I found another similar method: <code>resolveClassMethod:</code>. Maybe I could use it the same way, I thought. So, here’s the first version.<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSStringFromSelector</span>(sel) isEqualToString:<span class="string">@"dance"</span>]) &#123;</div><div class="line">        class_addMethod(<span class="keyword">self</span>, sel, (IMP)otherDance, <span class="string">"v@:"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveClassMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> otherDance(<span class="keyword">id</span> <span class="keyword">self</span>, SEL cmd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Dancing! Let's rock!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Build and run.</p>
<p>Boom! It crashed sadly, and an unrecognized selector error at runtime was throwed out.</p>
<p>Why?</p>
<p>Digging like a gopher in the Internet(:P), I found Jeff explained <a href="http://iphonedevelopment.blogspot.jp/2008/08/dynamically-adding-class-objects.html" target="_blank" rel="external">here</a> in detail:</p>
<blockquote>
<p>Because that code adds a method to the class object, which means you added an instance method to that class. That’s not what you want. What you want is to add a method to your class’ metaclass object instance, which means going to the runtime to get the Class object that represents the class’ metaclass object (say that five times fast!).</p>
</blockquote>
<p>So, replace the code above with below would work well.<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSStringFromSelector</span>(sel) isEqualToString:<span class="string">@"dance"</span>]) &#123;</div><div class="line">        Class selfMetaClass = objc_getMetaClass([[<span class="keyword">self</span> className] UTF8String]);</div><div class="line">        class_addMethod(selfMetaClass, sel, (IMP)otherDance, <span class="string">"v@:"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveClassMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> otherDance(<span class="keyword">id</span> <span class="keyword">self</span>, SEL cmd)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Dancing! Let's rock!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Now, people could rock as they wished. :P</p>
<p>Wait, what hell was the …  “”v@:”” ?? Seemed odd.</p>
<p>Well, let’s have another digging(:P).</p>
<p>Here it is:</p>
<table>
<thead>
<tr>
<th>type</th>
<th>meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>i/v</td>
<td>return int/void  </td>
</tr>
<tr>
<td>@</td>
<td>parameter id(self)</td>
</tr>
<tr>
<td>:</td>
<td>SEL(_cmd)</td>
</tr>
<tr>
<td>@</td>
<td>id(str)</td>
</tr>
</tbody>
</table>
<p>More detail encodings are <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html" target="_blank" rel="external">here</a>.</p>
<p>OK. That’s finally done. See you another topic. :]</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Runtime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to disable the UITableView-UICollectionView selection highlighting]]></title>
      <url>http://www.calios.gq/2016/04/20/How-to-disable-the-UITableView-UICollectionView-selection-highlighting/</url>
      <content type="html"><![CDATA[<p>Here’s a summary for the UITableView issue <a href="http://stackoverflow.com/a/6305493/1594792" target="_blank" rel="external">here</a> and I added UICollectionView part below in union.</p>
<hr>
<p>Depending on your desired logic and/or result, you’ve got nearly 5 different ways to solve it:</p>
<p>1.To disable the blue highlighting <strong>without changing any other interaction of the (UITableView) cell</strong>:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">[cell setSelectionStyle:UITableViewCellSelectionStyleNone]</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><strong>PS:</strong></p>
<p>There’re two points here to mention:</p>
<ul>
<li>The <code>tableView:didSelectRowAtIndexPath:</code> delegate is not prevented and you can workaround with “if” statements.</li>
<li>Since UICollectionView has no <code>selectionStyle:</code> property, you have to handle it with the second way below.</li>
</ul>
<p>2.Disable highlighting of UITableView/UICollectionView <strong>without changing any other interaction of the (UITableView) cell</strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">[tableView setAllowsSelection:NO]</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>or<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">[collectionView setAllowsSelection:NO]</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>3.To make a cell “read-only”, you can simply do this:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">[cell setUserInteractionEnabled:NO]</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>4.To make an entire table “read-only”:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">[tableView setUserInteractionEnabled:NO]</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><strong>Attention:</strong></p>
<p>This way will forbid UITableView scroll normally as a scrollview. So, be careful about it.</p>
<p>5.To determine on-the-fly whether to highlight a cell (which according to this answer implicitly includes selection), you can implement the following <code>UITableViewDelegate</code> protocol method:<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(BOOL)</span>tableView:<span class="params">(UITableView *)</span>tableView</div><div class="line">   shouldHighlightRowAtIndexPath:<span class="params">(NSIndexPath *)</span>indexPath</div></pre></td></tr></table></figure></p>
<p>More info from <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/index.html#//apple_ref/doc/uid/TP40006942-CH3-SW32" target="_blank" rel="external">iOS Developer Library</a>:</p>
<blockquote>
<p>As touch events arrive, the table view highlights rows in anticipation of the user selecting them. As it processes those touch events, the table view calls this method to ask your delegate if a given cell should be highlighted. Your delegate can implement this method and use it to prevent the highlighting of a row when another row is already selected or when other relevant criteria occur.<br>If you do not implement this method, the default return value is YES.</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[那些年，我踩过的坑（二）]]></title>
      <url>http://www.calios.gq/2016/04/20/%E9%82%A3%E4%BA%9B%E5%B9%B4%EF%BC%8C%E6%88%91%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>最近踩到一个坑，表现状况如下：</p>
<p>UICollectionView的Cell中有一个UIImageView，有选中和未选中两个状态。在某种条件下点击时是不做任何改变的（即保持未选中状态）。</p>
<p>起初的做法是：<br>将UIImageView的<code>image</code>／<code>hightedImage</code>属性和cell的选中／未选中状态进行绑定，通过UIImageView的<code>setHighlighted:</code>方法来切换选中状态。</p>
<pre><code>// MyController.m
- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath
{
    if (conditionAIsSatisfied) {
        ......
    }
}

// MyCollectionViewCell.m
- (void)updateCellWithSelected:(BOOL)selected
{
    [_imgView setHighlighted:selected];
}
</code></pre><p>存在的问题是：<br>在UICollectionView的<code>didSelectItemAtIndexPath:</code>方法中，即使不执行if语句中的更新imageView的方法，<code>_imgView</code>也会更新为选中状态的图片。而collectionViewCell中的<code>updateCellWithSelected:</code>也是没有执行的。那么，为什么<code>_imgView</code>的图片会更新呢？<br>类似的，在UITableView中做同样的控制，UITableViewCell中<code>_imgView</code>的图片为什么就不会改变呢？</p>
<p><code>UICollectionViewDelegate</code>中相关的各个回调方法如下。</p>
<blockquote>
<p>// Methods for notification of selection/deselection and highlight/unhighlight events.<br>// The sequence of calls leading to selection from a user touch is:<br>//<br>// (when the touch begins)<br>// 1. -collectionView:shouldHighlightItemAtIndexPath:<br>// 2. -collectionView:didHighlightItemAtIndexPath:<br>//<br>// (when the touch lifts)<br>// 3. -collectionView:shouldSelectItemAtIndexPath: or -collectionView:shouldDeselectItemAtIndexPath:<br>// 4. -collectionView:didSelectItemAtIndexPath: or -collectionView:didDeselectItemAtIndexPath:<br>// 5. -collectionView:didUnhighlightItemAtIndexPath:</p>
</blockquote>
<p>UICollectionViewCell并没有像UITableViewCell一样提供类似<code>selectionStyle</code>的属性来直接将选中时的样式设置为<code>UITableViewCellSelectionStyleNone</code>，而是给了开发者更多的灵活性，提供了更多的代理方法。通过查看<code>UICollectionViewDelegate</code>以及在<code>shouldSelectItemAtIndexPath:</code>和<code>didHighlightItemAtIndexPath:</code>等函数中打断点逐个排查，发现cell的highlighted和imageview的highlighted是关联的。当cell被选中时，虽然<code>didSelectItemAtIndexPath:</code>方法并没有执行实质性的代码，但在其之前执行的<code>shouldHighlightItemAtIndexPath:</code>方法默认为<code>YES</code>，使整个cell的状态为highlighted，相应的imageView的状态就是显示highlighted的图片了。</p>
<p>知道了原因之后，总结了两个解决方案：</p>
<p>1.添加<code>shouldSelectItemAtIndexPath:</code>方法，在其中增加<code>conditionAIsSatisfied</code>的判断，来对应地返回<code>YES</code>或<code>NO</code>。<br>2.在<code>MyCollectionViewCell</code>中，不再为UIImageView的<code>image</code>／<code>hightedImage</code>设置不同的图片，而是设置为同一个图片。然后在<code>-updateCellWithSelected:</code>中根据<code>selected</code>值来替换选中／未选中的图片。</p>
<p>对比来看，1的缺点在于，已选中的cell无法取消选中。2的缺点在于，切换图片时会有点突兀。</p>
<p>综合考量，我最后选择了方案2。</p>
<hr>
<p><strong>Update 0420</strong></p>
<p>但是，上面啰嗦了半天，其实只需要一句代码解决问题：</p>
<pre><code>collectionView.allowSelection = NO;
</code></pre><p>来自<a href="http://stackoverflow.com/a/6305493/1594792" title="http://stackoverflow.com/a/6305493/1594792" target="_blank" rel="external">这里</a>。UITableView同理。</p>
<p>果然是简洁至上。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> JumpNStruggleOut </tag>
            
            <tag> Summary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bash commands in some useful cases]]></title>
      <url>http://www.calios.gq/2016/04/20/Bash-commands-in-some-useful-cases/</url>
      <content type="html"><![CDATA[<p>1.Rename files in batch<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> *.m; <span class="keyword">do</span> mv <span class="string">"<span class="variable">$i</span>"</span> <span class="string">"Qn<span class="variable">$i</span>"</span>; <span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>2.Compress images in batch<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">find</span> ./ -<span class="built_in">name</span> <span class="string">'*.jpg'</span> -<span class="built_in">exec</span> convert -<span class="built_in">resize</span> <span class="number">80</span>%x80% &#123;&#125; &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>3.Refresh launchpad (I used it when failed to find icons in it.)<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm ~<span class="regexp">/Library/</span>Application\ Support<span class="regexp">/Dock/</span>*.db; killall Dock</div></pre></td></tr></table></figure></p>
<p>4.A tip of showing download things in App Store<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lsof <span class="string">| grep -i pkg</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Bash </tag>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UIImagePickerController breaks status bar appearance]]></title>
      <url>http://www.calios.gq/2016/03/30/UIImagePickerController-breaks-status-bar-appearance/</url>
      <content type="html"><![CDATA[<p>As Rich86man mentioned <a href="http://stackoverflow.com/a/18883563/1594792" target="_blank" rel="external">here</a>, the following is a possible solution.</p>
<blockquote>
<p>In the view controller who calls the image picker, set yourself as the delegate of the image Picker. (You’re probably already doing this)<br>     UIImagePickerController* imagePicker = [[UIImagePickerController alloc] init];<br>     imagePicker.delegate = self;</p>
<p>Since UIImagePickerController is a type of Navigation controller, you’re also setting yourself as the UINavigationController delegate. Then :<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; 	<span class="selector-tag">-</span> (void)<span class="selector-tag">navigationController</span><span class="selector-pseudo">:(UINavigationController</span> *)<span class="selector-tag">navigationController</span> <span class="selector-tag">willShowViewController</span><span class="selector-pseudo">:(UIViewController</span> *)<span class="selector-tag">viewController</span> <span class="selector-tag">animated</span><span class="selector-pseudo">:(BOOL)animated</span></div><div class="line">&gt; 	&#123;</div><div class="line">&gt; 	      <span class="selector-attr">[[UIApplication sharedApplication]</span> <span class="selector-tag">setStatusBarStyle</span><span class="selector-pseudo">:UIStatusBarStyleLightContent</span>];</div><div class="line">&gt; 	&#125;</div></pre></td></tr></table></figure></p>
<p>Replace UIStatusBarStyleLightContent with whatever style you are looking for.</p>
</blockquote>
<p>However, in my case, I found it would be fine just adding a line of code(only add as you need) in <code>- viewWillAppear:</code> function.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[[UIApplication sharedApplication]</span> <span class="selector-tag">setStatusBarHidden</span><span class="selector-pseudo">:NO</span>];</div><div class="line"><span class="selector-attr">[[UIApplication sharedApplication]</span> <span class="selector-tag">setStatusBarStyle</span><span class="selector-pseudo">:UIStatusBarStyleLightContent</span> <span class="selector-tag">animated</span><span class="selector-pseudo">:YES</span>];</div></pre></td></tr></table></figure></p>
<p>Each time UIImagePickerController dismissed, <code>- viewWillAppear:</code> would be called and set status bar right.</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UICollectionView scroll to make section header visible]]></title>
      <url>http://www.calios.gq/2016/03/30/UICollectionView-scroll-to-make-section-header-visible/</url>
      <content type="html"><![CDATA[<p>Swift version：Here’s the <a href="https://gist.github.com/genedelisa/ebcc33c38a521ff8a719#file-collectionviewscroll" target="_blank" rel="external">gist</a>.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    Scroll to make the the given section header visible.</div><div class="line">    The function scrollToItemAtIndexPath will scroll to the item and hide the section header.</div><div class="line">    */</div><div class="line">    func scrollToSection(<span class="selector-tag">section</span>:Int)  &#123;</div><div class="line">        <span class="keyword">if</span> let cv = self<span class="selector-class">.collectionView</span> &#123;</div><div class="line">            let indexPath = NSIndexPath(forItem: <span class="number">1</span>, inSection: section)</div><div class="line">            <span class="keyword">if</span> let attributes =  cv.layoutAttributesForSupplementaryElementOfKind(UICollectionElementKindSectionHeader, atIndexPath: indexPath) &#123;</div><div class="line"></div><div class="line">                let topOfHeader = CGPointMake(<span class="number">0</span>, attributes<span class="selector-class">.frame</span><span class="selector-class">.origin</span><span class="selector-class">.y</span> - cv<span class="selector-class">.contentInset</span><span class="selector-class">.top</span>)</div><div class="line">                cv.setContentOffset(topOfHeader, animated:true)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>Objective-C version: Here’s the <a href="https://gist.github.com/CaliosD/a85ce55e57fe939a9dd62f2c4eb675da" target="_blank" rel="external">gist</a>.<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">scrollToSection:</span>(NSInteger)section</div><div class="line">&#123;</div><div class="line">    NSIndexPath *indexpath = [NSIndexPath <span class="string">indexPathForItem:</span><span class="number">1</span> <span class="string">inSection:</span>section];</div><div class="line">    <span class="keyword">if</span> ([_questionCV <span class="string">layoutAttributesForSupplementaryElementOfKind:</span>UICollectionElementKindSectionHeader <span class="string">atIndexPath:</span>indexpath]) &#123;</div><div class="line">        UICollectionViewLayoutAttributes *attributes = [_questionCV <span class="string">layoutAttributesForSupplementaryElementOfKind:</span>UICollectionElementKindSectionHeader <span class="string">atIndexPath:</span>indexpath];</div><div class="line">        CGPoint topOfHeader = CGPointMake(<span class="number">0</span>, attributes.frame.origin.y - _questionCV.contentInset.top);</div><div class="line">        [_questionCV <span class="string">setContentOffset:</span>topOfHeader];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong> Ref: </strong></p>
<ul>
<li><a href="http://www.rockhoppertech.com/blog/scroll-to-uicollectionview-header/" target="_blank" rel="external">http://www.rockhoppertech.com/blog/scroll-to-uicollectionview-header/</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
            <tag> UICollectionView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】浅色UIStatusBar设置不奏效]]></title>
      <url>http://www.calios.gq/2016/03/08/%E3%80%90%E8%AF%91%E3%80%91%E6%B5%85%E8%89%B2UIStatusBar%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%A5%8F%E6%95%88/</url>
      <content type="html"><![CDATA[<p>当你想用<code>UIStatusBarStyleLightContent</code>给深色的背景设置浅色的状态栏文字时，这里有个常见的陷阱。</p>
<p>有两件事是你必须做的：</p>
<ol>
<li>这是开发者通常都会做的 —— 在Target设置 > General > Status Bar Style > 改成Light。这可以让Info.plist文件添加<code>UIStatusBarStyleLightContent</code>。</li>
<li>这是比较隐晦的一步 —— 在Info.plist文件中，添加<code>View controller-based status bar appearance</code>，并置为<code>NO</code>。</li>
</ol>
<hr>
<p><strong> Ref:</strong></p>
<ul>
<li><a href="http://samwize.com/2015/01/13/uistatusbar-with-light-content-style-not-working-pitfall/" target="_blank" rel="external">http://samwize.com/2015/01/13/uistatusbar-with-light-content-style-not-working-pitfall/</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
            <tag> 译言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Stop CALayer shadow from affecting subviews]]></title>
      <url>http://www.calios.gq/2016/03/07/Stop-CALayer-shadow-from-affecting-subviews/</url>
      <content type="html"><![CDATA[<p>When your parentView is by any chance transparent, the CALayer shadow set for parentView would affect subviews, just as image below.</p>
<p><img src="http://i.stack.imgur.com/CZPUY.png" alt=""></p>
<p>While after setting background color to white color, it shows as we expected.</p>
<p><img src="http://i.stack.imgur.com/YFrqh.png" alt=""></p>
<p><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreAnimation_guide/LayerStyleProperties/LayerStyleProperties.html#//apple_ref/doc/uid/TP40004514-CH10-SW18" target="_blank" rel="external">Docs</a> from Apple: </p>
<blockquote>
<p>Figure A-7 shows several different versions of the same sample layer with a red shadow applied. The left and middle versions include a background color so the shadow appears only around the border of the layer. However, the version on the right does not include a background color. In this case, the shadow is applied to the layer’s content, border, and sublayers.</p>
</blockquote>
<p><img src="http://i.stack.imgur.com/2TGcA.png" alt=""></p>
<hr>
<p><strong> Ref:</strong></p>
<ul>
<li><a href="http://stackoverflow.com/questions/31312087/objectivec-set-shadow-to-parent-view/31313216#31313216" target="_blank" rel="external">http://stackoverflow.com/questions/31312087/objectivec-set-shadow-to-parent-view/31313216#31313216</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CoreAnimation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Value of optional type ‘String’ not unwrapped error in Swift]]></title>
      <url>http://www.calios.gq/2016/03/03/Value-of-optional-type-%E2%80%98String%E2%80%99-not-unwrapped-error-in-Swift/</url>
      <content type="html"><![CDATA[<p>新开了<code>K08-RandomColorization</code>，刚写了一行代码：</p>
<pre><code>let bgMusic = NSURL(fileURLWithPath: NSBundle.mainBundle().pathForResource(&quot;Ecstasy&quot;, ofType: &quot;mp3&quot;))
</code></pre><p>然后就报了一个error：<br><em>Value of optional type ‘String’ not unwrapped;did you mean to use ‘!’ or ‘?’?”</em></p>
<p><a href="http://stackoverflow.com/a/25663421/1594792" target="_blank" rel="external">这里</a>寻得一个不错的答案，翻译及理解如下：</p>
<p>首先，这行代码使用到了<strong> 可选链式调用（Optional Chaining）</strong> 这个家伙。用人话说，就是<code>NSBundle.mainBundle().pathForResource(&quot;Ecstasy&quot;, ofType: &quot;mp3&quot;)</code> 要么就是一个<code>String</code>，要么就是一个<code>nil</code>。</p>
<p>但是，显然<code>NSURL</code>的<code>fileURLWithPath:</code>方法不会接受<code>nil</code>，只会接受<code>String</code>类型的参数，所以编译器就把这个error报出来了。（可以做一个实验，直接写<code>let bgMusic = NSURL(fileURLWithPath: nil)</code>，就会发现报<code>Nil is not compatible with expected argument type ‘String’</code>的error。）</p>
<p>解决办法是强制展开<code>NSBundle.mainBundle().pathForResource(&quot;Ecstasy&quot;, ofType: &quot;mp3&quot;)</code>，即添加一个<code>!</code>：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let bgMusic = NSURL(<span class="name">fileURLWithPath</span>: NSBundle.mainBundle().pathForResource(<span class="string">"Ecstasy"</span>, ofType: <span class="string">"mp3"</span>)!)</div></pre></td></tr></table></figure></p>
<p>但是，如果所需文件不存在就会导致一个运行时的error，直接挂掉。所以，通常来说最好是用一个可选绑定把它包起来：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">let</span> file = NSBundle.mainBundle().pathForResource(<span class="string">"aaa"</span>, ofType: <span class="string">"mp3"</span>) &#123;</div><div class="line">    <span class="built_in">let</span> <span class="built_in">bg</span>Music = NSURL(fileURLWithPath: file)</div><div class="line">    NSLog(<span class="built_in">bg</span>Music.absoluteString)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就可以保证<code>fileURLWithPath:</code>只有在文件不为空时才被调用了。完美～</p>
<hr>
<p><strong> Ref: </strong></p>
<ul>
<li><a href="http://stackoverflow.com/a/25663421/1594792" target="_blank" rel="external">http://stackoverflow.com/a/25663421/1594792</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[How to generate a random number in Objective-C ?]]></title>
      <url>http://www.calios.gq/2016/03/03/How-to-generate-a-random-number-in-Objective-C/</url>
      <content type="html"><![CDATA[<p>Brief instruction from <a href="http://nshipster.com/random/" target="_blank" rel="external">Mattt in NSHipster</a> as below.</p>
<h5 id="1-Random-int-between-0-and-N-1"><a href="#1-Random-int-between-0-and-N-1" class="headerlink" title="1.Random int between 0 and N-1"></a>1.Random int between 0 and N-1</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">NSUInteger r</span> = arc4random_uniform(N);</div></pre></td></tr></table></figure>
<h5 id="2-Random-int-between-1-and-N"><a href="#2-Random-int-between-1-and-N" class="headerlink" title="2.Random int between 1 and N"></a>2.Random int between 1 and N</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">NSUInteger r</span> = arc4random_uniform(N) + 1;</div></pre></td></tr></table></figure>
<h5 id="3-Random-double-between-0-and-1"><a href="#3-Random-double-between-0-and-1" class="headerlink" title="3.Random double between 0 and 1"></a>3.Random double between 0 and 1</h5><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sra<span class="symbol">nd48</span><span class="comment">(time(0)</span>);</div><div class="line">double r = dra<span class="symbol">nd48</span><span class="comment">()</span>;</div></pre></td></tr></table></figure>
<p>Accordingly, in Swift, it’s like this.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let redValue = CGFloat(<span class="name">drand48</span>())</div><div class="line">let blueValue = CGFloat(<span class="name">drand48</span>())</div><div class="line">let greenValue = CGFloat(<span class="name">drand48</span>())</div></pre></td></tr></table></figure></p>
<hr>
<p><strong> Ref: </strong></p>
<ul>
<li><a href="http://nshipster.com/random/" target="_blank" rel="external">http://nshipster.com/random/</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Foundation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Crash related to `UIVisualEffectView`]]></title>
      <url>http://www.calios.gq/2016/03/02/Crash-related-to-UIVisualEffectView/</url>
      <content type="html"><![CDATA[<p>尝试在storyboard中添加了一个<code>UIVisualEffectView</code>，然后又添加了几个子视图，然后，就咻的一下，挂了。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">2016</span><span class="number">-03</span><span class="number">-02</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">45.953</span> K06-Where[<span class="number">3499</span>:<span class="number">225450</span>] The view hierarchy <span class="keyword">is</span> <span class="keyword">not</span> prepared <span class="keyword">for</span> <span class="keyword">the</span> constraint: &lt;NSLayoutConstraint:<span class="number">0x7f843501d7f0</span> UIView:<span class="number">0x7f843501da50</span>.centerX == UIVisualEffectView:<span class="number">0x7f843501d150</span>.centerX&gt;</div><div class="line">    When added <span class="keyword">to</span> a view, <span class="keyword">the</span> constraint's items must be descendants <span class="keyword">of</span> <span class="keyword">that</span> view (<span class="keyword">or</span> <span class="keyword">the</span> view itself). This will crash <span class="keyword">if</span> <span class="keyword">the</span> constraint needs <span class="keyword">to</span> be resolved <span class="keyword">before</span> <span class="keyword">the</span> view hierarchy <span class="keyword">is</span> assembled. Break <span class="keyword">on</span> -[UIView(UIConstraintBasedLayout) _viewHierarchyUnpreparedForConstraint:] <span class="keyword">to</span> debug.</div><div class="line"><span class="number">2016</span><span class="number">-03</span><span class="number">-02</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">45.954</span> K06-Where[<span class="number">3499</span>:<span class="number">225450</span>] The view hierarchy <span class="keyword">is</span> <span class="keyword">not</span> prepared <span class="keyword">for</span> <span class="keyword">the</span> constraint: &lt;NSLayoutConstraint:<span class="number">0x7f843501e250</span> UIView:<span class="number">0x7f843501da50</span>.top == UIVisualEffectView:<span class="number">0x7f843501d150</span>.top + <span class="number">66</span>&gt;</div></pre></td></tr></table></figure></p>
<p><code>command + shift + 0</code>查一下苹果的文档：</p>
<blockquote>
<p>After you add the visual effect view to the view hierarchy, add any subviews to the contentView property of the visual effect view. Do not add subviews directly to the visual effect view itself. (From <a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIVisualEffectView/index.html#//apple_ref/occ/cl/UIVisualEffectView" title="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIVisualEffectView/index.html#//apple_ref/occ/cl/UIVisualEffectView" target="_blank" rel="external">🍎</a>)</p>
</blockquote>
<p>如同<code>UITableViewCell</code>一样，<code>UIVisualEffectView</code>有自己的<code>contentView</code>。所以，不管是添加子视图，还是添加子视图相关的约束，都应该加在这个<code>contentView</code>上，而不是直接加到<code>UIVisualEffectView</code>上。上面的crash就是由于子视图添加的约束不符合视图树的规则导致的。</p>
<p>知道了这些，把原本添加在<code>UIVisualEffectView</code>的约束删掉，改为添加到它的<code>contentView</code>上。Over～</p>
<hr>
<p><strong> Ref: </strong></p>
<ul>
<li><a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIVisualEffectView/index.html#//apple_ref/occ/cl/UIVisualEffectView" target="_blank" rel="external">https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIVisualEffectView/index.html#//apple_ref/occ/cl/UIVisualEffectView</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> iOS8 </tag>
            
            <tag> UIKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CoreLocation Authorization in iOS8+]]></title>
      <url>http://www.calios.gq/2016/03/02/CoreLocation-Authorization-in-iOS8/</url>
      <content type="html"><![CDATA[<h5 id="1-CoreLocationManager中新增的方法"><a href="#1-CoreLocationManager中新增的方法" class="headerlink" title="1.CoreLocationManager中新增的方法"></a>1.<code>CoreLocationManager</code>中新增的方法</h5><p>iOS8在位置获取权限上做了更细的划分，也就是说，用户可以选择允许app在后台使用位置信息、在使用期间使用位置信息或者不允许使用位置信息。</p>
<p>因此，在<code>CLLocationManager</code>中添加了如下两个方法：</p>
<ul>
<li><code>requestWhenInUseAuthorization()</code>: 向用户请求只在app使用期间获取位置信息的权限。</li>
<li><code>requestAlwaysAuthorization()</code>: 向用户请求app在后台使用位置信息的权限。</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">locationManager = CLLocationManager()</div><div class="line">locationManager<span class="selector-class">.delegate</span> = self</div><div class="line">locationManager<span class="selector-class">.desiredAccuracy</span> = kCLLocationAccuracyBest</div><div class="line">locationManager.requestAlwaysAuthorization()</div><div class="line">locationManager.startUpdatingLocation()</div></pre></td></tr></table></figure>
<h5 id="2-提供说明信息"><a href="#2-提供说明信息" class="headerlink" title="2.提供说明信息"></a>2.提供说明信息</h5><p><code>CoreLocation</code>需要给用户展示一个信息，告诉他们为什么需要使用他们的位置信息。这个展示的信息，叫“usage string”，可以在info.plist文件中设置。</p>
<p>然而，下拉列表中找到的唯一相关的<code>NSLocationUsageDescription</code>貌似不起什么作用。</p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/16-3-22/41359249.jpg" alt=""></p>
<p>因为<code>NSLocationUsageDescription</code>在iOS8及iOS8+中都被忽略掉了。同时，有两个新的key被引入进来。</p>
<ul>
<li><code>NSLocationAlwaysUsageDescription</code>:前后台均允许使用</li>
<li><code>NSLocationWhenInUseUsageDescription</code>: 只允许前台使用</li>
</ul>
<p>貌似Xcode并没有更新下拉列表中的内容，所以只能手动输入key了。</p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/16-3-22/65397100.jpg" alt=""></p>
<p>在iPhone中相应的设置信息可以在这里看到：</p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/16-3-22/37636479.jpg" alt=""></p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/16-3-22/21834545.jpg" alt=""></p>
<p>哦了，K06-Where结束了。回归地球。</p>
<hr>
<p><strong>Ref:</strong></p>
<p>部分内容翻译自：<br><a href="https://www.shinobicontrols.com/blog/ios8-day-by-day-day-34-corelocation-authorization" target="_blank" rel="external">https://www.shinobicontrols.com/blog/ios8-day-by-day-day-34-corelocation-authorization</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> iOS8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于AppleScript的点滴]]></title>
      <url>http://www.calios.gq/2016/02/29/%E5%85%B3%E4%BA%8EAppleScript%E7%9A%84%E7%82%B9%E6%BB%B4/</url>
      <content type="html"><![CDATA[<p>1.AppleScript终极入门手册：</p>
<ul>
<li>中文版：<a href="http://blog.csdn.net/yang3wei/article/details/7964226" target="_blank" rel="external">http://blog.csdn.net/yang3wei/article/details/7964226</a></li>
<li>英文版：<a href="http://computers.tutsplus.com/tutorials/the-ultimate-beginners-guide-to-applescript--mac-3436" target="_blank" rel="external">http://computers.tutsplus.com/tutorials/the-ultimate-beginners-guide-to-applescript–mac-3436</a></li>
</ul>
<p>2.保存到本地的.scpt文件如何在terminal中运行？<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>osascript myScript.scpt</div></pre></td></tr></table></figure></p>
<p>3.更多资料见🍎官网：</p>
<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html" target="_blank" rel="external">https://developer.apple.com/library/mac/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html" target="_blank" rel="external">https://developer.apple.com/library/mac/documentation/AppleScript/Conceptual/AppleScriptX/AppleScriptX.html</a></li>
</ul>
<p>4.延伸思考：</p>
<ul>
<li>IFTTT的实现原理？</li>
<li>OS X的app Automator如何使用？是否提供了更好的方式来提高生产效率？</li>
<li>回到折腾AppleScript的原始问题：在写markdown过程中，将剪切板的图片自动上传到七牛，并生成URL返回到剪切版，方便在markdown中插入图片。这个小功能，该如何实现？（建议但不局限于python和AppleScript。）</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> PragmaticProgrammer </tag>
            
            <tag> 脑洞开一开 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Toll-free bridging]]></title>
      <url>http://www.calios.gq/2016/02/29/Toll-Free%20bridging/</url>
      <content type="html"><![CDATA[<blockquote>
<p>所谓的Toll-free bridging是说可以在某个框架的方法或函数同时使用Core Foundatio和Foundation 框架中的某些类型。很多数据类型支持这一特性，其中包括群体和字符串数据类型。每个框架的类和类型描述都会对某个对象是否为 toll-Free bridged，应和什么对象桥接进行说明。<br>类型转换关键字区别：</p>
<ul>
<li>__bridge （相当于assign，还是要自己管理对象）</li>
<li>__bridge_transfer（相当于copy后release，转让了自己对对象的所有权交给别人去管理）</li>
<li>__bridge_retained（相当于retain，增加额对象的引用计数）  </li>
</ul>
<p>同时也要注意在没有ARC和xcode4.2后加入ARC的使用时的区别</p>
</blockquote>
<p>更多内容见Lancy的<a href="http://gracelancy.com/blog/2014/04/21/toll-free-bridging/" title="http://gracelancy.com/blog/2014/04/21/toll-free-bridging/" target="_blank" rel="external">这篇讲解</a>和苹果的文档<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Toll-FreeBridgin/Toll-FreeBridgin.html" title="https://developer.apple.com/library/ios/documentation/General/Conceptual/CocoaEncyclopedia/Toll-FreeBridgin/Toll-FreeBridgin.html" target="_blank" rel="external">Toll-Free Bridging</a>。</p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="http://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="external">http://blog.ibireme.com/2015/05/18/runloop/</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html" target="_blank" rel="external">https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html</a></li>
<li><a href="http://chun.tips/blog/2014/10/20/zou-jin-run-loopde-shi-jie-[?]-:shi-yao-shi-run-loop?/" target="_blank" rel="external">http://chun.tips/blog/2014/10/20/zou-jin-run-loopde-shi-jie-%5B%3F%5D-:shi-yao-shi-run-loop%3F/</a></li>
<li>Toll-free bridged：<a href="http://gracelancy.com/blog/2014/04/21/toll-free-bridging/" target="_blank" rel="external">http://gracelancy.com/blog/2014/04/21/toll-free-bridging/</a></li>
<li>调用栈：<a href="http://blog.chinaunix.net/uid-20760757-id-1872359.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-20760757-id-1872359.html</a></li>
<li>RunLoop源代码：<a href="http://opensource.apple.com/source/CF/CF-855.17/CFRunLoop.c" target="_blank" rel="external">http://opensource.apple.com/source/CF/CF-855.17/CFRunLoop.c</a></li>
<li><a href="http://blog.cnbluebox.com/blog/2014/07/01/cocoashen-ru-xue-xi-nsoperationqueuehe-nsoperationyuan-li-he-shi-yong/" target="_blank" rel="external">http://blog.cnbluebox.com/blog/2014/07/01/cocoashen-ru-xue-xi-nsoperationqueuehe-nsoperationyuan-li-he-shi-yong/</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CoreAnimation的几个知识点]]></title>
      <url>http://www.calios.gq/2016/02/29/CoreAnimation%E7%9A%84%E5%87%A0%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<ul>
<li><strong>矢量图 vs 位图（栅格图）</strong></li>
</ul>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/a/ac/VectorGraphicsExample.jpg" alt="（a）原始矢量图；（b）矢量图放大8倍；（c）位图放大8倍。位图的放大质量较差，但是矢量图可以不降低质量地无限放大。" title="矢量图和位图显示效果对比"></p>
<p><strong>矢量图（vector）</strong>，也叫向量图，是通过多个对象组合生成的，对于其中每一个对象的记录方式都是以数学函数来实现的，缩放不失真。常用的矢量绘制软件有Adobe Illustrator、Freehand、Flash等。<br><strong>位图（bitmap）</strong>，也叫栅格图、像素图，即最小单位由像素构成的图，可操作对象是像素，可以改变图像的饱和度、明度和色相，缩放会失真。常用的位图绘制软件有Adobe Photoshop等。</p>
<ul>
<li>对于<code>position</code>和<code>anchorPoint</code>关系的理解<blockquote>
<p>Point-based coordinates are used when specifying values that map directly to screen coordinates or must be specified relative to another layer, such as for the layer’s position property. Unit coordinates are used when the value should not be tied to screen coordinates because it is relative to some other value. For example, the layer’s anchorPoint property specifies a point relative to the bounds of the layer itself, which can change. (<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreAnimation_guide/CoreAnimationBasics/CoreAnimationBasics.html#//apple_ref/doc/uid/TP40004514-CH2-SW15" target="_blank" rel="external">Core Animation Programming Guide</a>)</p>
</blockquote>
</li>
</ul>
<p>简而言之，anchorPoint是一个点相对于layer本身的bounds而言的单元坐标，它可以改变；而position是layer相对superLayer坐标空间的位置。</p>
<p>以桌子与白纸为例，如果固定图钉在桌上的位置，也就是positon不变，这个时候图钉处在白纸的不同地方就是不同的anchorPoint，相应地也就是不同的frame。<br>另一方面，如果固定图钉在白纸上的位置（没订在桌子上），不管怎么平移白纸，anchorPoint肯定是不变的，但frame肯定是随之变化的</p>
<ul>
<li><code>useEvenOddFillRule</code></li>
</ul>
<p>在看<a href="https://github.com/kishikawakatsumi/UCZProgressView" target="_blank" rel="external">UCZProgressView</a>的代码时发现了这么一个<code>UIBezierPath</code>的属性，而看起来<code>CAShapeLayer</code>也有类似的属性，叫<code>fillRule</code>，可以设置为<code>kCAFillRuleEvenOdd</code>或<code>kCAFillRuleNonZero</code>。那这个属性到底是做什么的呢？<br>解释比较清楚的是一篇关于SVG规范的文章，好在最基本的理论都是相通的。</p>
<blockquote>
<p> ‘fill-rule’ 属性用于指定使用哪一种算法去判断画布上的某区域是否属于该图形“内部” （内部区域将被填充）。对一个简单的无交叉的路径，哪块区域是“内部” 是很直观清除的。但是，对一个复杂的路径，比如自相交或者一个子路径包围另一个子路径，“内部”的理解就不那么明确了。<br><strong>nonzero</strong><br>字面意思是“非零”。按该规则，要判断一个点是否在图形内，从该点作任意方向的一条射线，然后检测射线与图形路径的交点情况。从0开始计数，路径从左向右穿过射线则计数加1，从右向左穿过射线则计数减1。得出计数结果后，如果结果是0，则认为点在图形外部，否则认为在内部。下图演示了nonzero规则:<br><img src="https://www.w3.org/TR/SVG/images/painting/fillrule-nonzero.png" alt=""><br><strong>evenodd</strong><br>字面意思是“奇偶”。按该规则，要判断一个点是否在图形内，从该点作任意方向的一条射线，然后检测射线与图形路径的交点的数量。如果结果是奇数则认为点在内部，是偶数则认为点在外部。下图演示了evenodd 规则:<br><img src="http://www.w3.org/TR/SVG/images/painting/fillrule-evenodd.png" alt=""></p>
</blockquote>
<p>又想到了之前在一个项目中实现的中间有洞的矩形view，翻来瞅一眼。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CAShapeLayer</span> *maskWithHole = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line"></div><div class="line"><span class="comment">// Both frames are defined in the same coordinate system</span></div><div class="line"><span class="built_in">CGRect</span> biggerRect = <span class="built_in">CGRectMake</span>(<span class="number">30</span>, <span class="number">50</span>, <span class="number">120</span>, <span class="number">200</span>);</div><div class="line"><span class="built_in">CGRect</span> smallerRect = <span class="built_in">CGRectMake</span>(<span class="number">80</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">80</span>);</div><div class="line"></div><div class="line"><span class="built_in">UIBezierPath</span> *maskPath = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">[maskPath moveToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(biggerRect), <span class="built_in">CGRectGetMinY</span>(biggerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(biggerRect), <span class="built_in">CGRectGetMaxY</span>(biggerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMaxX</span>(biggerRect), <span class="built_in">CGRectGetMaxY</span>(biggerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMaxX</span>(biggerRect), <span class="built_in">CGRectGetMinY</span>(biggerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(biggerRect), <span class="built_in">CGRectGetMinY</span>(biggerRect))];</div><div class="line"></div><div class="line">[maskPath moveToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(smallerRect), <span class="built_in">CGRectGetMinY</span>(smallerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(smallerRect), <span class="built_in">CGRectGetMaxY</span>(smallerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMaxX</span>(smallerRect), <span class="built_in">CGRectGetMaxY</span>(smallerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMaxX</span>(smallerRect), <span class="built_in">CGRectGetMinY</span>(smallerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(smallerRect), <span class="built_in">CGRectGetMinY</span>(smallerRect))];</div><div class="line"></div><div class="line">[maskWithHole setPath:[maskPath <span class="built_in">CGPath</span>]];</div><div class="line">**[maskWithHole setFillRule:kCAFillRuleEvenOdd];**</div><div class="line">[maskWithHole setFillColor:[[<span class="built_in">UIColor</span> orangeColor] <span class="built_in">CGColor</span>]];</div></pre></td></tr></table></figure></p>
<p>所以，为了“有洞”，最重要的是这一行<code>[maskWithHole setFillRule:kCAFillRuleEvenOdd];</code>。如果设置成<code>kCAFillRuleNonZero</code>（好吧，这个值是默认值），就会得到一个货真价实的实心矩形。当时没有意识到这句话的作用，现在终于明了了。</p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li>Core Animation Programming Guide:<br><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreAnimation_guide/CoreAnimationBasics/CoreAnimationBasics.html#//apple_ref/doc/uid/TP40004514-CH2-SW15" target="_blank" rel="external">https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreAnimation_guide/CoreAnimationBasics/CoreAnimationBasics.html#//apple_ref/doc/uid/TP40004514-CH2-SW15</a></li>
<li><a href="http://stackoverflow.com/questions/10856353/crop-a-cashapelayer-retrieving-the-external-path" target="_blank" rel="external">http://stackoverflow.com/questions/10856353/crop-a-cashapelayer-retrieving-the-external-path</a></li>
<li><a href="http://blog.csdn.net/cuixiping/article/details/7848369" target="_blank" rel="external">http://blog.csdn.net/cuixiping/article/details/7848369</a></li>
<li><a href="http://stackoverflow.com/questions/14840563/how-does-usesevenoddfillrule-work" target="_blank" rel="external">http://stackoverflow.com/questions/14840563/how-does-usesevenoddfillrule-work</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CoreAnimation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UIImageWriteToSavedPhotosAlbum保存图片到系统相册]]></title>
      <url>http://www.calios.gq/2016/02/25/UIImageWriteToSavedPhotosAlbum%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%86%8C/</url>
      <content type="html"><![CDATA[<p>你可以使用如下方法来将指定图片添加到用户的相册。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> <span class="built_in">UIImageWriteToSavedPhotosAlbum</span> (</div><div class="line">                        <span class="built_in">UIImage</span> *image,</div><div class="line">                        <span class="keyword">id</span> completionTarget,</div><div class="line">                        SEL completionSelector,</div><div class="line">                    <span class="keyword">void</span> *contextInfo</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>image：要写入相册的图片；<br>completionTarget：可选项，保存完成后，回调方法所在的对象；<br>completionSelector：要调用的<code>completionTarget</code>的回调方法。这个可选方法应该遵从如下格式：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-(void)                <span class="keyword">image</span>: (UIImage *) <span class="keyword">image</span></div><div class="line">    didFinishSavingWithError: (NSError *) <span class="keyword">error</span></div><div class="line">                 <span class="keyword">contextInfo</span>: (void *) <span class="keyword">contextInfo</span>;</div></pre></td></tr></table></figure></p>
<p>contextInfo：可选的参数，保存了一个指向context数据的指针，它将传递给回调方法。</p>
<p>例如：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    <span class="built_in">UIImage</span> *img = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"test.png"</span>];</div><div class="line"><span class="built_in">UIImageWriteToSavedPhotosAlbum</span>(img, <span class="keyword">self</span>, <span class="keyword">@selector</span>(image:didFinishSavingWithError:contextInfo:), <span class="literal">nil</span>);</div></pre></td></tr></table></figure></p>
<p>回调方法长这样：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (void)<span class="keyword">image</span>:(UIImage *)<span class="keyword">image</span></div><div class="line">    didFinishSavingWithError:(NSError *)<span class="keyword">error</span></div><div class="line">                 <span class="keyword">contextInfo</span>:(void *)<span class="keyword">contextInfo</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Was there an error?</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">error</span> != NULL)</div><div class="line">    &#123;</div><div class="line">      <span class="comment">// Show error message...</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>  <span class="comment">// No errors</span></div><div class="line">    &#123;</div><div class="line">      <span class="comment">// Show message image successfully saved</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】如何避免程序崩溃-9：心态]]></title>
      <url>http://www.calios.gq/2016/02/24/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-9%EF%BC%9A%E5%BF%83%E6%80%81/</url>
      <content type="html"><![CDATA[<p><strong>题外话：</strong></p>
<p>距离<a href="http://www.calios.gq/2016/01/21/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-8%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/" title="http://www.calios.gq/2016/01/21/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-8%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/">上一篇</a>已经一个月了，终于抽出一点时间来把最后一篇完结。噫吁嚱！</p>
<p>原文链接：<a href="http://inessential.com/2015/06/10/how_not_to_crash_9_mindset" target="_blank" rel="external">http://inessential.com/2015/06/10/how_not_to_crash_9_mindset</a></p>
<hr>
<p>你知道吗？老话说得好，“不要写像你一样聪明的代码，因为需要比你<em> 更聪明</em> 的人来debug。”</p>
<p>我过去一直认为这意味着我应该写有我80%聪明的代码。留一点用来debug。</p>
<p>但随着时间推移，我开始觉得我应该写有我10%聪明的代码。我开始相信，真正的聪明是让代码足够简洁明了、以至于看起来毫无特征。</p>
<p>这就是为什么我恪守这样的规则：<a href="http://www.calios.gq/2015/11/19/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-4%EF%BC%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/">除非做可以完全独立的事情，否则一切事情都放在主线程上做</a>；<a href="http://www.calios.gq/2015/11/26/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-6%EF%BC%9A%E5%B1%9E%E6%80%A7%E5%92%8C%E5%AD%98%E5%8F%96%E5%99%A8/">尽量避免使用unsafe_unretained</a>等等。</p>
<p>这意味着我不会因为成为一个代码魔术手而获得额外的加分。我不会把兔子从帽子里拖出来，当然也不会去走钢丝。我甚至都不会去<em>看</em>钢丝。</p>
<p>如果需要，我会去做困难的事情，但是即使是困难的事情，最终的目的也是尽我所能地写出简洁而可读性很高的代码。如果最后代码看起来很简单 —— 给人印象不深，甚至好像一个初中生都能写出来 —— 那说明代码<em>不错</em>。</p>
<p>往小了说，这意味着函数都很短小，较少使用嵌套。往大了说，架构和命名除非迫不得已，否则不会被迭代，就好像它没有做什么考虑一样，因为都已经足够明显了。</p>
<p>这意味着不会过度抽象。精确意味着显而易见。但也意味着不会太过概化 —— 的确有时候两三件事其实是同一件事，这时它们可以在不影响可维护性的前提下概括起来。（当然，有时候不能这么做。）</p>
<p>我避免紧连接和庞大的架构 —— 除非是最优方案的确是让x知道y。</p>
<p>我坚持学习，让自己日渐成长。</p>
<h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><p>编程和绘画、写作、建筑、谱曲的区别在于，它没有完结的产品。是的，有发布的版本，但是没有结束，只有放弃。</p>
<p>代码存在于时间中，可能也会经手很多人 —— 你深知不知道会有多久或者会有谁。你永远不该忘了这一点。</p>
<h4 id="披肩，面具"><a href="#披肩，面具" class="headerlink" title="披肩，面具"></a>披肩，面具</h4><p>在我年轻的时候，我想成为一个代码魔术手 —— 或者说，真正的<em>英雄</em>。但我逐渐认识到，<em>软件的实际质量要比我期望别人怎么看我重要得多</em>。</p>
<p>更进一步说，质量是一种近乎精神上的奖励。它是一种为重于自我的事情奉献的行为，既自私又无私。</p>
<p>自私，是因为为了质量奋斗的过程让你日渐成长。而无私，是因为更好的代码、更好的软件对其他人更有益。</p>
<p>当其他人对你的软件有所要求，首要的就是如果他们启动了它，它是否能<em>保持着</em>启动的状态。任何不能对此问题足够重视的程序员 —— 或是那些总是将崩溃粉饰成生活常态的人 —— 我们可以优先充分地享受其中的巨大乐趣，而这些人无法体会。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 译言 </tag>
            
            <tag> NotToCrashSeries </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何翻转NSArray]]></title>
      <url>http://www.calios.gq/2016/02/22/%E5%A6%82%E4%BD%95%E7%BF%BB%E8%BD%ACNSArray/</url>
      <content type="html"><![CDATA[<p>其实<code>NSArray</code>中提供了现成的<code>-reverseObjectEnumerator</code>方法。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSArray *startArray = @[@<span class="string">"1"</span>,@<span class="string">"2"</span>,@<span class="string">"3"</span>,@<span class="string">"4"</span>]<span class="comment">;</span></div><div class="line">NSArray* reversedArray = [[startArray reverseObjectEnumerator] allObjects]<span class="comment">;</span></div><div class="line">NSLog(@<span class="string">"---- %@"</span>,reversedArray)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>控制台打印出来的信息如下：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">2016-02-22</span> <span class="selector-tag">14</span><span class="selector-pseudo">:13</span><span class="selector-pseudo">:23.539</span> <span class="selector-tag">Demo</span><span class="selector-attr">[1158:258529]</span> <span class="selector-tag">----</span> (</div><div class="line">    <span class="number">4</span>,</div><div class="line">    <span class="number">3</span>,</div><div class="line">    <span class="number">2</span>,</div><div class="line">    <span class="number">1</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>Ref: </strong></p>
<p><a href="http://stackoverflow.com/a/586529/1594792" target="_blank" rel="external">http://stackoverflow.com/a/586529/1594792</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Foundation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发多线程学习笔记-1]]></title>
      <url>http://www.calios.gq/2016/02/19/iOS%E5%BC%80%E5%8F%91%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
      <content type="html"><![CDATA[<h3 id="线程基础"><a href="#线程基础" class="headerlink" title="线程基础"></a>线程基础</h3><h5 id="1-主线程"><a href="#1-主线程" class="headerlink" title="1.主线程"></a>1.主线程</h5><p>一个iOS程序运行后，默认会开启1条线程，称为“主线程”或“UI线程”<br>主线程的主要作用：</p>
<ul>
<li>显示/刷新UI界面</li>
<li>处理UI事件（比如点击事件、滚动事件、拖拽事件等）</li>
</ul>
<h5 id="2-创建线程"><a href="#2-创建线程" class="headerlink" title="2.创建线程"></a>2.创建线程</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.Create a thread.</span></div><div class="line"><span class="comment">// 1-1. Normal initialize.</span></div><div class="line">    NSThread *thread = [[NSThread alloc] <span class="string">initWithTarget:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">run:</span>) <span class="string">object:</span>@<span class="string">"1-1. Normal initialize."</span>];</div><div class="line">    thread.name = @<span class="string">"Thread A"</span>;</div><div class="line"><span class="comment">// 1-2. Auto-start after created.</span></div><div class="line">    [NSThread <span class="string">detachNewThreadSelector:</span><span class="meta">@selector</span>(<span class="string">run:</span>) <span class="string">toTarget:</span>self <span class="string">withObject:</span>@<span class="string">"1-2. Auto-start after created."</span>];</div><div class="line"><span class="comment">// 1-3. Invisibly create and start thread.</span></div><div class="line">    [self <span class="string">performSelectorInBackground:</span><span class="meta">@selector</span>(<span class="string">run:</span>) <span class="string">withObject:</span>@<span class="string">"1-3. Invisibly create and start thread."</span>];</div><div class="line"><span class="comment">// 1-2 &amp; 1-3: easy and handy, but cannot add more detail configuration.</span></div></pre></td></tr></table></figure>
<h5 id="3-开启线程"><a href="#3-开启线程" class="headerlink" title="3.开启线程"></a>3.开启线程</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// Once started, method `<span class="keyword">run</span><span class="bash">` will be executed <span class="keyword">in</span> thread above.</span></div><div class="line">  [thread start];</div></pre></td></tr></table></figure>
<h5 id="4-线程的死亡"><a href="#4-线程的死亡" class="headerlink" title="4.线程的死亡"></a>4.线程的死亡</h5><p>当线程的任务结束，发生异常，或者是强制退出这三种情况会导致线程的死亡。<br>线程死亡后，线程对象从内存中移除。</p>
<h5 id="5-解决多线程访问同一资源的问题：互斥锁"><a href="#5-解决多线程访问同一资源的问题：互斥锁" class="headerlink" title="5.解决多线程访问同一资源的问题：互斥锁"></a>5.解决多线程访问同一资源的问题：互斥锁</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@synchronized(锁对象)</span> &#123; <span class="comment">// 需要锁定的代码  &#125;</span></div></pre></td></tr></table></figure>
<p><strong> 注意：</strong></p>
<ul>
<li>锁定1份代码只用1把锁，用多把锁是无效的。</li>
<li>互斥锁，就是使用了线程同步技术。</li>
<li>互斥锁的缺点是需要消耗大量CPU资源。</li>
</ul>
<h5 id="6-原子和非原子属性"><a href="#6-原子和非原子属性" class="headerlink" title="6.原子和非原子属性"></a>6.原子和非原子属性</h5><p>OC在定义属性时有nonatomic和atomic两种选择：</p>
<ul>
<li>atomic：原子属性，为setter方法加锁（默认就是atomic），线程安全，需要消耗大量的资源；</li>
<li>nonatomic：非原子属性，不会为setter方法加锁，非线程安全，适合内存小的移动设备。</li>
</ul>
<h5 id="7-线程间通信常用方法"><a href="#7-线程间通信常用方法" class="headerlink" title="7.线程间通信常用方法"></a>7.线程间通信常用方法</h5><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>performSelectorOnMainThread:<span class="params">(SEL)</span>aSelector withObject:<span class="params">(id)</span>arg waitUntilDone:<span class="params">(BOOL)</span>wait;</div><div class="line">- <span class="params">(void)</span>performSelector:<span class="params">(SEL)</span>aSelector onThread:<span class="params">(NSThread *)</span>thr withObject:<span class="params">(id)</span>arg waitUntilDone:<span class="params">(BOOL)</span>wait;</div></pre></td></tr></table></figure>
<h5 id="8-关于iOS开发的建议："><a href="#8-关于iOS开发的建议：" class="headerlink" title="8.关于iOS开发的建议："></a>8.关于iOS开发的建议：</h5><ul>
<li>所有属性都声明为nonatomic；</li>
<li>尽量避免多线程抢夺同一块资源；</li>
<li>尽量将加锁、资源抢夺的业务逻辑交给服务器端处理，减小移动客户端的压力。</li>
</ul>
<h3 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h3><h5 id="1-GCD简介："><a href="#1-GCD简介：" class="headerlink" title="1.GCD简介："></a>1.GCD简介：</h5><p>即Grand Central Dispatch，纯C语言，提供了非常多强大的函数。</p>
<h5 id="2-GCD的优势："><a href="#2-GCD的优势：" class="headerlink" title="2.GCD的优势："></a>2.GCD的优势：</h5><ul>
<li>GCD是苹果公司为多核的并行运算提出的解决方案；</li>
<li>GCD会自动利用更多的CPU内核（比如双核、四核）；</li>
<li>GCD会自动管理线程的生命周期（创建线程、调度任务、销毁线程）；</li>
<li>程序员只需要告诉GCD想要执行什么任务，不需要编写任何线程管理代码。</li>
</ul>
<h5 id="3-提示："><a href="#3-提示：" class="headerlink" title="3.提示："></a>3.提示：</h5><ul>
<li>GCD存在于libdispatch.dylib这个库中，这个调度库包含了GCD的所有的东西，但任何IOS程序，默认就加载了这个库，在程序运行的过程中会动态的加载这个库，不需要我们手动导入。</li>
<li>GCD是纯C语言的，所以相关的代码是函数，而不是方法。方法是基于对象的，而函数则独立于对象（更多函数 vs 方法的讨论见<a href="http://stackoverflow.com/questions/155609/difference-between-a-method-and-a-function" title="http://stackoverflow.com/questions/155609/difference-between-a-method-and-a-function" target="_blank" rel="external">这里</a>）。</li>
<li>GCD中的函数大多数都以dispatch开头。</li>
<li>GCD的数据类型在ARC的环境下不需要再做release。</li>
<li>CF（Core Foundation）的数据类型在ARC环境下还是需要做release。</li>
</ul>
<h5 id="4-任务和队列"><a href="#4-任务和队列" class="headerlink" title="4.任务和队列"></a>4.任务和队列</h5><ul>
<li><p>GCD中有2个核心概念<br>  （1）任务：执行什么操作<br>  （2）队列：用来存放任务</p>
</li>
<li><p>GCD的使用就2个步骤<br>  （1）定制任务<br>  （2）确定想做的事情</p>
</li>
</ul>
<p>将任务添加到队列中，GCD会自动将队列中的任务取出，放到对应的线程中执行。<br>提示：任务的取出遵循队列的FIFO原则：先进先出，后进后出。</p>
<h5 id="5-执行任务"><a href="#5-执行任务" class="headerlink" title="5.执行任务"></a>5.执行任务</h5><p>将<code>block</code>（任务）交给<code>queue</code>（队列）执行。</p>
<p>同步：<code>dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);</code><br>异步：<code>dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</code></p>
<h5 id="6-队列"><a href="#6-队列" class="headerlink" title="6.队列"></a>6.队列</h5><p>GCD的队列分两类：</p>
<ul>
<li>并发队列（Concurrent Dispatch Queue）：仅在异步函数下有效；</li>
<li>串行队列（Serial Dispatch Queue）。</li>
</ul>
<p>区分<strong>同步、异步、并发、串行</strong>：</p>
<ul>
<li><p>同步和异步决定了要不要开启新的线程：</p>
<ul>
<li>同步：在当前线程中执行任务，不具备开启新线程的能力</li>
<li>异步：在新的线程中执行任务，具备开启新线程的能力</li>
</ul>
</li>
<li><p>并发和串行决定了任务的执行方式：</p>
<ul>
<li>并发：多个任务并发（同时）执行</li>
<li>串行：一个任务执行完毕后，再执行下一个任务</li>
</ul>
</li>
</ul>
<h5 id="7-串行队列："><a href="#7-串行队列：" class="headerlink" title="7.串行队列："></a>7.串行队列：</h5><p>GCD中获得串行有2种途径：<br>（1）使用<code>dispatch_queue_create</code>函数创建串行队列<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">dispatch_queue_t</span>  dispatch_queue_create(<span class="keyword">const</span> <span class="keyword">char</span> *label,  <span class="keyword">dispatch_queue_attr_t</span> attr); <span class="comment">// 队列名称， 队列属性，一般用NULL即可</span></div><div class="line">示例：</div><div class="line"></div><div class="line">	<span class="keyword">dispatch_queue_t</span> <span class="built_in">queue</span> = dispatch_queue_create(<span class="string">"myTestQueue"</span>, <span class="literal">NULL</span>); <span class="comment">// 创建</span></div><div class="line">	dispatch_release(<span class="built_in">queue</span>); <span class="comment">// 非ARC需要释放手动创建的队列</span></div></pre></td></tr></table></figure></p>
<p>（2）使用主队列（跟主线程相关联的队列）</p>
<p>主队列是GCD自带的一种特殊的串行队列,放在主队列中的任务，都会放到主线程中执行。使用<code>dispatch_get_main_queue()</code>获得主队列。</p>
<p>示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dispatch_queue_t</span> <span class="built_in">queue</span> = dispatch_get_main_queue();</div></pre></td></tr></table></figure></p>
<p><strong> 注：</strong></p>
<ul>
<li>如果把任务放到主队列中进行处理，那么不论处理函数是异步的还是同步的都不会开启新的线程。</li>
<li>要使用异步函数！如果使用同步函数，在主线程中执行主队列中得任务，会发生死循环，任务无法往下执行。</li>
</ul>
<h5 id="8-并行队列"><a href="#8-并行队列" class="headerlink" title="8.并行队列"></a>8.并行队列</h5><p>GCD默认已经提供了全局的并发队列，供整个应用使用，不需要手动创建。<br>使用<code>dispatch_get_global_queue</code>函数获得全局的并发队列。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">dispatch_queue_t</span> dispatch_get_global_queue(<span class="keyword">dispatch_queue_priority_t</span> priority,<span class="keyword">unsigned</span> <span class="keyword">long</span> flags);</div><div class="line">示例：</div><div class="line">第一个参数为优先级，这里选择默认的。第二个flags参数暂时无用，用<span class="number">0</span>即可。获取一个全局的默认优先级的并发队列。</div><div class="line"></div><div class="line">	<span class="keyword">dispatch_queue_t</span> <span class="built_in">queue</span> = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>); <span class="comment">// 获得全局并发队列</span></div></pre></td></tr></table></figure></p>
<h5 id="9-线程间通信"><a href="#9-线程间通信" class="headerlink" title="9.线程间通信"></a>9.线程间通信</h5><p>从子线程回到主线程：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dispatch_async( <span class="name">dispatch_get_global_queue</span>(<span class="name">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>), ^&#123;</div><div class="line">    // 执⾏耗时的异步操作...</div><div class="line">    dispatch_async(<span class="name">dispatch_get_main_queue</span>(), ^&#123;</div><div class="line">        // 回到主线程,执⾏UI刷新操作</div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<h5 id="10-常见用法"><a href="#10-常见用法" class="headerlink" title="10.常见用法"></a>10.常见用法</h5><ul>
<li><strong>延迟执行</strong></li>
</ul>
<p>iOS常见的延时执行有2种方式<br>（1）调用NSObject的方法<code>[self performSelector:@selector(run) withObject:nil afterDelay:2.0];</code>。该方法在那个线程调用，那么run就在哪个线程执行（当前线程），通常是主线程。</p>
<p>（2）使用GCD函数<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_after(<span class="name">dispatch_time</span>(<span class="name">DISPATCH_TIME_NOW</span>, (<span class="name">int64_t</span>)(<span class="number">2.0</span> * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">    // 2秒后异步执行这里的代码...</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>一次性代码</strong></li>
</ul>
<p>使用<code>dispatch_once</code>函数能保证某段代码在程序运行过程中只被执行1次。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">    <span class="comment">// 只执行1次的代码(这里面默认是线程安全的)</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>整个程序运行过程中，只会执行一次。</p>
<ul>
<li><strong>队列组</strong></li>
</ul>
<p>有这么1种需求：NSOperationQueue</p>
<p>首先：分别异步执行2个耗时的操作<br>其次：等2个异步操作都执行完毕后，再回到主线程执行操作</p>
<p>如果想要快速高效地实现上述需求，可以考虑用队列组：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dispatch_group_t group =  dispatch_group_create()<span class="comment">;</span></div><div class="line">dispatch_group_async(<span class="name">group</span>, dispatch_get_global_queue(<span class="name">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>), ^&#123;</div><div class="line">    // 执行<span class="number">1</span>个耗时的异步操作</div><div class="line">&#125;)<span class="comment">;</span></div><div class="line">dispatch_group_async(<span class="name">group</span>, dispatch_get_global_queue(<span class="name">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>), ^&#123;</div><div class="line">    // 执行<span class="number">1</span>个耗时的异步操作</div><div class="line">&#125;)<span class="comment">;</span></div><div class="line">dispatch_group_notify(<span class="name">group</span>, dispatch_get_main_queue(), ^&#123;</div><div class="line">    // 等前面的异步操作都执行完毕后，回到主线程...</div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<h3 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h3><h5 id="1-简单说明"><a href="#1-简单说明" class="headerlink" title="1.简单说明"></a>1.简单说明</h5><p>NSOperation的作⽤：配合使用NSOperation和NSOperationQueue也能实现多线程编程。<br>NSOperation和NSOperationQueue实现多线程的具体步骤：<br>（1）先将需要执行的操作封装到一个NSOperation对象中<br>（2）然后将NSOperation对象添加到NSOperationQueue中<br>（3）系统会⾃动将NSOperationQueue中的NSOperation取出来<br>（4）将取出的NSOperation封装的操作放到⼀条新线程中执⾏</p>
<h5 id="2-NSOperation的子类"><a href="#2-NSOperation的子类" class="headerlink" title="2.NSOperation的子类"></a>2.NSOperation的子类</h5><p>NSOperation是个抽象类,并不具备封装操作的能力,必须使⽤它的子类。<br>使用NSOperation⼦类的方式有3种：<br>（1）NSInvocationOperation<br>（2）NSBlockOperation<br>（3）自定义子类继承NSOperation,实现内部相应的⽅法</p>
<p><strong>注：</strong></p>
<ul>
<li>默认情况下，如果操作没有放到队列中queue中，都是同步执行。只有将NSOperation放到一个NSOperationQueue中,才会异步执行操作。</li>
<li>只要NSBlockOperation封装的操作数大于1,就会异步执行操作。</li>
</ul>
<h5 id="3-NSOperationQueue"><a href="#3-NSOperationQueue" class="headerlink" title="3.NSOperationQueue"></a>3.NSOperationQueue</h5><p>NSOperationQueue的作⽤：NSOperation可以调⽤start⽅法来执⾏任务,但默认是同步执行的。如果将NSOperation添加到NSOperationQueue(操作队列)中,系统会自动异步执行NSOperation中的操作。<br><strong>添加操作到NSOperationQueue中，自动执行操作，自动开启线程。</strong></p>
<p>NSOperationQueue 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 NSOperation 的子类来表述。</p>
<h5 id="4-NSOperation基本操作"><a href="#4-NSOperation基本操作" class="headerlink" title="4.NSOperation基本操作"></a>4.NSOperation基本操作</h5><ul>
<li>并发数：<code>-maxConcurrentOperationCount</code>；</li>
<li>队列的取消、暂停和恢复：<code>-cancelAllOperations</code>，<code>-setSuspended:</code>；</li>
<li>操作优先级：<code>-setQueuePriority:</code>；</li>
<li>操作依赖：<ul>
<li><code>-addDependency:</code></li>
<li>可以在不同queue的NSOperation之间创建依赖关系</li>
<li>避免循环依赖</li>
</ul>
</li>
<li>监听操作的执行完毕：<br>  <code>- (void)setCompletionBlock:(void (^)(void))block;</code></li>
</ul>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">//监听操作的执行完毕</span></div><div class="line">operation.completionBlock=^&#123;</div><div class="line">	<span class="comment">//.....操作完成后继续进行的操作</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li>Difference between a method and a function:<br>  <a href="http://stackoverflow.com/questions/155609/difference-between-a-method-and-a-function" target="_blank" rel="external">http://stackoverflow.com/questions/155609/difference-between-a-method-and-a-function</a></li>
<li>文顶顶的多线程系列：<br>  <a href="http://www.cnblogs.com/wendingding/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87/" target="_blank" rel="external">http://www.cnblogs.com/wendingding/tag/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87/</a></li>
<li><a href="http://blog.cnbluebox.com/blog/2014/07/01/cocoashen-ru-xue-xi-nsoperationqueuehe-nsoperationyuan-li-he-shi-yong/" target="_blank" rel="external">http://blog.cnbluebox.com/blog/2014/07/01/cocoashen-ru-xue-xi-nsoperationqueuehe-nsoperationyuan-li-he-shi-yong/</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何查看和修改Mac中的环境变量]]></title>
      <url>http://www.calios.gq/2016/02/17/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%92%8C%E4%BF%AE%E6%94%B9Mac%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h4 id="显示当前的环境变量列表"><a href="#显示当前的环境变量列表" class="headerlink" title="显示当前的环境变量列表"></a>显示当前的环境变量列表</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ printenv</div><div class="line">PATH=<span class="regexp">/Library/</span>Frameworks<span class="regexp">/Python.framework/</span>Versions<span class="regexp">/3.4/</span><span class="string">bin:</span><span class="regexp">/Users/</span>calios<span class="regexp">/.cabal/</span><span class="string">bin:</span><span class="regexp">/Applications/</span>ghc<span class="number">-7.8</span><span class="number">.4</span>.app<span class="regexp">/Contents/</span><span class="string">bin:</span><span class="regexp">/Library/</span>Frameworks<span class="regexp">/Python.framework/</span>Versions<span class="regexp">/3.4/</span><span class="string">bin:</span><span class="regexp">/Users/</span>calios<span class="regexp">/.cabal/</span><span class="string">bin:</span><span class="regexp">/Applications/</span>ghc<span class="number">-7.8</span><span class="number">.4</span>.app<span class="regexp">/Contents/</span><span class="string">bin:</span><span class="regexp">/Library/</span>Frameworks<span class="regexp">/Python.framework/</span>Versions<span class="regexp">/3.4/</span><span class="string">bin:</span><span class="regexp">/Users/</span>calios<span class="regexp">/.cabal/</span><span class="string">bin:</span><span class="regexp">/Applications/</span>ghc<span class="number">-7.8</span><span class="number">.4</span>.app<span class="regexp">/Contents/</span><span class="string">bin:</span><span class="regexp">/usr/</span>local<span class="regexp">/bin:/</span>usr<span class="regexp">/bin:/</span><span class="string">bin:</span><span class="regexp">/usr/</span><span class="string">sbin:</span><span class="regexp">/sbin:/</span>opt<span class="regexp">/X11/</span>bin</div><div class="line">ZSH=<span class="regexp">/Users/</span>calios/.oh-my-zsh</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="查看当前使用的shell"><a href="#查看当前使用的shell" class="headerlink" title="查看当前使用的shell"></a>查看当前使用的shell</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo <span class="variable">$SHELL</span></div><div class="line">    <span class="regexp">/bin/</span>zsh</div></pre></td></tr></table></figure>
<p>所以，我现在使用的shell是<em>zsh</em>，而不是默认的<em>bash</em>。那么，是不是应该修改<em>zsh</em>的相应配置文件呢？</p>
<p>找到<em>zsh</em>配置文件所在路径<code>~/.zshrc</code>并打开（这里指定了Sublime打开，因为有语法支持～）：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">open</span> -<span class="keyword">a</span> Sublime\ Text ~/.zshrc</div></pre></td></tr></table></figure></p>
<p>发现里面有不少的配置选项，添加上如下一行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GOPATH=<span class="string">"<span class="variable">$HOME</span>/Documents/MyWorkspace/GoWorkspace"</span></div></pre></td></tr></table></figure></p>
<p>保存，退出。</p>
<h4 id="设置临时环境变量"><a href="#设置临时环境变量" class="headerlink" title="设置临时环境变量"></a>设置临时环境变量</h4><p>值得一提的是，你还可以通过使用bash的<code>export</code>命令设置临时的环境变量，只要当前shell是激活状态，临时环境变量就可以使用。比如，你希望给<code>~/bin/</code>添加一个临时路径，你可以直接跑这行命令：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>export PATH=<span class="variable">$PATH</span><span class="symbol">:~/bin</span></div></pre></td></tr></table></figure></p>
<p>后面的<code>$PATH</code>意味着在原有值的基础上，拼接上<code>~/bin/</code>，再将新值赋给<code>PATH</code>.</p>
<p>再强调一遍，只有保存到配置文件中的环境变量才是持久的，否则只是临时环境变量。</p>
<hr>
<p><strong>Ref: </strong></p>
<ul>
<li><p><a href="http://osxdaily.com/2015/07/28/set-enviornment-variables-mac-os-x/" target="_blank" rel="external">http://osxdaily.com/2015/07/28/set-enviornment-variables-mac-os-x/</a></p>
</li>
<li><p><a href="http://hathaway.cc/post/69201163472/how-to-edit-your-path-environment-variables-on-mac" target="_blank" rel="external">http://hathaway.cc/post/69201163472/how-to-edit-your-path-environment-variables-on-mac</a></p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Terminal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[SourceRead]-PureLayout]]></title>
      <url>http://www.calios.gq/2016/02/15/%5BSourceRead%5D-PureLayout/</url>
      <content type="html"><![CDATA[<p>Here’s part of usage of <a href="https://github.com/PureLayout/PureLayout" title="https://github.com/PureLayout/PureLayout" target="_blank" rel="external">PureLayout</a>. I once ignored some of them for long and complained about the unhandy. Now I have to admit that it’s really a strong framework to use.</p>
<p>1.Working with Arrays of Views<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">NSArray *views = @[self.redView, self.blueView, self.yellowView, self.greenView];</div><div class="line"><span class="comment">// Match the widths of all the views</span></div><div class="line">[views <span class="string">autoMatchViewsDimension:</span>ALDimensionWidth];</div><div class="line"></div><div class="line"><span class="comment">// Pin the red view 20 pt from the top layout guide of the view controller</span></div><div class="line">[self.redView <span class="string">autoPinToTopLayoutGuideOfViewController:</span>self <span class="string">withInset:</span><span class="number">20.0</span>];</div><div class="line"></div><div class="line"><span class="comment">// Loop over the views, attaching the left edge to the previous view's right edge,</span></div><div class="line"><span class="comment">// and the top edge to the previous view's bottom edge</span></div><div class="line">[[views firstObject] <span class="string">autoPinEdgeToSuperviewEdge:</span>ALEdgeLeft];</div><div class="line">UIView *previousView = nil;</div><div class="line"><span class="keyword">for</span> (UIView *view <span class="keyword">in</span> views) &#123;</div><div class="line">	<span class="keyword">if</span> (previousView) &#123;</div><div class="line">	    [view <span class="string">autoPinEdge:</span>ALEdgeLeft <span class="string">toEdge:</span>ALEdgeRight <span class="string">ofView:</span>previousView];</div><div class="line">	    [view <span class="string">autoPinEdge:</span>ALEdgeTop <span class="string">toEdge:</span>ALEdgeBottom <span class="string">ofView:</span>previousView];</div><div class="line">	&#125;</div><div class="line">	previousView = view;</div><div class="line">&#125;</div><div class="line">[[views lastObject] <span class="string">autoPinEdgeToSuperviewEdge:</span>ALEdgeRight];</div></pre></td></tr></table></figure></p>
<p>2.Cross-Attribute Constraints<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// <span class="keyword">Use</span> a <span class="keyword">cross</span>-<span class="keyword">attribute</span> <span class="keyword">constraint</span> <span class="keyword">to</span> constrain an ALAxis <span class="keyword">to</span> an ALEdge.</div><div class="line">// Note that it <span class="keyword">is</span> <span class="keyword">safe</span> <span class="keyword">to</span> <span class="keyword">cast</span> <span class="keyword">from</span> a more specific <span class="keyword">type</span> <span class="keyword">like</span> ALEdge, ALAxis, etc <span class="keyword">to</span> the more generic <span class="keyword">type</span> ALAttribute.</div><div class="line">// <span class="keyword">As</span> such, the below two <span class="keyword">lines</span> <span class="keyword">are</span> functionally identical. <span class="keyword">Use</span> whichever you prefer.</div><div class="line">// [self.redView autoConstrainAttribute:ALAttributeHorizontal toAttribute:ALAttributeBottom ofView:self.blueView];</div><div class="line">[self.redView autoConstrainAttribute:(ALAttribute)ALAxisHorizontal toAttribute:(ALAttribute)ALEdgeBottom ofView:self.blueView]; // same as the above commented-out line</div></pre></td></tr></table></figure></p>
<p>Here’s an image that helps with understanding.</p>
<p><img src="http://i4.tietuku.com/ee0da65ffdfc5875.png" alt="" title="http://i4.tietuku.com/ee0da65ffdfc5875.png"></p>
<p>3.Animating Constraints<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)animateLayoutWithSpringAnimation</div><div class="line">&#123;</div><div class="line">	<span class="comment">// These 2 lines will cause -[updateViewConstraints] to be called again on this view controller, where the constraints will be adjusted to the new state</span></div><div class="line">	[<span class="keyword">self</span>.view setNeedsUpdateConstraints];</div><div class="line">	[<span class="keyword">self</span>.view updateConstraintsIfNeeded];</div><div class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">1.0</span></div><div class="line">			                  delay:<span class="number">0.0</span></div><div class="line">			 usingSpringWithDamping:<span class="number">0.6</span></div><div class="line">			  initialSpringVelocity:<span class="number">0</span></div><div class="line">			                options:<span class="number">0</span></div><div class="line">			             animations:^&#123;</div><div class="line">	                 [<span class="keyword">self</span>.view layoutIfNeeded]; <span class="comment">// this is what actually causes the views to animate to their new layout</span></div><div class="line">	             &#125;</div><div class="line">			             completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line">		                 <span class="comment">// Run the animation again in the other direction</span></div><div class="line">	                 <span class="keyword">self</span>.isAnimatingToEndState = !<span class="keyword">self</span>.isAnimatingToEndState;</div><div class="line">	                 <span class="keyword">if</span> (<span class="keyword">self</span>.navigationController) &#123; <span class="comment">// this will be nil if this view controller is no longer in the navigation stack (stops animation when this view controller is no longer onscreen)</span></div><div class="line">	                     [<span class="keyword">self</span> animateLayoutWithSpringAnimation];</div><div class="line">	                 &#125;</div><div class="line">       &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4.Constraint Identifier(iOS 7.0+)<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[NSLayoutConstraint <span class="string">autoSetIdentifier:</span>@<span class="string">"Pin Container View Edges"</span> <span class="string">forConstraints:</span>^&#123;</div><div class="line">	[self.containerView <span class="string">autoPinToTopLayoutGuideOfViewController:</span>self <span class="string">withInset:</span><span class="number">10.0</span>];</div><div class="line">	[self.containerView <span class="string">autoPinEdgesToSuperviewEdgesWithInsets:</span>UIEdgeInsetsMake(<span class="number">0.0</span>, <span class="number">10.0</span>, <span class="number">10.0</span>, <span class="number">10.0</span>) <span class="string">excludingEdge:</span>ALEdgeTop];</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<p>5.Constraints Without Installing<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.horizontalLayoutConstraints = [<span class="built_in">NSLayoutConstraint</span> autoCreateAndInstallConstraints:^&#123;</div><div class="line">	[views autoSetViewsDimension:ALDimensionHeight toSize:<span class="number">40.0</span>];</div><div class="line">	[views autoDistributeViewsAlongAxis:ALAxisHorizontal alignedTo:ALAttributeHorizontal withFixedSpacing:<span class="number">10.0</span> insetSpacing:<span class="literal">YES</span> matchedSizes:<span class="literal">YES</span>];</div><div class="line">	[<span class="keyword">self</span>.redView autoAlignAxisToSuperviewAxis:ALAxisHorizontal];</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.isShowingHorizontalLayout) &#123;</div><div class="line">    [<span class="keyword">self</span>.verticalLayoutConstraints autoRemoveConstraints];</div><div class="line">    [<span class="keyword">self</span>.horizontalLayoutConstraints autoInstallConstraints];</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    [<span class="keyword">self</span>.horizontalLayoutConstraints autoRemoveConstraints];</div><div class="line">    [<span class="keyword">self</span>.verticalLayoutConstraints autoInstallConstraints];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> SourceRead </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[SourceRead]-SDWebImage-3]]></title>
      <url>http://www.calios.gq/2016/02/15/%5BSourceRead%5D-SDWebImage-3/</url>
      <content type="html"><![CDATA[<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/QQ20160216-0@2x.png" alt="" title="SDWebImage系列"></p>
<p>沿着上面这个图，一层一层剥到了<code>SDWebImageDownloader</code>的<code>- downloadImageWithURL:options:progress:completed:</code>方法，终于看到了大片的原生代码在向我们招手。。。</p>
<p>纵观这个方法，就调用了一下<code>-addProgressCallback:completedBlock:forURL:createCallback:</code>，而这个方法并不复杂，主要展示了一下<code>self.URLCallbacks</code>这个字典的内部组成，在此略去不提。</p>
<p>还是回来看<code>- downloadImageWithURL:options:progress:completed:</code>。</p>
<h3 id="［1］Cache-Control"><a href="#［1］Cache-Control" class="headerlink" title="［1］Cache-Control"></a>［1］Cache-Control</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSMutableURLRequest *request = [[NSMutableURLRequest alloc] <span class="string">initWithURL:</span>url <span class="string">cachePolicy:</span>(options &amp; SDWebImageDownloaderUseNSURLCache ? NSURLRequestUseProtocolCachePolicy : NSURLRequestReloadIgnoringLocalCacheData) <span class="string">timeoutInterval:</span>timeoutInterval];</div></pre></td></tr></table></figure>
<p>基本的<code>NSMutableURLRequest</code>初始化，没什么问题，主要看缓存策略：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="name">options</span> &amp; SDWebImageDownloaderUseNSURLCache ? NSURLRequestUseProtocolCachePolicy : NSURLRequestReloadIgnoringLocalCacheData)</div></pre></td></tr></table></figure></p>
<p>先来简单了解一下Cache-Control：</p>
<blockquote>
<p>每个资源都可以通过 Cache-Control HTTP 头来定义自己的缓存策略<br>Cache-Control 指令控制谁在什么条件下可以缓存响应以及可以缓存多久</p>
</blockquote>
<p>更多深入内容可以看<a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching" title="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching" target="_blank" rel="external">这里</a>。</p>
<ul>
<li><code>SDWebImageDownloaderUseNSURLCache</code>: 默认情况下，<code>SDWebImage</code>是不使用<code>NSURLCache</code>的，如果使用这个选项，那么就将<code>NSURLCache</code>的默认的缓存策略作为缓存策略，即<code>NSURLRequestUseProtocolCachePolicy</code>。</li>
<li><code>NSURLRequestUseProtocolCachePolicy</code>: 这个缓存策略是URL请求的默认策略，即在指定的URL请求中使用协议中实现了的缓存逻辑。</li>
<li><code>NSURLRequestReloadIgnoringLocalCacheData</code>: 指定了某个URL的数据要从原始地址获取，无视已有缓存。</li>
</ul>
<p>所以，这里的缓存策略是：如果传入的<code>option</code>是<code>SDWebImageDownloaderUseNSURLCache</code>，就用NRURLCache的默认缓存策略，否则就无视本地缓存，重新获取。</p>
<h3 id="［2］NSMutableURLRequest的几个属性"><a href="#［2］NSMutableURLRequest的几个属性" class="headerlink" title="［2］NSMutableURLRequest的几个属性"></a>［2］<code>NSMutableURLRequest</code>的几个属性</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">request.<span class="attr">HTTPShouldHandleCookies</span> = (options &amp; SDWebImageDownloaderHandleCookies);</div><div class="line">request.<span class="attr">HTTPShouldUsePipelining</span> = YES;</div><div class="line">request.<span class="attr">allHTTPHeaderFields</span> = wself.HTTPHeaders; // 这里略去了原代码中的<span class="keyword">if</span>判断</div></pre></td></tr></table></figure>
<ul>
<li><code>HTTPShouldHandleCookies</code>: 是否对当前请求使用默认cookie。默认为YES。也就是说，默认情况下cookie是由cookie manager存储和发送的。</li>
<li><code>HTTPShouldUsePipelining</code>: 是否等待前一个请求响应后再发送当前请求。YES是不等，NO是等。（第三个选项是爱等不等。。。XD）</li>
<li><code>allHTTPHeaderFields</code>: 用设置的NSDictionary（key和value都需为NSString）来替代之前可能存在的所有header字段。</li>
</ul>
<p>比如初始化时的<code>HTTPHeaders</code>长这样：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SD_WEBP</span></div><div class="line">    <span class="variable">_HTTPHeaders</span> = [@&#123;@<span class="string">"Accept"</span>: @<span class="string">"image/webp,image/*;q=0.8"</span>&#125; mutableCopy];</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="variable">_HTTPHeaders</span> = [@&#123;@<span class="string">"Accept"</span>: @<span class="string">"image/*;q=0.8"</span>&#125; mutableCopy];</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<h3 id="［3］将Class作为属性值存储"><a href="#［3］将Class作为属性值存储" class="headerlink" title="［3］将Class作为属性值存储"></a>［3］将Class作为属性值存储</h3><p>一个开发的小技巧：<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 头文件中的声明</div><div class="line">@<span class="keyword">property</span> (assign, nonatomic) <span class="class"><span class="keyword">Class</span> <span class="title">operationClass</span>;</span></div><div class="line">// 初始化指定具体<span class="class"><span class="keyword">class</span></span></div><div class="line">    _operationClass = [SDWebImageDownloaderOperation <span class="class"><span class="keyword">class</span>];</span></div><div class="line">// 使用时调用具体<span class="class"><span class="keyword">class</span>的方法</span></div><div class="line">operation = [[wself.operationClass alloc] initWithRequest:request</div><div class="line">options:options progress:^(NSInteger receivedSize, NSInteger expectedSize) &#123;</div><div class="line">    ...</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<h3 id="［4］NSURLCredential"><a href="#［4］NSURLCredential" class="headerlink" title="［4］NSURLCredential"></a>［4］<code>NSURLCredential</code></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (wself.urlCredential) &#123;</div><div class="line">      operation.credential = wself.urlCredential;</div><div class="line"> &#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (wself.username &amp;&amp; wself.password) &#123;</div><div class="line">      operation.credential = [NSURLCredential <span class="string">credentialWithUser:</span>wself.username <span class="string">password:</span>wself.password <span class="string">persistence:</span>NSURLCredentialPersistenceForSession];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的<code>urlCredential</code>是一个<code>NSURLCredential</code>类的属性。如果这个属性存在就用这个属性，没有的话，就用用户名和密码创建一个仅存储于当前session中的<code>NSURLCredential</code>。</p>
<p>那么，<code>NSURLCredential</code>是个神马呢？先引用一段MK的讲解来了解下HTTP认证的机理：</p>
<blockquote>
<p>当客户端向服务器发起资源请求时，它会发起一个以文件名结尾的GET请求。如果服务器检查到资源是被保护的，就会返回一个header中有WWW-Authenticate的401消息，告知客户端“未被授权”。WWW-Authenticate这个header字段可能有值，由相应机制来决定这个值是“Basic”还是“Digest”。<br>当客户端接收到这个授权挑战（challenge）时，它就要以指定格式将用户授权信息发过去。对于基本的认证，通常是在header的认证字段中放上base64加密过的用户名和密码。对于摘要式认证，就要略复杂一点。客户端在header的认证字段中要放的值也更加高精尖一些。幸运的是，作为Objective-C的开发者们，CoreFoundation类已经把这些都封装好了。</p>
</blockquote>
<p>一旦请求的URL需要授权，即服务器返回了含有WWW-Authenticate的header，<code>NSURLConnection</code>的<code>NSURLCredential</code>相关的代理方法<code>-connection:willSendRequestForAuthenticationChallenge:</code>就会被调用。</p>
<p>全局搜<code>willSendRequestForAuthenticationChallenge</code>，果然在<code>SDWebImageDownloaderOperation.m</code>的末尾找到了一段。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">connection:</span>(NSURLConnection *)connection <span class="string">willSendRequestForAuthenticationChallenge:</span>(NSURLAuthenticationChallenge *)challenge&#123;</div><div class="line">    <span class="keyword">if</span> ([challenge.protectionSpace.authenticationMethod <span class="string">isEqualToString:</span>NSURLAuthenticationMethodServerTrust]) &#123;</div><div class="line">        <span class="comment">// `SDWebImageDownloaderAllowInvalidSSLCertificates`:Enable to allow untrusted SSL certificates.</span></div><div class="line">        <span class="comment">// 不允许使用不可信的SSL证书 －》 只允许使用可信证书</span></div><div class="line">        <span class="keyword">if</span> (!(self.options &amp; SDWebImageDownloaderAllowInvalidSSLCertificates) &amp;&amp;</div><div class="line">            [challenge.sender <span class="string">respondsToSelector:</span><span class="meta">@selector</span>(<span class="string">performDefaultHandlingForAuthenticationChallenge:</span>)]) &#123;</div><div class="line">            <span class="comment">// 让认证挑战的发送者按照系统指定的进行默认操作。</span></div><div class="line">            [challenge.sender <span class="string">performDefaultHandlingForAuthenticationChallenge:</span>challenge];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 新建一个已经有一次可信任握手的`NSURLCredential`。</span></div><div class="line">            NSURLCredential *credential = [NSURLCredential <span class="string">credentialForTrust:</span>challenge.protectionSpace.serverTrust];</div><div class="line">            <span class="comment">// 让认证挑战的发送者使用新建的这个credential来应答认证挑战。</span></div><div class="line">            [[challenge sender] <span class="string">useCredential:</span>credential <span class="string">forAuthenticationChallenge:</span>challenge];</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> ([challenge previousFailureCount] == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (self.credential) &#123;</div><div class="line">                [[challenge sender] <span class="string">useCredential:</span>self.credential <span class="string">forAuthenticationChallenge:</span>challenge];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                [[challenge sender] <span class="string">continueWithoutCredentialForAuthenticationChallenge:</span>challenge];</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            [[challenge sender] <span class="string">continueWithoutCredentialForAuthenticationChallenge:</span>challenge];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在细看代理方法实现前先来了解一下这几个陌生的类：</p>
<ul>
<li><code>NSURLAuthenticationChallenge</code>: 这个类是认证挑战类，客户端接受挑战就意味着要提供挑战的凭证（比如用户名、密码等等）。</li>
<li><code>NSURLCredential</code>: 这个类是代表着认证凭证的一个不可变的对象，它由指定类型的认证信息和可用的存储时间组成。</li>
</ul>
<p>是不是有种每个字都认识连起来就晕了的感觉？打个比方理解下～</p>
<p>当～～～～ 夕阳余晖已散，一个笑面书生要从东城门口入城，守城士兵一枪拦住：“呔！何方人氏，敢夜闯我四方城？有通关文书否？”（401，未被授权，遭到授权挑战，<code>-connection:willSendRequestForAuthenticationChallenge:</code>被调用）书生上前一步，拱手朗声道：“在下皇甫仁和，应城主邀请入城一叙。有城主亲笔书函在此。”说着，从袖中抽出一封信（即认证的凭证<code>NSURLCredential</code>），递了过去（向<code>NSURLAuthenticationChallenge</code>挑战的发送者提供<code>NSURLCredential</code>凭证）。士兵接过信，见确为城主字迹，信中的邀请日期正是当日（该凭证的有效期），且有四方城印一枚附在信尾（认证需要的详细信息），方信了。随机撤了长枪，甩手道：“请！”（认证通过了，可以获取资源了）</p>
<h3 id="［4］operation的LIFO执行顺序"><a href="#［4］operation的LIFO执行顺序" class="headerlink" title="［4］operation的LIFO执行顺序"></a>［4］operation的LIFO执行顺序</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (wself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) &#123;</div><div class="line">     <span class="comment">// 将最新添加的operation作为最后一个的operation的依赖，也就是说，要先执行最新添加的operation，再往前依次执行，即实现了“后进先出LIFO”。</span></div><div class="line">     [wself.lastAddedOperation <span class="string">addDependency:</span>operation];</div><div class="line">     wself.lastAddedOperation = operation;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li>HTTP缓存：<br>  <a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching" target="_blank" rel="external">https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching</a></li>
<li>Authenticating with a RESTful service using NSURLCredential：<br>  <a href="http://blog.mugunthkumar.com/articles/iphone-tutorial-authenticating-with-a-restful-service-using-nsurlcredential/" target="_blank" rel="external">http://blog.mugunthkumar.com/articles/iphone-tutorial-authenticating-with-a-restful-service-using-nsurlcredential/</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> SourceRead </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[SourceRead]-SDWebImage-2]]></title>
      <url>http://www.calios.gq/2016/01/31/%5BSourceRead%5D-SDWebImage-2/</url>
      <content type="html"><![CDATA[<p>在我们直接使用的核心函数<code>-sd_setImageWithURL:forState:placeholderImage:options:completed:</code>中，主要起下载作用的方法是位于<code>SDWebImageManager</code>类中 <code>- downloadImageWithURL: options:progress:completed:</code>函数，具体来说，若图片不在cache中，就根据给定的URL来下载图片，否则返回cache中的图片。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Downloads <span class="keyword">the</span> image <span class="keyword">at</span> <span class="keyword">the</span> <span class="keyword">given</span> URL <span class="keyword">if</span> <span class="keyword">not</span> present <span class="keyword">in</span> cache <span class="keyword">or</span> <span class="literal">return</span> <span class="keyword">the</span> cached <span class="built_in">version</span> otherwise.</div><div class="line"> *</div><div class="line"> * @param url            The URL <span class="keyword">to</span> <span class="keyword">the</span> image</div><div class="line"> * @param options        A mask <span class="keyword">to</span> specify options <span class="keyword">to</span> use <span class="keyword">for</span> this request</div><div class="line"> * @param progressBlock  A block called <span class="keyword">while</span> image <span class="keyword">is</span> downloading</div><div class="line"> * @param completedBlock A block called when operation has been completed.</div><div class="line"> *</div><div class="line"> *   This parameter <span class="keyword">is</span> required.</div><div class="line"> *</div><div class="line"> *   This block has no <span class="literal">return</span> value <span class="keyword">and</span> takes <span class="keyword">the</span> requested UIImage <span class="keyword">as</span> <span class="keyword">first</span> parameter.</div><div class="line"> *   In case <span class="keyword">of</span> <span class="keyword">error</span> <span class="keyword">the</span> image parameter <span class="keyword">is</span> nil <span class="keyword">and</span> <span class="keyword">the</span> <span class="keyword">second</span> parameter may <span class="keyword">contain</span> an NSError.</div><div class="line"> *</div><div class="line"> *   The <span class="keyword">third</span> parameter <span class="keyword">is</span> an `SDImageCacheType` enum indicating <span class="keyword">if</span> <span class="keyword">the</span> image was retrieved <span class="keyword">from</span> <span class="keyword">the</span> <span class="keyword">local</span> cache</div><div class="line"> *   <span class="keyword">or</span> <span class="keyword">from</span> <span class="keyword">the</span> memory cache <span class="keyword">or</span> <span class="keyword">from</span> <span class="keyword">the</span> network.</div><div class="line"> *</div><div class="line"> *   The <span class="keyword">last</span> parameter <span class="keyword">is</span> <span class="keyword">set</span> <span class="keyword">to</span> NO when <span class="keyword">the</span> SDWebImageProgressiveDownload option <span class="keyword">is</span> used <span class="keyword">and</span> <span class="keyword">the</span> image <span class="keyword">is</span></div><div class="line"> *   downloading. This block <span class="keyword">is</span> thus called repeatedly <span class="keyword">with</span> a partial image. When image <span class="keyword">is</span> fully downloaded, <span class="keyword">the</span></div><div class="line"> *   block <span class="keyword">is</span> called a <span class="keyword">last</span> <span class="built_in">time</span> <span class="keyword">with</span> <span class="keyword">the</span> full image <span class="keyword">and</span> <span class="keyword">the</span> <span class="keyword">last</span> parameter <span class="keyword">set</span> <span class="keyword">to</span> YES.</div><div class="line"> *</div><div class="line"> * @<span class="literal">return</span> Returns an NSObject conforming <span class="keyword">to</span> SDWebImageOperation. Should be an instance <span class="keyword">of</span> SDWebImageDownloaderOperation</div><div class="line"> */</div><div class="line">- (<span class="built_in">id</span> &lt;SDWebImageOperation&gt;)downloadImageWithURL:(NSURL *)url</div><div class="line">                                         options:(SDWebImageOptions)options</div><div class="line">                                        progress:(SDWebImageDownloaderProgressBlock)progressBlock</div><div class="line">                                       completed:(SDWebImageCompletionWithFinishedBlock)completedBlock;</div></pre></td></tr></table></figure></p>
<p>正文走起。</p>
<h3 id="［1］代码的容错能力"><a href="#［1］代码的容错能力" class="headerlink" title="［1］代码的容错能力"></a>［1］代码的容错能力</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 常见的错误是把NSString对象代替NSURL传进来，作为URL。而奇怪的是，Xcode并不会因此给出警告，所以这里给出了容错机制，允许传入NSString。</span></div><div class="line"><span class="keyword">if</span> ([url <span class="string">isKindOfClass:</span>NSString.<span class="keyword">class</span>]) &#123;</div><div class="line">url = [NSURL <span class="string">URLWithString:</span>(NSString *)url];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 避免类似用NSNull来替代NSURL作为参数传入，导致程序崩溃的问题。</span></div><div class="line"><span class="keyword">if</span> (![url <span class="string">isKindOfClass:</span>NSURL.<span class="keyword">class</span>]) &#123;</div><div class="line">url = nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不记得哪个老师说过，说一个function能接受的参数尽可能的“宽”，返回的值要尽可能的“窄”。我理解的是，写对外的代码时，对接收的参数的容错能力（健壮性）要尽可能的强，不要稍有差错就崩溃罢工；而自己代码返回的值要尽可能的精确，如果能返回一个自定义的UITableView，就不要返回UITableView。</p>
<h3 id="［2］-synchronized"><a href="#［2］-synchronized" class="headerlink" title="［2］@synchronized()"></a>［2］@synchronized()</h3><p>接下来的代码中，这样的小段出现了很多次：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@synchronized</span> (<span class="keyword">self</span>.failedURLs) &#123;</div><div class="line">    isFailedUrl = [<span class="keyword">self</span>.failedURLs <span class="symbol">containsObject:</span>url];</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="variable">@synchronized</span> (<span class="keyword">self</span>.runningOperations) &#123;</div><div class="line">    [<span class="keyword">self</span>.runningOperations <span class="symbol">removeObject:</span>operation];</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="variable">@synchronized</span> (<span class="keyword">self</span>.failedURLs) &#123;</div><div class="line">    [<span class="keyword">self</span>.failedURLs <span class="symbol">addObject:</span>url];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了第一次是判断集合中是否包含某元素外，其余均是对于集合或数组进行元素添加或者元素删除。那么，<code>@synchronized()</code>这家伙是干嘛的呢？</p>
<p>根据苹果的官方文档：</p>
<blockquote>
<p><code>@synchronized()</code>是OC中一种方便地创建互斥锁的方式 —— 它可以防止不同线程在同一时间执行区块中的代码。</p>
</blockquote>
<p>也就是说，它主要用在多线程编程中，所以，我们遇到多线程编程时再来深究。这里简单了解即可。</p>
<h3 id="［3］函数说明"><a href="#［3］函数说明" class="headerlink" title="［3］函数说明"></a>［3］函数说明</h3><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/QQ20160215-0.png" alt="" title="函数说明"></p>
<p>看这里的代码：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 通过图片的url来获取<span class="keyword">cache</span>中对应的<span class="keyword">key</span>。</div><div class="line">NSString *<span class="keyword">key</span> = [<span class="keyword">self</span> cacheKeyForURL:<span class="keyword">url</span>];</div><div class="line"></div><div class="line">// 如果key对应的图片存在于<span class="keyword">cache</span>中，就通过这个<span class="keyword">key</span>来获取图片。</div><div class="line">operation.cacheOperation = [self.imageCache queryDiskCacheForKey:<span class="keyword">key</span> done:^(UIImage *image, SDImageCacheType cacheType)&#123;</div><div class="line">...</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>
<h3 id="［4］磁盘缓存（disk-cache）-和-内存缓存（memory-cache）"><a href="#［4］磁盘缓存（disk-cache）-和-内存缓存（memory-cache）" class="headerlink" title="［4］磁盘缓存（disk cache） 和 内存缓存（memory cache）"></a>［4］磁盘缓存（disk cache） 和 内存缓存（memory cache）</h3><p><code>-queryDiskCacheForKey:done:</code>的第二个参数是<code>SDWebImageQueryCompletedBlock</code>，这个block中的第二个参数是<code>SDImageCacheType</code>，这个枚举用来标记图片缓存的类型，如磁盘缓存和内存缓存。<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSInteger</span>, <span class="type">SDImageCacheType</span>) &#123;</div><div class="line">    /**</div><div class="line">     * 图片已从网络下载，但缓存不可用。</div><div class="line">     */</div><div class="line">    <span class="type">SDImageCacheTypeNone</span>,</div><div class="line">    /**</div><div class="line">     * 图片在磁盘缓存中。</div><div class="line">     */</div><div class="line">    <span class="type">SDImageCacheTypeDisk</span>,</div><div class="line">    /**</div><div class="line">     * 图片在内存缓存中。</div><div class="line">     */</div><div class="line">    <span class="type">SDImageCacheTypeMemory</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>通常一个缓存是由内存缓存和磁盘缓存组成，内存缓存提供容量小但高速的存取功能，磁盘缓存提供大容量但低速的持久化存储。不同类别的缓存有不同的第三方类库支持，<a href="http://blog.ibireme.com/2015/10/26/yycache/" title="http://blog.ibireme.com/2015/10/26/yycache/" target="_blank" rel="external">这里</a>有一篇各种cache类库的性能对比，按需备查。</p>
<p>我们接着点到<code>SDImageCache.m</code>中去看<code>-queryDiskCacheForKey:done:</code>的实现。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">    - (<span class="built_in">NSOperation</span> *)queryDiskCacheForKey:(<span class="built_in">NSString</span> *)key done:(SDWebImageQueryCompletedBlock)doneBlock &#123;</div><div class="line">    <span class="keyword">if</span> (!doneBlock) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!key) &#123;</div><div class="line">        doneBlock(<span class="literal">nil</span>, SDImageCacheTypeNone);</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 基于上述两种缓存的特征，优先在内存缓存中查找图片。</span></div><div class="line">    <span class="built_in">UIImage</span> *image = [<span class="keyword">self</span> imageFromMemoryCacheForKey:key];</div><div class="line">    <span class="keyword">if</span> (image) &#123;</div><div class="line">        doneBlock(image, SDImageCacheTypeMemory);</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSOperation</span> *operation = [<span class="built_in">NSOperation</span> new];</div><div class="line">    <span class="built_in">dispatch_async</span>(<span class="keyword">self</span>.ioQueue, ^&#123;</div><div class="line">        <span class="keyword">if</span> (operation.isCancelled) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">            <span class="comment">// 在磁盘缓存中查找图片。</span></div><div class="line">            <span class="built_in">UIImage</span> *diskImage = [<span class="keyword">self</span> diskImageForKey:key];</div><div class="line">            <span class="keyword">if</span> (diskImage &amp;&amp; <span class="keyword">self</span>.shouldCacheImagesInMemory) &#123;</div><div class="line">                <span class="built_in">NSUInteger</span> cost = SDCacheCostForImage(diskImage);</div><div class="line">                [<span class="keyword">self</span>.memCache setObject:diskImage forKey:key cost:cost];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">                doneBlock(diskImage, SDImageCacheTypeDisk);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> operation;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="［5］-makeObjectsPerformSelector"><a href="#［5］-makeObjectsPerformSelector" class="headerlink" title="［5］-makeObjectsPerformSelector:"></a>［5］<code>-makeObjectsPerformSelector:</code></h3><p>在全局搜索<code>self.runningOperations</code>时，发现了取消全部operation的方法<code>cancelAll</code>。其中的<code>-makeObjectsPerformSelector:</code>引起了我的注意 —— 看起来是个从没见过的高大上的方法诶～（星星眼✨）<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)cancelAll &#123;</div><div class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>.runningOperations) &#123;</div><div class="line">        <span class="built_in">NSArray</span> *copiedOperations = [<span class="keyword">self</span>.runningOperations <span class="keyword">copy</span>];</div><div class="line">        [copiedOperations makeObjectsPerformSelector:<span class="keyword">@selector</span>(cancel)];</div><div class="line">        [<span class="keyword">self</span>.runningOperations removeObjectsInArray:copiedOperations];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>点进去一瞧，原来是个平时不太用到的<code>NSArray</code>方法：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>makeObjectsPerformSelector:<span class="params">(SEL)</span>aSelector NS_SWIFT_UNAVAILABLE<span class="params">(<span class="string">"Use enumerateObjectsUsingBlock: or a for loop instead"</span>)</span>;</div><div class="line">- <span class="params">(void)</span>makeObjectsPerformSelector:<span class="params">(SEL)</span>aSelector withObject:<span class="params">(nullable id)</span>argument NS_SWIFT_UNAVAILABLE<span class="params">(<span class="string">"Use enumerateObjectsUsingBlock: or a for loop instead"</span>)</span>;</div></pre></td></tr></table></figure></p>
<p>作用是“<a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/index.html#//apple_ref/doc/uid/20000137-BABCBHFG" title="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/index.html#//apple_ref/doc/uid/20000137-BABCBHFG" target="_blank" rel="external">给array中的每个对象都发送一个给定的selector标识的消息</a>”，从第一个对象开始，一直到最后一个对象。</p>
<p>在<code>－cancelAll</code>这个方法中，装着正在运行的operation的数组<code>copiedOperations</code>给每一个operation都发送了一个<code>cancel</code>的消息，并且将数组中的全部元素移除。结束战斗。</p>
<p>再进一步想，<code>NSArray</code>中有这两个方法，<code>NSSet</code>中应该也有这两个方法。都是让子元素批量调用同一方法的作用，不像for循环那样可以区别对待不同元素，这一点需要注意。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> SourceRead </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[SourceRead] SDWebImage-1]]></title>
      <url>http://www.calios.gq/2016/01/28/%5BSourceRead%5D-SDWebImage-1/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/rs/SDWebImage" title="https://github.com/rs/SDWebImage" target="_blank" rel="external">SDWebImage</a>作为一个将服务器远程的图片获取到UIImageView上显示的一个第三方类库，于我而言，最为常用的API莫过于<code>-sd_setImageWithURL: placeholderImage:</code>方法。不妨以此入手，拨开它源代码的神秘面纱。</p>
<hr>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/QQ20160506-0.png" alt="" title="UIImage+WebCache.m片段"></p>
<p>点入.m文件，发现上图中从上至下的一列方法，都依次指向相邻的下一个方法，不过在上层调用时个别参数置为<code>nil</code>或<code>0</code>。直到<code>-sd_setImageWithURL: placeholderImage:options:progress:completed:</code>这个<strong>核心方法</strong>，方见端倪。<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(void)</span>sd_setImageWithURL:<span class="params">(NSURL *)</span>url placeholderImage:<span class="params">(UIImage *)</span>placeholder options:<span class="params">(SDWebImageOptions)</span>options progress:<span class="params">(SDWebImageDownloaderProgressBlock)</span>progressBlock completed:<span class="params">(SDWebImageCompletionBlock)</span>completedBlock &#123;</div><div class="line">    [self sd_cancelCurrentImageLoad];</div><div class="line">    objc_setAssociatedObject<span class="params">(self, &amp;imageURLKey, url, OBJC_ASSOCIATION_RETAIN_NONATOMIC)</span>; // [1]</div><div class="line"></div><div class="line">    if <span class="params">(!(options &amp; SDWebImageDelayPlaceholder)</span>) &#123; // [2]</div><div class="line">        dispatch_main_async_safe<span class="params">(^&#123;</span></div><div class="line">            self.image = placeholder;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="［1］objc-setAssociatedObject"><a href="#［1］objc-setAssociatedObject" class="headerlink" title="［1］objc_setAssociatedObject"></a>［1］objc_setAssociatedObject</h3><h4 id="1-这货是什么？"><a href="#1-这货是什么？" class="headerlink" title="1. 这货是什么？"></a>1. 这货是什么？</h4><p>根据苹果的<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/ObjCRuntimeRef/#//apple_ref/c/func/objc_setAssociatedObject" title="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/ObjCRuntimeRef/#//apple_ref/c/func/objc_setAssociatedObject" target="_blank" rel="external">官方文档</a>：</p>
<blockquote>
<p><code>objc_setAssociatedObject</code>是Objective－C运行时的一个函数，它可以将两个对象关联起来。这个函数需要四个参数：原对象，一个键，一个值，和一个关联策略的常量。其中，键是一个void指针。</p>
<ul>
<li>每个关联的键都必须是唯一的。通常的做法是使用一个静态变量。</li>
<li>关联策略指定了被关联的对象是assigned，retained，copied还是atomic/nonatomic。这个形式和声明property是类似的。可以用常量来指定这种关系。</li>
</ul>
</blockquote>
<h4 id="2-什么场景下会使用？"><a href="#2-什么场景下会使用？" class="headerlink" title="2. 什么场景下会使用？"></a>2. 什么场景下会使用？</h4><p><a href="http://stackoverflow.com/a/16313377/1594792" title="http://stackoverflow.com/a/16313377/1594792" target="_blank" rel="external">abbood</a>将它的使用场景归结为如下几点：</p>
<p>(1)给类别（category）添加实例变量。</p>
<p>假设你想给你不能修改的对象（比如说苹果官方提供的对象，UIImage、UILabel神马的。注意：我们这里讨论的是修改对象本身，不包括将其子类化。）的类别中添加个自定义的属性（<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html" title="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html" target="_blank" rel="external">这几乎是Objective-C最大的缺点</a>），比如说，我们想给<code>UIImage</code>添加一个title的属性。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UIImage-Title.h:</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImage</span>(<span class="title">Title</span>)</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *title;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// UIImage-Title.m:</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> titleKey;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIImage</span>(<span class="title">Title</span>)</span></div><div class="line">- (<span class="built_in">NSString</span> *)title</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, &amp;titleKey);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setTitle:(<span class="built_in">NSString</span> *)title</div><div class="line">&#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;titleKey, title, OBJC_ASSOCIATION_COPY);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>(2)动态地给对象添加状态信息，而这个对象的实例变量即便结合KVO也不能达到目的。（有点拗口，慢慢理解。。）</p>
<p>意思是说，你的对象只有在runtime期间（也就是说，动态地）才能获取状态信息。所以，尽管你可以把状态信息存在实例变量中，但实际上你是要在runtime期间把这个信息和对象绑定起来、并且动态地把它和另一个对象关联，要强调的是<strong>这是一个对象的动态状态</strong>这个事实。</p>
<p>如下是一个不错的<a href="https://github.com/alexzielenski/ZKRevealingTableViewCell/blob/master/vendor/ZKRevealingTableViewCell.m" title="https://github.com/alexzielenski/ZKRevealingTableViewCell/blob/master/vendor/ZKRevealingTableViewCell.m" target="_blank" rel="external">例子</a>中的一个片段，在这个例子中，关联对象使用了KVO通知，但KVO并不是关联对象的必要条件。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> BOOLRevealing;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)isRevealing</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [(<span class="built_in">NSNumber</span>*)objc_getAssociatedObject(<span class="keyword">self</span>, &amp;BOOLRevealing) boolValue];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)_setRevealing:(<span class="built_in">BOOL</span>)revealing</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"isRevealing"</span>];</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;BOOLRevealing,</div><div class="line">       [<span class="built_in">NSNumber</span> numberWithBool:revealing], OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"isRevealing"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>引一段<em>SDWebImage</em>中的代码，纯正的、不含KVO的长这样子：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setShowActivityIndicatorView:(<span class="built_in">BOOL</span>)show&#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;TAG_ACTIVITY_SHOW, [<span class="built_in">NSNumber</span> numberWithBool:show], OBJC_ASSOCIATION_RETAIN);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)showActivityIndicatorView&#123;</div><div class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, &amp;TAG_ACTIVITY_SHOW) boolValue];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中，<code>TAG_ACTIVITY_SHOW</code>的定义如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> TAG_ACTIVITY_SHOW;</div></pre></td></tr></table></figure></p>
<h4 id="3-此处作用"><a href="#3-此处作用" class="headerlink" title="3. 此处作用"></a>3. 此处作用</h4><p>所以，这里相当于给UIImageView的category添加了一个<code>imageURLKey</code>的属性，我猜想，是用来表示图片资源的唯一性的key。</p>
<h3 id="［2］-amp"><a href="#［2］-amp" class="headerlink" title="［2］&amp;"></a>［2］&amp;</h3><h4 id="为什么这里用-amp-而不是-amp-amp-呢？"><a href="#为什么这里用-amp-而不是-amp-amp-呢？" class="headerlink" title="为什么这里用&amp;而不是&amp;&amp;呢？"></a>为什么这里用<code>&amp;</code>而不是<code>&amp;&amp;</code>呢？</h4><p>趁机捡一捡基础知识：</p>
<p><code>&amp;</code>是按位运算的双目运算符，功能是参与将运算的两个数各自对应的二进位相与。<br>例如：9&amp;5可以写算式：00001001 &amp; 00000101 ＝ 00000001，即 9 &amp; 5 = 1。</p>
<p><code>&amp;&amp;</code>检查第一个操作数的值，如果为false，就不再处理第二个操作数，直接返回false。</p>
<p>所以，这里的<code>(options &amp; SDWebImageDelayPlaceholder)</code>，是两个枚举值进行按位运算，而非我们平常写的true/false的布尔判断。</p>
<p>随手点入枚举值的定义，发现这一堆：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">typedef <span class="type">NS_OPTIONS</span>(<span class="type">NSUInteger</span>, <span class="type">SDWebImageOptions</span>) &#123;</div><div class="line">    /**</div><div class="line">     * <span class="type">By</span> default, when a <span class="type">URL</span> fail to be downloaded, the <span class="type">URL</span> is blacklisted so the library won't keep trying.</div><div class="line">     * <span class="type">This</span> flag disable this blacklisting.</div><div class="line">     */</div><div class="line">    <span class="type">SDWebImageRetryFailed</span> = 1 &lt;&lt; 0, // [3]</div><div class="line"></div><div class="line">    /**</div><div class="line">     * <span class="type">By</span> default, image downloads are started during <span class="type">UI</span> interactions, this flags disable this feature,</div><div class="line">     * leading to delayed download on <span class="type">UIScrollView</span> deceleration for instance.</div><div class="line">     */</div><div class="line">    <span class="type">SDWebImageLowPriority</span> = 1 &lt;&lt; 1,</div><div class="line"></div><div class="line">    /**</div><div class="line">     * <span class="type">This</span> flag disables on-disk caching</div><div class="line">     */</div><div class="line">    <span class="type">SDWebImageCacheMemoryOnly</span> = 1 &lt;&lt; 2,</div><div class="line">    ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>而其实<code>SDWebImageDelayPlaceholder</code>正是这一群枚举值中的一个。所以猜测，这句代码的意思是说，传入的<code>option</code>为包含<code>SDWebImageDelayPlaceholder</code>时该如何如何……（可为嘛曲曲折折地不直说呢？=_=|||） 但还是没有解决为什么用<code>&amp;</code>而不用<code>&amp;&amp;</code>的问题。仔细一看，这里的枚举并非自己平时使用的<code>NS_ENUM</code>，而是<code>NS_OPTIONS</code>。简而言之，二者本质上是一样的，<code>NS_ENUM</code>是比较通用的情况，而位掩码时用<code>NS_OPTIONS</code>，具体的解释可以看<a href="http://nshipster.com/ns_enum-ns_options/" title="http://nshipster.com/ns_enum-ns_options/" target="_blank" rel="external">Mattt的这篇</a>。</p>
<p><strong> ———— 20160216更新———— </strong><br>鉴于后期越来越多的位运算出现，过期的薄底子hold不住了。这里举一个例子，更多详细介绍参考<a href="http://www.cnblogs.com/cute/p/3786283.html" title="http://www.cnblogs.com/cute/p/3786283.html" target="_blank" rel="external">这篇</a>。<br><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">typedef NS_OPTIONS(NSUInteger, MyOption) &#123;</div><div class="line">    MyOptionNone = <span class="number">0</span>, <span class="comment">//二进制0000,十进制0</span></div><div class="line">    MyOption1 = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,<span class="comment">//0001,1</span></div><div class="line">    MyOption2 = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,<span class="comment">//0010,2</span></div><div class="line">    MyOption3 = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,<span class="comment">//0100,4</span></div><div class="line">    MyOption4 = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,<span class="comment">//1000,8</span></div><div class="line">&#125;;</div><div class="line">##使用:</div><div class="line"><span class="comment">//声明定义枚举变量</span></div><div class="line">MyOption option = MyOption1 | MyOption2;<span class="comment">//0001 | 0010 = 0011,3</span></div><div class="line"></div><div class="line"><span class="comment">//检查是否包含某选型</span></div><div class="line">if ( <span class="keyword">option</span> &amp; MyOption3 )&#123; <span class="comment">//0011 &amp; 0100 = 0000</span></div><div class="line">     <span class="comment">//包含MyOption3</span></div><div class="line">&#125;else&#123;</div><div class="line">     <span class="comment">//不包含MyOption3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//增加选项:</span></div><div class="line"><span class="keyword">option</span> = <span class="keyword">option</span> | MyOption4;<span class="comment">//0011 | 1000 = 1011, 11</span></div><div class="line"><span class="comment">//减少选项</span></div><div class="line"><span class="keyword">option</span> = <span class="keyword">option</span> &amp; (~MyOption4);<span class="comment">//1011 &amp; (~1000) = 1011 &amp; 0111 = 0011, 3</span></div></pre></td></tr></table></figure></p>
<p>我的理解是，Bitwise <code>AND</code>，即<code>&amp;</code>，相当于两个option取交集；Bitwise <code>OR</code>，即<code>|</code>，相当于两个option取并集。</p>
<p>关于<code>NS_OPTIONS</code>和<code>NS_ENUM</code>的差别，后来查到的orkoden的<a href="http://stackoverflow.com/a/21384671/1594792" target="_blank" rel="external">回答</a>一语中的😂：</p>
<blockquote>
<p>There’s a basic difference between an enum and a bitmask (option). You use an enum to list exclusive states. A bitmask is used when several properties can apply at the same time.</p>
</blockquote>
<p><strong> ———— 20160216更新结束———— </strong></p>
<h3 id="［3］-lt-lt"><a href="#［3］-lt-lt" class="headerlink" title="［3］\&lt;\&lt;"></a>［3］\&lt;\&lt;</h3><p><code>&lt;&lt;</code>为按位左移运算符。具体它<a href="http://stackoverflow.com/questions/141525/what-are-bitwise-shift-bit-shift-operators-and-how-do-they-work" title="http://stackoverflow.com/questions/141525/what-are-bitwise-shift-bit-shift-operators-and-how-do-they-work" target="_blank" rel="external">是什么以及怎样运算</a>，这里略去不提了。简单举例如下：<br>SDWebImageAvoidAutoSetImage<br>    1 &lt;&lt; 2 即 二进制的100 ＝ 十进制 2的平方<br>    1 &lt;&lt; 3 即 二进制的1000 ＝ 十进制 2的3次方</p>
<p>所以，<code>1 &lt;&lt; n</code>，即二进制1左位移n位，相当于十进制2的n次方。</p>
<h3 id="［4］宏定义"><a href="#［4］宏定义" class="headerlink" title="［4］宏定义"></a>［4］宏定义</h3><p><code>dispatch_main_sync_safe</code>和<code>dispatch_main_async_safe</code>是SDWebImage定义的两个宏。若当前是主线程，则执行block；若不是主线程，则在主线程中同步/异步之行block。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#define dispatch_main_sync_safe(block)\</span></div><div class="line">    <span class="keyword">if</span> ([NSThread isMainThread]) &#123;<span class="string">\</span></div><div class="line">        block();<span class="string">\</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;<span class="string">\</span></div><div class="line">        dispatch_sync(dispatch_get_main_queue(), block);<span class="string">\</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">#define dispatch_main_async_safe(block)\</span></div><div class="line">    <span class="keyword">if</span> ([NSThread isMainThread]) &#123;<span class="string">\</span></div><div class="line">        block();<span class="string">\</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;<span class="string">\</span></div><div class="line">        dispatch_async(dispatch_get_main_queue(), block);<span class="string">\</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>每行后面的反斜杠<code>\</code>表示在不影响含义的条件下换行，需注意要在回车之前加反斜杠<code>\</code>。</p>
<p>再看一个常见的宏定义。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define DLog(<span class="name">fmt</span>, ...)    NSLog( @<span class="string">"&lt;%@:(%d)&gt; %s \n ----- %@"</span>, [[NSString stringWithUTF8String<span class="symbol">:__FILE__</span>] lastPathComponent], __LINE__, __func__, [NSString stringWithFormat:(<span class="name">fmt</span>), ##__VA_ARGS__] )</div></pre></td></tr></table></figure></p>
<p>这个用于Log的宏定义中，有这样几点需要解释的：</p>
<ul>
<li><code>DLog(fmt, ...)</code>的第二个参数<code>...</code>。在宏定义的时候，写为…的参数被叫做可变参数(variadic)，其个数是不限定的。在这里，第一个参数fmt将被单独处理，后面的参数将被作为整体看待。</li>
<li>通常前后被<code>__</code>包围的都是预定义宏。如这里的<code>__FILE__</code>（当前文件的绝对路径），<code>__LINE__</code>（在文件中的行数），<code>__func__</code>（该宏所在的行所属的函数名）。</li>
<li><code>##__VA_ARGS__</code>表示的是宏定义中的…中的所有剩余参数。打头的<code>##</code>表示将两个参数连接起来这种运算。</li>
</ul>
<h3 id="［5］SDWebImageOptions中几个有趣的枚举值"><a href="#［5］SDWebImageOptions中几个有趣的枚举值" class="headerlink" title="［5］SDWebImageOptions中几个有趣的枚举值"></a>［5］<code>SDWebImageOptions</code>中几个有趣的枚举值</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">typedef NS_OPTIONS(NSUInteger, SDWebImageOptions) &#123;</div><div class="line">    ...</div><div class="line">    /**</div><div class="line">     * By default, placeholder images are loaded <span class="keyword">while</span> <span class="keyword">the</span> image <span class="keyword">is</span> loading. This flag will <span class="built_in">delay</span> <span class="keyword">the</span> loading</div><div class="line">     * <span class="keyword">of</span> <span class="keyword">the</span> placeholder image <span class="keyword">until</span> <span class="keyword">after</span> <span class="keyword">the</span> image has finished loading.</div><div class="line">     */</div><div class="line">    SDWebImageDelayPlaceholder = <span class="number">1</span> &lt;&lt; <span class="number">9</span>,</div><div class="line">    ...</div><div class="line">        /**</div><div class="line">     * By default, image <span class="keyword">is</span> added <span class="keyword">to</span> <span class="keyword">the</span> imageView <span class="keyword">after</span> download. But <span class="keyword">in</span> <span class="keyword">some</span> cases, we want <span class="keyword">to</span></div><div class="line">     * have <span class="keyword">the</span> hand <span class="keyword">before</span> setting <span class="keyword">the</span> image (apply a filter <span class="keyword">or</span> add <span class="keyword">it</span> <span class="keyword">with</span> cross-fade animation <span class="keyword">for</span> instance)</div><div class="line">     * Use this flag <span class="keyword">if</span> you want <span class="keyword">to</span> manually <span class="keyword">set</span> <span class="keyword">the</span> image <span class="keyword">in</span> <span class="keyword">the</span> completion when success</div><div class="line">     */</div><div class="line">    SDWebImageAvoidAutoSetImage = <span class="number">1</span> &lt;&lt; <span class="number">11</span></div></pre></td></tr></table></figure>
<p>在上面提到的<strong>核心方法</strong>中，有这样几个<code>SDWebImageOptions</code>引起了我的注意。</p>
<p>一个是<code>SDWebImageDelayPlaceholder</code>。说是默认情况下，placeholder的图片会在网络图片加载的过程中就被加载完毕，这个flag会将placeholder图片等加载延迟到网络图片完成加载之后。所以这里<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">if</span> (!(options &amp; SDWebImageDelayPlaceholder)) &#123; <span class="comment">// [2]</span></div><div class="line">    dispatch_main_async_safe(^&#123;</div><div class="line">        self.<span class="built_in">image</span> = placeholder;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是说如果使用者传入的<code>options</code>不是<code>SDWebImageDelayPlaceholder</code>，就正常地把placeholder图片赋给当前的<code>imageView</code>。之前第一遍看时没有看懂，原来就是“负负得正”的意思。</p>
<p>另一个是<code>SDWebImageAvoidAutoSetImage</code>。默认情况下，图片会在下载完毕后<em>自动</em>添加给<code>imageView</code>。但有些时候，比如说我们想在设置图片之前加一些图片处理（加个滤镜或者渐变动画之类的），就需要在下载成功时<em>手动</em>使用这个flag来设置图片了。<strong>以后想实现类似效果就知道该在哪里设置什么参数了。</strong><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">image</span> &amp;&amp; (options &amp; SDWebImageAvoidAutoSetImage) &amp;&amp; completedBlock)</div><div class="line">&#123;</div><div class="line">        completedBlock(<span class="built_in">image</span>, <span class="built_in">error</span>, cacheType, url);</div><div class="line">        <span class="built_in">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以这里判断，如果image不为空，而<code>options</code>表明需要增加图片处理，且加载完成的<code>completeBlock</code>不为空，那么就代入参数，执行<code>completeBlock</code>。</p>
<h3 id="［6］setNeedsLayout和layoutIfNeeded"><a href="#［6］setNeedsLayout和layoutIfNeeded" class="headerlink" title="［6］setNeedsLayout和layoutIfNeeded"></a>［6］<code>setNeedsLayout</code>和<code>layoutIfNeeded</code></h3><p>接着上面的if判断：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">else</span> <span class="built_in">if</span> (<span class="built_in">image</span>)</div><div class="line">&#123;</div><div class="line">         wself.<span class="built_in">image</span> = <span class="built_in">image</span>;</div><div class="line">         [wself setNeedsLayout];</div><div class="line">&#125;</div><div class="line"><span class="built_in">else</span> &#123;</div><div class="line">          <span class="built_in">if</span> ((options &amp; SDWebImageDelayPlaceholder)) &#123;</div><div class="line">                  wself.<span class="built_in">image</span> = placeholder;</div><div class="line">                  [wself setNeedsLayout];</div><div class="line">          &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>如果后两个条件中至少有一个不满足，那么就直接将image赋给当前的<code>imageView</code>，并调用<code>setNeedsLayout</code>将其标记为需要重新布局；如果image为空，而<code>options</code>表明需要延迟加载placeholder图片，那么就将placeholder图片赋给当前<code>imageView</code>，并将其标记为需要重新布局。</p>
<p>与<code>setNeedsLayout</code>紧密相关的<code>layoutIfNeeded</code>用于实现布局。比如使用了AutoLayout的<code>UITableViewCell</code>中经常会这样二者连着写：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">layoutSubviews</span></div><div class="line">&#123;</div><div class="line">    <span class="selector-attr">[super layoutSubviews]</span>;</div><div class="line"></div><div class="line">    <span class="selector-attr">[self.contentView setNeedsLayout]</span>;</div><div class="line">    <span class="selector-attr">[self.contentView layoutIfNeeded]</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>具体iOS绘制UI的原理及步骤，这里算是给自己挖了个坑吧，以后看懂了、研究明白了再慢慢填上。</p>
<hr>
<p><strong>Ref：</strong></p>
<ul>
<li><p><a href="http://stackoverflow.com/questions/5909412/what-is-objc-setassociatedobject-and-in-what-cases-should-it-be-used/16313377#16313377" target="_blank" rel="external">http://stackoverflow.com/questions/5909412/what-is-objc-setassociatedobject-and-in-what-cases-should-it-be-used/16313377#16313377</a></p>
</li>
<li><p>Mattt的真迹：<a href="http://nshipster.com/associated-objects/" target="_blank" rel="external">http://nshipster.com/associated-objects/</a></p>
</li>
<li>中文版：<a href="http://nshipster.cn/associated-objects/" target="_blank" rel="external">http://nshipster.cn/associated-objects/</a></li>
<li>喵神讲解宏定义黑魔法的一篇：<a href="http://onevcat.com/2014/01/black-magic-in-macro/" target="_blank" rel="external">http://onevcat.com/2014/01/black-magic-in-macro/</a></li>
<li>关于位运算：<a href="http://www.cnblogs.com/cute/p/3786283.html" target="_blank" rel="external">http://www.cnblogs.com/cute/p/3786283.html</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> SourceRead </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随笔一则 0127]]></title>
      <url>http://www.calios.gq/2016/01/28/%E9%9A%8F%E7%AC%94%E4%B8%80%E5%88%99-0127/</url>
      <content type="html"><![CDATA[<blockquote>
<p>武功百诀，以意为先，那才是武功的精骨神髓；招式身法，都不过是皮毛而已。若无精骨，皮毛何在？但若得了武道神髓。再学皮毛便是易如反掌了。 ——《浣花洗剑录》</p>
</blockquote>
<p>最近在思考构建技术知识体系的问题，读到这句，忽然福至心灵而有所感。</p>
<p>所谓高大沉重的基础知识，如数据库、计算机网络、操作系统、数据结构之类，无非是相当于武功中的神韵，因为他们不依附于某种语言而存在，如流水，生生不息。而具体的某种语言、某一种具体的领域则是那百家兵器排行榜上的一位，有其锐不可当的部分，也有看似纷繁复杂但又门户大开的部分。</p>
<p>所谓大学者，无非是在练就我们的基本功，让我们领悟计算机技术的精髓，不至于为语言、技术之众多迷花了眼。可惜，当初的我们身在森林而不知树木，噫吁嚱！</p>
<p>所以，对于技术知识体系，不妨两条腿走路，一方面，在具体的实践中不断深挖，多问几个为什么，比如研究AFNetworking的源码，就可以顺便追究一下网络传输的原理；另一方面，从基础知识入手，系统地整理一下网络自顶向下的七层结构。如此一来，方能融会贯通。</p>
<p>曾看慶写过，说构建知识体系就像是看地图，要不断地放大、缩小：放大时，一个小镇都会变得很大，街道、楼房，事无巨细；缩小时，纵观全国、全世界，横向的比较才有意义。如今想来，恍有所悟，终于从接受变成了理解。</p>
<p>于是，便不再烦躁对于服务器方面的学习该使用哪种语言、哪种技术，因为一通百通，具体的哪一种就没那么重要了。岁月长河中，终是有那一波又一波的语言和技术倒在沙滩上，不变的，是千淘万漉的河底鹅卵，历经冲刷而日渐滑润，熠熠生辉。</p>
]]></content>
      
        
        <tags>
            
            <tag> PragmaticProgrammer </tag>
            
            <tag> 脑洞开一开 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】如何避免程序崩溃-8：基本架构]]></title>
      <url>http://www.calios.gq/2016/01/21/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-8%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://inessential.com/2015/06/10/how_not_to_crash_8_infrastructure" target="_blank" rel="external">http://inessential.com/2015/06/10/how_not_to_crash_8_infrastructure</a></p>
<hr>
<p>即使你觉得自己的app是无故障的，你也需要收集崩溃日志 —— 因为没有什么是无故障的：只有<em>已知</em>的崩溃bug是可以避免的。</p>
<p>有一些做这类事情的服务，我尝试过的还都不错，所以我在这里就不做特别推荐了。</p>
<p>有几点功能是它应该具备的：</p>
<ol>
<li>崩溃日志被收集的过程，不需要用户手动查找它们再发送给你。它应该是自动化的（如果在OS X上，用户可能会收到提示；而在iOS上没人会希望被弹窗）。</li>
<li>要有给崩溃日志分组的机制，你得到的应该是每一组的汇总，这样你就能知道哪些经常出现，哪些不经常出现。</li>
<li>要能够给一组问题标记为已解决。</li>
</ol>
<p>当然，仅仅收集崩溃日志是远远不够的。你应该定期查看它们。（我每天早上查看崩溃日志。）</p>
<h4 id="Bug跟踪器"><a href="#Bug跟踪器" class="headerlink" title="Bug跟踪器"></a>Bug跟踪器</h4><p>要有一个。</p>
<p>对于我私人的项目，我会综合使用Lighthouse，OmniOutliner和纸笔 —— 当然你可以使用任何工具，只要你的崩溃记录归总到你的bug跟踪器里面而不会遗失。</p>
<p>（Lighthouse是个不错的bug跟踪器。我喜欢用OmniOutliner来标记大的新功能或者完整的app，在那里我可以建立to do的事件树。对于短周期的事情 —— 比如完成一个10步就可以完成的任务 —— 我喜欢用纸笔，因为依赖短期记忆很让人疲倦，而纸笔不会干扰屏幕上的上下文环境。）</p>
<h4 id="错误和警告"><a href="#错误和警告" class="headerlink" title="错误和警告"></a>错误和警告</h4><p>Xcode默认不会打开足够的错误和警告。我强烈推荐<a href="http://boredzo.org/blog/archives/2009-11-07/warnings" title="http://boredzo.org/blog/archives/2009-11-07/warnings" target="_blank" rel="external">Peter Hosey的集合</a>。</p>
<p>关键是要移除你代码中的<em>不确定性</em>。</p>
<p>就像我推荐的，我更进一步：我像对待错误一样对待警告。是的，这就意味着，如果警告存在我甚至不能在本地debug —— 但是这条守则物有所值。它意味着无论何时，只要我的app在运行，就不存在任何警告。</p>
<h4 id="Instruments"><a href="#Instruments" class="headerlink" title="Instruments"></a>Instruments</h4><p>Instruments非常棒。查看你的app分配了多少的内存是个好主意，同时，查看内存泄漏也是非常重要的。</p>
<p>如果你的app崩溃了，使用Zombies工具是个好主意。你的问题可能和zombies并没有关系，但是在怀疑的过程中，排除法是很值得使用的。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 译言 </tag>
            
            <tag> NotToCrashSeries </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实用git命令]]></title>
      <url>http://www.calios.gq/2016/01/19/%E5%AE%9E%E7%94%A8git%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h4 id="状态相关"><a href="#状态相关" class="headerlink" title="状态相关"></a>状态相关</h4><ul>
<li>撤销 <code>git commit</code> 之前的 <code>git add</code> ：<code>git reset &lt;file&gt;</code></li>
<li>替换本地改动，会使用HEAD中的最新内容替换掉工作目录中的文件，已添加到暂存区及新文件都不会受到影响：<code>git checkout -- &lt;filename&gt;</code></li>
<li>丢弃本地所有改动和提交，获取服务器最新版本历史，并将本地主分支指向它：<code>git fetch origin</code>, <code>git reset --hard origin/master</code></li>
</ul>
<h4 id="分支相关"><a href="#分支相关" class="headerlink" title="分支相关"></a>分支相关</h4><ul>
<li>查看远程分支：<code>git branch -a</code></li>
<li>查看本地分支：<code>git branch</code></li>
<li>创建分支：<code>git branch newBranch</code></li>
<li>把分支推到远程分支：<code>git push origin newBranch</code></li>
<li>把远程分支pull下来：<code>git clone --branch develop --single-branch XXurl</code></li>
<li>切换分支：<code>git checkout newBranch</code></li>
<li>删除远程分支: <code>git push origin --delete &lt;branchName&gt;</code></li>
<li>删除本地分支：<code>git branch -D fixVersion</code></li>
<li>合并改动前，预览差异：<code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></li>
<li>查看远程信息：<code>git remote show origin</code><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">remote origin</div><div class="line">  Fetch URL: https:<span class="comment">//github.com/WilliamZang/reactivecocoa_practise.git</span></div><div class="line">  Push  URL: https:<span class="comment">//github.com/WilliamZang/reactivecocoa_practise.git</span></div><div class="line">  HEAD branch: master</div><div class="line">  Remote branches:</div><div class="line">    lesson1          tracked</div><div class="line">    lesson2          tracked</div><div class="line">    lesson3          tracked</div><div class="line">    lesson4          tracked</div><div class="line">    lesson5          tracked</div><div class="line">    lesson6          tracked</div><div class="line">    master           tracked</div><div class="line">    practise2        tracked</div><div class="line">    practise2_answer tracked</div><div class="line">    practise3        tracked</div><div class="line">    practise3_answer tracked</div><div class="line">  <span class="keyword">Local</span> branches configured <span class="keyword">for</span> <span class="string">'git pull'</span>:</div><div class="line">    master           merges <span class="keyword">with</span> remote master</div><div class="line">    practise2        merges <span class="keyword">with</span> remote practise2</div><div class="line">    practise2_answer merges <span class="keyword">with</span> remote practise2_answer</div><div class="line">  <span class="keyword">Local</span> refs configured <span class="keyword">for</span> <span class="string">'git push'</span>:</div><div class="line">    lesson6          pushes <span class="keyword">to</span> lesson6          (<span class="keyword">local</span> <span class="keyword">out</span> <span class="keyword">of</span> date)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Cheatsheet"><a href="#Cheatsheet" class="headerlink" title="Cheatsheet"></a>Cheatsheet</h4><p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/git-cheat-sheet.png" alt="git cheat sheet"></p>
<p>源文件在<a href="http://rogerdudler.github.io/git-guide/files/git_cheat_sheet.pdf" target="_blank" rel="external">这里</a>。</p>
<hr>
<p><strong>Ref:</strong></p>
<p><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">http://rogerdudler.github.io/git-guide/index.zh.html</a></p>
<p><a href="http://stackoverflow.com/questions/348170/undo-git-add-before-commit" target="_blank" rel="external">http://stackoverflow.com/questions/348170/undo-git-add-before-commit</a></p>
<p><a href="http://stackoverflow.com/questions/927358/how-do-you-undo-the-last-commit" target="_blank" rel="external">http://stackoverflow.com/questions/927358/how-do-you-undo-the-last-commit</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Terminal </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LLDB常用命令]]></title>
      <url>http://www.calios.gq/2016/01/19/LLDB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><p><strong>po：</strong> 打印出对象的description描述。<br>这里列出几个常用的场景：</p>
<ul>
<li>查看KVO的详细信息：</li>
</ul>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">po <span class="string">[observedObject observationInfo]</span></div></pre></td></tr></table></figure>
<ul>
<li>查看AutoLayout布局的view的层级结构，需在<code>layoutSublayersOfLayer:</code>方法中添加断点。详参<a href="http://www.calios.gq/2015/09/10/AutoLayout-debug/">这篇</a>。</li>
</ul>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">po <span class="string">[self _autolayoutTrace]</span></div></pre></td></tr></table></figure>
<p><strong>e：</strong> 在当前程序环境中，执行任何的表达式，并且可以定义和操作已存在的变量。</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ e result = <span class="string">[]</span></div></pre></td></tr></table></figure>
<h4 id="控制流快捷命令"><a href="#控制流快捷命令" class="headerlink" title="控制流快捷命令"></a>控制流快捷命令</h4><ul>
<li><code>n</code>，Step Over</li>
<li><code>s</code>, Step Into</li>
<li><code>finish</code>, Step Out</li>
<li><code>c</code>, 恢复程序执行操作<br><code>thread return</code>：不但可以使当前的函数返回，而且还可以任意修改当前函数的返回值，而不管传进来的参数如何。</li>
</ul>
<h4 id="断点创建命令"><a href="#断点创建命令" class="headerlink" title="断点创建命令"></a>断点创建命令</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) breakpoint <span class="built_in">set</span> -f ViewController.swift -l <span class="number">28</span></div><div class="line">Breakpoint <span class="number">2</span>: <span class="keyword">where</span> = <span class="keyword">Example</span>`<span class="keyword">Example</span>.ViewController.viewDidLoad (<span class="keyword">Example</span>.ViewController)() -&gt; () + <span class="number">478</span> <span class="built_in">at</span> ViewController.swift:<span class="number">29</span>, address= <span class="number">0x000000010f74f61e</span></div></pre></td></tr></table></figure>
<p>简写：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">b</span> ViewController<span class="selector-class">.swift</span>:<span class="number">28</span></div><div class="line"><span class="selector-tag">b</span> add （add为函数名）</div></pre></td></tr></table></figure></p>
<h4 id="一点Chisel"><a href="#一点Chisel" class="headerlink" title="一点Chisel"></a>一点Chisel</h4><p>查看命令用法：<code>help [command]</code></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(lldb) help pviews</div><div class="line">Print <span class="keyword">the</span> recursion description <span class="keyword">of</span> ~&lt;aView&gt;~.</div><div class="line"></div><div class="line">Arguments:</div><div class="line">  ~&lt;aView&gt;~; Type: UIView*/NSView*; The view <span class="built_in">to</span> print <span class="keyword">the</span> description <span class="keyword">of</span>.</div><div class="line"></div><div class="line">Options:</div><div class="line">  <span class="comment">--up/-u ; Print only the hierarchy directly above the view, up to its window.</span></div><div class="line">  <span class="comment">--depth/-d ~&lt;depth&gt;~; Type: int; Print only to a given depth. 0 indicates infinite depth.</span></div><div class="line"></div><div class="line">Syntax: pviews \[<span class="comment">--up] \[--depth=depth] ~&lt;aView&gt;~</span></div><div class="line"></div><div class="line">This <span class="keyword">command</span> <span class="title">is</span> <span class="title">implemented</span> <span class="title">as</span> <span class="title">FBPrintViewHierarchyCommand</span> <span class="title">in</span> /<span class="title">usr</span>/<span class="title">local</span>/<span class="title">Cellar</span>/<span class="title">chisel</span>/<span class="title">1</span><span class="number">.2</span><span class="number">.0</span>/<span class="title">libexec</span>/<span class="title">commands</span>/<span class="title">FBPrintCommands</span>.<span class="title">py</span>.</div><div class="line"></div><div class="line">(LLDB adds <span class="keyword">the</span> next <span class="built_in">line</span>, sorry...)</div></pre></td></tr></table></figure>
<p>查看view的层级结构的 <em>原生命令</em>：</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(lldb) po <span class="comment">[<span class="comment">[<span class="comment">[UIApplication sharedApplication]</span> keyWindow]</span> recursiveDescription]</span></div></pre></td></tr></table></figure>
<p>Chisel的简化版：<code>pviews</code></p>
<ul>
<li>语法为：<code>pviews [--up] [--depth=depth] &lt;aView&gt;</code></li>
<li>可以添加以下参数：<ul>
<li>–up/-u：只打印直属于当前view的层级关系。最高层为它的window。</li>
<li>–depth/-d <depth>：只打印指定层数，0意味着不限制层数。</depth></li>
</ul>
</li>
</ul>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="xml">(lldb) pviews</span></div><div class="line"><span class="tag">&lt;<span class="name">UIWindow:</span> <span class="attr">0x7f994423a3a0</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">768</span> <span class="attr">1024</span>); <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">gestureRecognizers</span> = &lt;<span class="attr">NSArray:</span> <span class="attr">0x7f994423abc0</span>&gt;</span>; layer = <span class="tag">&lt;<span class="name">UIWindowLayer:</span> <span class="attr">0x7f9944239e90</span>&gt;</span>&gt;</div><div class="line">   | <span class="tag">&lt;<span class="name">UILayoutContainerView:</span> <span class="attr">0x7f9943d4a160</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">768</span> <span class="attr">1024</span>); <span class="attr">transform</span> = <span class="string">[0,</span> <span class="attr">-1</span>, <span class="attr">1</span>, <span class="attr">0</span>, <span class="attr">0</span>, <span class="attr">0</span>]; <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943d4a380</span>&gt;</span>&gt;</div><div class="line">   |    | <span class="tag">&lt;<span class="name">UITransitionView:</span> <span class="attr">0x7f9943d4bbc0</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">1024</span> <span class="attr">768</span>); <span class="attr">clipsToBounds</span> = <span class="string">YES;</span> <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943d4be00</span>&gt;</span>&gt;</div><div class="line">   |    |    | <span class="tag">&lt;<span class="name">UIViewControllerWrapperView:</span> <span class="attr">0x7f9943cb7b30</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">1024</span> <span class="attr">768</span>); <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943cb8380</span>&gt;</span>&gt;</div><div class="line">   |    |    |    | <span class="tag">&lt;<span class="name">UILayoutContainerView:</span> <span class="attr">0x7f994412f9c0</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">1024</span> <span class="attr">768</span>); <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">gestureRecognizers</span> = &lt;<span class="attr">NSArray:</span> <span class="attr">0x7f9943c67c30</span>&gt;</span>; layer = <span class="tag">&lt;<span class="name">CALayer:</span> <span class="attr">0x7f994412fba0</span>&gt;</span>&gt;</div><div class="line">   |    |    |    |    | <span class="tag">&lt;<span class="name">UINavigationTransitionView:</span> <span class="attr">0x7f9943c606f0</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">1024</span> <span class="attr">768</span>); <span class="attr">clipsToBounds</span> = <span class="string">YES;</span> <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943c13890</span>&gt;</span>&gt;</div><div class="line">   |    |    |    |    |    | <span class="tag">&lt;<span class="name">UIViewControllerWrapperView:</span> <span class="attr">0x7f994426d090</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">1024</span> <span class="attr">768</span>); <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f994426ce70</span>&gt;</span>&gt;</div><div class="line">   |    |    |    |    |    |    | <span class="tag">&lt;<span class="name">UIView:</span> <span class="attr">0x7f994423db60</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">1024</span> <span class="attr">768</span>); <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f994423dad0</span>&gt;</span>&gt;</div><div class="line">   |    |    |    |    |    |    |    | <span class="tag">&lt;<span class="name">UICollectionView:</span> <span class="attr">0x7f9944838000</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">1024</span> <span class="attr">768</span>); <span class="attr">clipsToBounds</span> = <span class="string">YES;</span> <span class="attr">gestureRecognizers</span> = &lt;<span class="attr">NSArray:</span> <span class="attr">0x7f9944241220</span>&gt;</span>; layer = <span class="tag">&lt;<span class="name">CALayer:</span> <span class="attr">0x7f9944240a30</span>&gt;</span>; contentOffset: <span class="template-variable">&#123;0, -64&#125;</span><span class="xml">&gt; collection view layout: <span class="tag">&lt;<span class="name">UICollectionViewFlowLayout:</span> <span class="attr">0x7f994423fca0</span>&gt;</span></span></div><div class="line">   ... ...</div><div class="line"></div><div class="line">(lldb) pviews --up</div><div class="line"><span class="tag">&lt;<span class="name">UIWindow:</span> <span class="attr">0x7f994423a3a0</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">768</span> <span class="attr">1024</span>); <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">gestureRecognizers</span> = &lt;<span class="attr">NSArray:</span> <span class="attr">0x7f994423abc0</span>&gt;</span>; layer = <span class="tag">&lt;<span class="name">UIWindowLayer:</span> <span class="attr">0x7f9944239e90</span>&gt;</span>&gt;</div><div class="line"></div><div class="line">(lldb) pviews --depth=5 0x7f9943d4ad60</div><div class="line"><span class="tag">&lt;<span class="name">UITabBar:</span> <span class="attr">0x7f9943d4ad60</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">712</span>; <span class="attr">1024</span> <span class="attr">56</span>); <span class="attr">autoresize</span> = <span class="string">W+TM;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943d4b1a0</span>&gt;</span>&gt;</div><div class="line">   | <span class="tag">&lt;<span class="name">_UITabBarBackgroundView:</span> <span class="attr">0x7f994423b920</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">1024</span> <span class="attr">56</span>); <span class="attr">autoresize</span> = <span class="string">W;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f994423bae0</span>&gt;</span>&gt;</div><div class="line">   |    | <span class="tag">&lt;<span class="name">_UIBackdropView:</span> <span class="attr">0x7f994423bb00</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">1024</span> <span class="attr">56</span>); <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">_UIBackdropViewLayer:</span> <span class="attr">0x7f994423bdd0</span>&gt;</span>&gt;</div><div class="line">   |    |    | <span class="tag">&lt;<span class="name">_UIBackdropEffectView:</span> <span class="attr">0x7f994423c320</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">1024</span> <span class="attr">56</span>); <span class="attr">clipsToBounds</span> = <span class="string">YES;</span> <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CABackdropLayer:</span> <span class="attr">0x7f994423bac0</span>&gt;</span>&gt;</div><div class="line">   |    |    | <span class="tag">&lt;<span class="name">UIView:</span> <span class="attr">0x7f994423c4f0</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">0</span>; <span class="attr">1024</span> <span class="attr">56</span>); <span class="attr">hidden</span> = <span class="string">YES;</span> <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">autoresize</span> = <span class="string">W+H;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f994423c5b0</span>&gt;</span>&gt;</div><div class="line">   | <span class="tag">&lt;<span class="name">UITabBarButton:</span> <span class="attr">0x7f9943c8fd20</span>; <span class="attr">frame</span> = <span class="string">(309</span> <span class="attr">1</span>; <span class="attr">76</span> <span class="attr">55</span>); <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943c923e0</span>&gt;</span>&gt;</div><div class="line">   |    | <span class="tag">&lt;<span class="name">UITabBarSwappableImageView:</span> <span class="attr">0x7f9943c92900</span>; <span class="attr">frame</span> = <span class="string">(25.5</span> <span class="attr">7</span>; <span class="attr">25</span> <span class="attr">25</span>); <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943c92b70</span>&gt;</span>&gt;</div><div class="line">   |    | <span class="tag">&lt;<span class="name">UITabBarButtonLabel:</span> <span class="attr">0x7f9943c902f0</span>; <span class="attr">frame</span> = <span class="string">(24</span> <span class="attr">35</span>; <span class="attr">28</span> <span class="attr">17</span>); <span class="attr">text</span> = <span class="string">'首页'</span>; <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943c90590</span>&gt;</span>&gt;</div><div class="line">   | <span class="tag">&lt;<span class="name">UITabBarButton:</span> <span class="attr">0x7f9943c9bf20</span>; <span class="attr">frame</span> = <span class="string">(419</span> <span class="attr">1</span>; <span class="attr">76</span> <span class="attr">55</span>); <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943c9d520</span>&gt;</span>&gt;</div><div class="line">   |    | <span class="tag">&lt;<span class="name">UITabBarSwappableImageView:</span> <span class="attr">0x7f9943c9d910</span>; <span class="attr">frame</span> = <span class="string">(25.5</span> <span class="attr">8</span>; <span class="attr">25</span> <span class="attr">23</span>); <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943c9d540</span>&gt;</span>&gt;</div><div class="line">   |    | <span class="tag">&lt;<span class="name">UITabBarButtonLabel:</span> <span class="attr">0x7f9943c9c0c0</span>; <span class="attr">frame</span> = <span class="string">(24</span> <span class="attr">35</span>; <span class="attr">28</span> <span class="attr">17</span>); <span class="attr">text</span> = <span class="string">'课程'</span>; <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943c9be40</span>&gt;</span>&gt;</div><div class="line">   | <span class="tag">&lt;<span class="name">UITabBarButton:</span> <span class="attr">0x7f9943ca5450</span>; <span class="attr">frame</span> = <span class="string">(529</span> <span class="attr">1</span>; <span class="attr">76</span> <span class="attr">55</span>); <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943ca6a50</span>&gt;</span>&gt;</div><div class="line">   |    | <span class="tag">&lt;<span class="name">UITabBarSwappableImageView:</span> <span class="attr">0x7f9943ca6d40</span>; <span class="attr">frame</span> = <span class="string">(25.5</span> <span class="attr">7</span>; <span class="attr">25</span> <span class="attr">25</span>); <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943ca6a70</span>&gt;</span>&gt;</div><div class="line">   |    | <span class="tag">&lt;<span class="name">UITabBarButtonLabel:</span> <span class="attr">0x7f9943ca55f0</span>; <span class="attr">frame</span> = <span class="string">(17</span> <span class="attr">35</span>; <span class="attr">42</span> <span class="attr">17</span>); <span class="attr">text</span> = <span class="string">'讨论区'</span>; <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943ca5370</span>&gt;</span>&gt;</div><div class="line">   | <span class="tag">&lt;<span class="name">UITabBarButton:</span> <span class="attr">0x7f9943caeaa0</span>; <span class="attr">frame</span> = <span class="string">(639</span> <span class="attr">1</span>; <span class="attr">76</span> <span class="attr">55</span>); <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943cb0070</span>&gt;</span>&gt;</div><div class="line">   |    | <span class="tag">&lt;<span class="name">UITabBarSwappableImageView:</span> <span class="attr">0x7f9943cb0350</span>; <span class="attr">frame</span> = <span class="string">(26</span> <span class="attr">7.5</span>; <span class="attr">24</span> <span class="attr">24</span>); <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943cb0090</span>&gt;</span>&gt;</div><div class="line">   |    | <span class="tag">&lt;<span class="name">UITabBarButtonLabel:</span> <span class="attr">0x7f9943caec40</span>; <span class="attr">frame</span> = <span class="string">(31</span> <span class="attr">35</span>; <span class="attr">14</span> <span class="attr">17</span>); <span class="attr">text</span> = <span class="string">'我'</span>; <span class="attr">opaque</span> = <span class="string">NO;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f9943cae9a0</span>&gt;</span>&gt;</div><div class="line">   | <span class="tag">&lt;<span class="name">UIImageView:</span> <span class="attr">0x7f994423d490</span>; <span class="attr">frame</span> = <span class="string">(0</span> <span class="attr">-0.5</span>; <span class="attr">1024</span> <span class="attr">0.5</span>); <span class="attr">autoresize</span> = <span class="string">W;</span> <span class="attr">userInteractionEnabled</span> = <span class="string">NO;</span> <span class="attr">layer</span> = &lt;<span class="attr">CALayer:</span> <span class="attr">0x7f994423d590</span>&gt;</span>&gt;</div></pre></td></tr></table></figure>
<p>刷新显示的原生命令：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(lldb) e (<span class="keyword">void</span>)[CATransaction <span class="built_in">flush</span>]</div></pre></td></tr></table></figure>
<p>Chisel的简化版：<code>caflush</code></p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><p>与调试器共舞 - LLDB 的华尔兹(objccn.io): <a href="http://objccn.io/issue-19-2/" target="_blank" rel="external">http://objccn.io/issue-19-2/</a></p>
</li>
<li><p>LLDB使用篇（上）: <a href="http://www.dreamingwish.com/article/lldb-usage-a.html" target="_blank" rel="external">http://www.dreamingwish.com/article/lldb-usage-a.html</a></p>
</li>
<li><p>LLDB篇2教你使用faceBook的chisel来提高调试效率: <a href="http://www.jianshu.com/p/b2371dd4443b#" target="_blank" rel="external">http://www.jianshu.com/p/b2371dd4443b</a></p>
</li>
<li><p><a href="http://swiftcafe.io/2015/09/05/lldb-debug/" target="_blank" rel="external">http://swiftcafe.io/2015/09/05/lldb-debug/</a></p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> LLDB - iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】如何避免程序崩溃-7：什么都不做]]></title>
      <url>http://www.calios.gq/2015/12/19/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-7%EF%BC%9A%E4%BB%80%E4%B9%88%E9%83%BD%E4%B8%8D%E5%81%9A/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://inessential.com/2015/05/29/how_not_to_crash_7_dealing_with_nothin" target="_blank" rel="external">http://inessential.com/2015/05/29/how_not_to_crash_7_dealing_with_nothin</a></p>
<hr>
<p>考虑下这行代码：</p>
<pre><code>[thing doStuff];
</code></pre><p>如果<code>thing</code>是nil，没有什么问题。不会崩溃。什么都不会发生。</p>
<p>但是你不能由此推断nil在所有场景中都没有问题：</p>
<pre><code>[self doStuff:thing];
</code></pre><p>如果<code>thing</code>是nil，接下来会发生什么？如果取决于<code>doStuff:</code>的实现 —— 它可能会崩溃。考虑下这行代码：</p>
<pre><code>menuItem.title = thing;
</code></pre><p>如果<code>menuItem</code>是一个NSMenuItem对象，那么当<code>thing</code>为nil时它就会崩溃。NSMenuItem的头文件没有提到这个，就连文档中也只是一笔带过（“如果你不想要标题，就用一个空字符串代替（@“”），而不是nil。”）</p>
<p>这就意味着你需要保证<code>thing</code>是非空的。你可能很确信它是非空的。但是考虑下我曾经遇到的一个例子，当<code>thing</code>是一个字体的名字时怎么办。我从不会想到获取字体名字的系统API会返回nil —— 除非它偶尔这么做了（当然时很少发生，而且不管我做什么，从未在我的机器上发生）。</p>
<p>需要知道的是：</p>
<p>Nil的接受者是没问题的 —— 只要你的代码对于什么都不做没什么问题。</p>
<p>Nil作为参数可能没问题，也可能有问题。当调用系统的API时，头文件和文档不会总是告诉你可能发生什么。（这一点可能会在他们充分利用<a href="https://developer.apple.com/swift/blog/?id=25" title="https://developer.apple.com/swift/blog/?id=25" target="_blank" rel="external">为空注释</a>时有所改善。）</p>
<p>不要相信任何人。</p>
<h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><p>断言是一种证明假设和需求的不错的方式，也是确保假设为真的有效工具。断言不该在发布版本中运行（详见Xcode设置中的ENABLE_NS_ASSERTIONS）。</p>
<p>我最喜欢的一个是NSParameterAssert，我几乎专门用它来做不能为空参数的为空检查。</p>
<p>用起来超级简单：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)someMethod:(<span class="keyword">id</span>)someParameter &#123;</div><div class="line">  <span class="built_in">NSParameterAssert</span>(someParameter);</div><div class="line">  …<span class="keyword">do</span> whatever…</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以后我可能开始使用为空注释<em>和</em>NSParameterAssert。两个都用。（未来我可能会写些Swift的代码，那时候对于nil的处理就是另一回事了。但是那不是我今天谈论的内容，一部分的原因是，我对于Swift还不足以称为专家，不能给出好的建议。）</p>
<p>我也经常使用NSAssert。NSAssert需要一个表达式和一个评论文字 —— 但我很懒，总把评论置为空。（这种情况下是没问题的。）<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSAssert(<span class="name">something</span> == somethingElse, <span class="literal">nil</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>（关于懒惰的一点建议：懒的程序员从不写崩溃的bug，因为他们不想之后再回来修复它们。）</p>
<h4 id="我喜欢的崩溃的bug"><a href="#我喜欢的崩溃的bug" class="headerlink" title="我喜欢的崩溃的bug"></a>我喜欢的崩溃的bug</h4><p>几年前，我的app NetNewsWire有一个崩溃日志捕捉者。在启动应用时，它会从磁盘中抓取最新的崩溃日志发送给我。</p>
<p>随着一些OS X系统的发布（我想是10.5）苹果公司修改了磁盘中崩溃日志的形式。我想它们曾经是每个应用一个日志文件，然后苹果改成了每次崩溃一个日志文件。我不得不写些新的代码来处理新的形式。</p>
<p>我做了修改。发给了beta版的测试者，他们专门用这个app。几周过去了。一切安好。</p>
<p>然后，就在我发布这个版本的当天，我接到了成千上万的报告者说，“在启动应用的时候就挂掉了！但是再次启动的时候就好了。”</p>
<p>解决方法如下：新的代码会在根本没有崩溃日志的时候崩溃掉。然后，在下次启动的时候 —— 既然有了崩溃日志 ——它就不会崩溃了。（是的，这是个可以自愈的崩溃bug。在崩溃日志捕捉器内。就是这样。）</p>
<p>当然这就意味着对所有<em>新</em>用户来说，它会立即崩溃，而不只是那些足够幸运、从未崩溃过的人们。</p>
<p>这对我是个极大的提醒：<em>一定要考虑什么都没有的情况</em>。总是什么都不发生。什么都没有是很平常的。但是可能需要特殊处理，也应该被考虑到。</p>
<h4 id="一个没那么酷的崩溃bug"><a href="#一个没那么酷的崩溃bug" class="headerlink" title="一个没那么酷的崩溃bug"></a>一个没那么酷的崩溃bug</h4><p>我认为这不会转移 —— 我想它只存在于beta版的代码中。</p>
<p>Vesper的同步会与服务器对话。服务器将JSON数据返回。Cocoa的JSON解析器将JSON的null转化成<code>NSNull</code>对象。</p>
<p>Vesper期望得到一个NSString，却得到了一个NSNull。Vesper试图对NSNull调用一个字符串的方法，然后它就挂掉了。</p>
<p>表面上看来这是一个难啃的骨头，因为你不能保证JSON给出的类型是你想要的。你需要一个string，但得到了一个NSNull。</p>
<p>是的，NSNull是你希望能够尽量隔离处理的众多对象中的一个。它是个四处游走的问题代码（尽管我不知道在JSON的null的例子中类似的例子是什么）。（你绝不应该在JSON之外特意使用它。几乎绝不应该。绝对少用。比如说几年用一次，而且得是你真的真的不得不用的时候。可能连那样都不应该用。）</p>
<p>这就是像我<a href="http://www.calios.gq/2015/11/19/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-4%EF%BC%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/" title="http://www.calios.gq/2015/11/19/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-4%EF%BC%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/">之前那篇</a>提到的，我喜欢把JSON转化成中间对象的部分原因吧。这么做的一大部分工作就集中在处理NSNull对象上 —— 我不想把它们渗透到应用的其它部分上去，那样所到之处都会变得脏兮兮的。</p>
<p>但是，另一个观点是：<em>只要是写服务器端的人，就是你不共戴天的仇人</em>。他非常非常的恨你。</p>
<p>在这里，Vesper的案例中，是我扮演了这样的角色。但我仍然要假设写服务器那家伙把完成我本人和事业的摧毁当作他们的终极目标一样地写代码。（尽管我了解那个家伙，他很酷。他喜欢小猫咪。）同时，那不意味着只检查NSNull —— 不管怎样它在JSON中很常见 —— 而是要对每一部分数据的类型都谨慎处理。</p>
<p>任何事情都可能在不确定的时间变成不可预知的事情。</p>
<p>（并非一路通畅。你期望能够一帆风顺 —— 但是那也太容易了。可能一路下来什么都没有。）</p>
<h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>初始化你的变量。就这样。如果我每修复一个仅仅将变量初始化为nil就解决的崩溃bug就能拿到一个硬币的话 —— 那我已经有好些硬币了。你肯定希望不要获得这样的硬币。</p>
<p>不初始化你的变量就像在玩汽油，然后还说，没问题的，因为火柴在口袋里。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 译言 </tag>
            
            <tag> NotToCrashSeries </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[那些年，我踩过的坑（一）]]></title>
      <url>http://www.calios.gq/2015/12/15/%E9%82%A3%E4%BA%9B%E5%B9%B4%EF%BC%8C%E6%88%91%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>最近踩到了一个以前没有注意的坑。场景是这个样子的。</p>
<blockquote>
<p>一个UICollectionView有个自定义的UICollectionViewCell，UICollectionViewCell中有个UITableView，在点击UITableView的cell时，需要将点击之后更新的model（为一个NSArray）传出来给UICollectionView，UICollectionView用一个NSMutableDictionary接。<br>假设用delegate一层层传出来。<br>会出现这样的问题：</p>
<ul>
<li>Cell0中，点击UITableView的cell，传出来的值为<code>@[@&quot;0&quot;]</code>，UICollectionView接到的值为<code>@[@&quot;0&quot;]</code>，更新后的字典为<code>@{ 0 = (0);}</code>；</li>
<li>水平滑动collectionView，显示Cell1，点击UITableView的cell， UITableView传出来的值为<code>@[@&quot;1&quot;]</code>，UICollectionView接到的值为<code>@[@&quot;1&quot;]</code>，更新后的字典为<code>@{ 0 = (0); 1 = (0);}</code>；</li>
<li>继续水平滑动collectionView，显示Cell2，点击UITableView的cell， UITableView传出来的值为<code>@[@&quot;6&quot;]</code>，UICollectionView接到的值为<code>@[@&quot;6&quot;]</code>，更新后的字典为<code>@{ 0 = (6); 1 = (0); 2 = (6);}</code>；</li>
<li>问题出现了，key为2的value会把key为0的value覆盖掉。</li>
<li>所以呢？</li>
</ul>
</blockquote>
<p>一入小坑深似海，从此清闲是路人。</p>
<p>此处略去十几根青丝。</p>
<p>还好，某日正午的咖啡香中，灵光闪现。很可能是key为2的value和key为0的value对应相同的地址。所以，2的value就把0的value给覆盖了。打断点依次打印了一下更新后字典中各个元素的地址，果然如此。</p>
<p>爬出来了。</p>
<h4 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h4><p>导致这个问题的表面原因，可能是由于UICollectionViewCell的复用机制。在每页显示一个cell的情况下，当显示index0的cell，假设其中成员变量的指向的地址为<em>0x00001</em>，；当显示index2的cell时，复用了index0的cell，同样也就复用了其中的成员变量，即上文中传出来的数组。而在调用delegate方法时，直接就把这个数组作为参数传入。接下来层层代理出来，最终collectionView获得的值也是换汤不换药地指向原来数组的地址<em>0x00001</em>。所以就导致UICollectionView中字典key为0和key为2的值相同。</p>
<p>深究原因的话，还是代码的防御性不强。从别处获取的值不应该拿过来就直接使用，而应该复制给一个新的变量，之后自己继续用这个新的变量。反过来，作为传出去的参数，最好也能略微封装一下，不要把private的成员变量直接就传出去，防止引入外面的污染。</p>
<p><strong>PS：</strong><br>当然，对于从UITableView传值出去，通知机制会更方便些，免得一层层的写代理。但也要注意同样的问题。提高自己代码的健壮性。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> JumpNStruggleOut </tag>
            
            <tag> Summary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[［译］Auto Layout的最佳实践 —— 止疼片]]></title>
      <url>http://www.calios.gq/2015/12/14/%E3%80%90%E8%AF%91%E3%80%91Auto-Layout%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E2%80%94%E2%80%94-%E6%AD%A2%E7%96%BC%E7%89%87/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="https://medium.com/@NSomar/auto-layout-best-practices-for-minimum-pain-c130b2b1a0f6#.tqby1u8l4" target="_blank" rel="external">https://medium.com/@NSomar/auto-layout-best-practices-for-minimum-pain-c130b2b1a0f6#.tqby1u8l4</a></p>
<hr>
<p>Auto Layout是个很棒的工具，作为开发者，它可以让我们保持神志清醒，还能让我们这些懒人们在设置frame的时候远离“神奇数字”。</p>
<p>但是任何技术都不是完美无缺的，我必须得说我花了太多的时间来debug那些缺失的约束条件，或者对于一些藏在层级结构深处的视图，添加一个冲突的约束条件就会把整个布局毁掉，当这些事情发生的时候简直是天崩地裂！</p>
<p>在debug了无数个小时的auto layout的问题后，我发现每次造成问题的都是我自己（或者是你自己！），而问题的解决办法总是相同的：遵从auto layout的文档和规则！</p>
<p>我会在这里把正确使用auto layout的最佳实践说给你听，这样你就可以免除一些痛苦了。</p>
<h4 id="UIView的子类应该实现intrinsicContentSize方法"><a href="#UIView的子类应该实现intrinsicContentSize方法" class="headerlink" title="UIView的子类应该实现intrinsicContentSize方法"></a>UIView的子类应该实现intrinsicContentSize方法</h4><p>每个<em>UIView</em>的子类都应该实现<em>intrinsicContentSize</em>，并且返回它认为合适的大小。</p>
<p>假设我们新建了一个<em>AwesomeView</em>，而且我们知道这个view的默认尺寸是300x20，我们会这么写：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">CGSize</span>)intrinsicContentSize &#123;</div><div class="line"> <span class="keyword">return</span> <span class="built_in">CGSizeMake</span>(<span class="number">300</span>, <span class="number">20</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果我们不知道view的宽度，我们会用<em>UIViewNoIntrinsicMetric</em>来代替：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">CGSize</span>)intrinsicContentSize &#123;</div><div class="line"> <span class="keyword">return</span> <span class="built_in">CGSizeMake</span>(<span class="built_in">UIViewNoIntrinsicMetric</span>, <span class="number">20</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>UIView基类的<em>updateConstraints</em>实现会调用<em>intrinsicContentSize</em>，它会使用返回的尺寸来给<em>AwesomeView</em>添加约束条件。</p>
<p>根据上面例子中的(300,20)尺寸，会添加下面的约束条件：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="string">NSContentSizeLayoutConstraint:</span><span class="number">0x7fef48d52580</span> <span class="string">H:</span>[<span class="string">AwesomeView:</span><span class="number">0x7fef48ead7f0</span>(<span class="number">300</span>)] <span class="string">Hug:</span><span class="number">250</span> <span class="string">CompressionResistance:</span><span class="number">750</span>&gt;,</div><div class="line">&lt;<span class="string">NSContentSizeLayoutConstraint:</span><span class="number">0x7fef48d4d110</span> <span class="string">V:</span>[<span class="string">AwesomeView:</span><span class="number">0x7fef48ead7f0</span>(<span class="number">20</span>)] <span class="string">Hug:</span><span class="number">250</span> <span class="string">CompressionResistance:</span><span class="number">750</span>&gt;</div></pre></td></tr></table></figure></p>
<p>添加的约束条件比较特殊，它们是<em>NSContentSizeLayoutConstraint</em>类型的，这个类是个私有类。这些约束条件的优先级范围是0-1000，“包住限制”（译者注：hug consistance，使其在“内容大小”的基础上不能继续变大）的优先级是250，“撑住限制”（compression resistance，撑住使其在在其“内容大小”的基础上不能继续变小）的优先级是750，使用的常量等于通过<em>intrinsicContentSize</em>返回的值。</p>
<p>请注意，UIView基类实现<strong>updateConstraints</strong>只有在它第一次执行的时候才会添加<em>intrinsicContentSize</em>约束。</p>
<h4 id="UIView的子类绝不应该给自身的尺寸添加约束"><a href="#UIView的子类绝不应该给自身的尺寸添加约束" class="headerlink" title="UIView的子类绝不应该给自身的尺寸添加约束"></a>UIView的子类绝不应该给自身的尺寸添加约束</h4><p>每个view都会负责给它的superview设置约束，但是view<strong>绝不应该</strong>设置它自己的约束条件，不管是对于自身的约束（比如说<em> NSLayoutAttributeWidth</em>和<em> NSLayoutAttributeHeight</em>），还是相对于superview的约束。</p>
<p>如果一个view想指定自己的高度或者宽度，它应该通过实现<em> intrinsicContentSize</em>来达到目的。</p>
<p>这是个糟糕的例子：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (instancetype)init</div><div class="line">&#123;</div><div class="line">     self = [<span class="keyword">super</span> init];</div><div class="line">     <span class="keyword">if</span> (self) &#123;</div><div class="line">         [self <span class="string">addConstraint:</span>[NSLayoutConstraint <span class="string">constraintWithItem:</span>self <span class="string">attribute:</span>NSLayoutAttributeWidth <span class="string">relatedBy:</span>NSLayoutRelationEqual <span class="string">toItem:</span>nil <span class="string">attribute:</span><span class="number">0</span> <span class="string">multiplier:</span><span class="number">0</span> <span class="string">constant:</span><span class="number">100</span>]];</div><div class="line">         [self <span class="string">addConstraint:</span>[NSLayoutConstraint <span class="string">constraintWithItem:</span>self <span class="string">attribute:</span>NSLayoutAttributeHeight <span class="string">relatedBy:</span>NSLayoutRelationEqual <span class="string">toItem:</span>nil <span class="string">attribute:</span><span class="number">0</span> <span class="string">multiplier:</span><span class="number">0</span> <span class="string">constant:</span><span class="number">100</span>]];</div><div class="line">     &#125;</div><div class="line">         <span class="keyword">return</span> self;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个view在通过给自身添加约束来设置自己的宽度和高度，那么如果现在它的superview也在试图指定这些数值会发生什么呢？<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Some place in the superview</span></div><div class="line">[awesome <span class="string">addConstraint:</span>[NSLayoutConstraint <span class="string">constraintWithItem:</span>awesome <span class="string">attribute:</span>NSLayoutAttributeWidth <span class="string">relatedBy:</span>NSLayoutRelationEqual <span class="string">toItem:</span>nil <span class="string">attribute:</span><span class="number">0</span> <span class="string">multiplier:</span><span class="number">0</span> <span class="string">constant:</span><span class="number">200</span>]];</div><div class="line">[awesome <span class="string">addConstraint:</span>[NSLayoutConstraint <span class="string">constraintWithItem:</span>awesome <span class="string">attribute:</span>NSLayoutAttributeHeight <span class="string">relatedBy:</span>NSLayoutRelationEqual <span class="string">toItem:</span>nil <span class="string">attribute:</span><span class="number">0</span> <span class="string">multiplier:</span><span class="number">0</span> <span class="string">constant:</span><span class="number">200</span>]];</div></pre></td></tr></table></figure></p>
<p>嘭！<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Unable to simultaneously satisfy constraints.</div><div class="line">…</div><div class="line">property translatesAutoresizingMaskIntoConstraints)</div><div class="line">(</div><div class="line"> “&lt;<span class="string">NSLayoutConstraint:</span><span class="number">0x7ff3b16c2ae0</span> <span class="string">H:</span>[<span class="string">AwesomeView:</span><span class="number">0x7ff3b16bfa00</span>(<span class="number">100</span>)]&gt;”,</div><div class="line"> “&lt;<span class="string">NSLayoutConstraint:</span><span class="number">0x7ff3b16c2330</span> <span class="string">H:</span>[<span class="string">AwesomeView:</span><span class="number">0x7ff3b16bfa00</span>(<span class="number">200</span>)]&gt;”</div><div class="line">)</div><div class="line">Will attempt to recover by breaking constraint</div><div class="line">&lt;<span class="string">NSLayoutConstraint:</span><span class="number">0x7ff3b16c2330</span> <span class="string">H:</span>[<span class="string">AwesomeView:</span><span class="number">0x7ff3b16bfa00</span>(<span class="number">200</span>)]&gt;</div><div class="line">…</div></pre></td></tr></table></figure></p>
<p><code>AwesomeView</code>添加的宽度/高度是100/100，而它的superview也添加了宽度/高度，但是是200/200，这样autoLayout就不知道该选择哪个约束条件了，因为它们的优先级都一样。</p>
<p>一种解决办法是这样的，将<code>AwesomeView</code>自身的优先级降低一点。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[self <span class="string">addConstraint:</span>(&#123;</div><div class="line"> NSLayoutConstraint *constraint;</div><div class="line"> constraint = [NSLayoutConstraint <span class="string">constraintWithItem:</span>self <span class="string">attribute:</span>NSLayoutAttributeWidth <span class="string">relatedBy:</span>NSLayoutRelationEqual <span class="string">toItem:</span>nil <span class="string">attribute:</span><span class="number">0</span> <span class="string">multiplier:</span><span class="number">0</span> <span class="string">constant:</span><span class="number">100</span>];</div><div class="line"> constraint.priority = <span class="number">800</span>;</div><div class="line"> constraint;</div><div class="line"> &#125;)];</div></pre></td></tr></table></figure>
<p>这样autoLayout就可以做出选择了，因为它自身添加的优先级比较低，它就可以选择superview添加的约束了。</p>
<p>然而，尽管这样可以解决问题，但正确的方式是通过<em> intrinsicContentSize</em>来指定它的高度。</p>
<h4 id="UIView的子类绝不应该给它的superview添加约束"><a href="#UIView的子类绝不应该给它的superview添加约束" class="headerlink" title="UIView的子类绝不应该给它的superview添加约束"></a>UIView的子类绝不应该给它的superview添加约束</h4><p>和上面的原因一样，子视图绝不应该给他的父视图添加约束。子视图的位置是由父视图决定的。</p>
<p>像这么做很糟糕：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)didMoveToSuperview &#123;</div><div class="line">     [<span class="keyword">super</span> didMoveToSuperview];</div><div class="line">     [self.superview <span class="string">addConstraint:</span>[NSLayoutConstraint <span class="string">constraintWithItem:</span>self <span class="string">attribute:</span>NSLayoutAttributeCenterX <span class="string">relatedBy:</span>NSLayoutRelationEqual <span class="string">toItem:</span>self.superview <span class="string">attribute:</span>NSLayoutAttributeCenterX <span class="string">multiplier:</span><span class="number">1</span> <span class="string">constant:</span><span class="number">0</span>]];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>太糟糕了</em>，它不能离开相对于它的父视图的位置。所以，当父视图想把Awesome放到另一个位置上会怎么样？是的，就会抛出来另一个<em>Unable to simultaneously satisfy constraints</em>的问题。</p>
<h4 id="updateConstraints是用来更新约束条件的"><a href="#updateConstraints是用来更新约束条件的" class="headerlink" title="updateConstraints是用来更新约束条件的"></a>updateConstraints是用来更新约束条件的</h4><p>顾名思义，<code>updateConstraints</code>只是被用来更新需要的约束的。一个正确的实现<code>updateConstraints</code>的方式应该长这个样子：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)init</div><div class="line">&#123;</div><div class="line"> …</div><div class="line"> init stuff</div><div class="line"> …</div><div class="line"> _labelCenterYConstraints = [<span class="built_in">NSLayoutConstraint</span> constraintWithItem:label attribute:<span class="built_in">NSLayoutAttributeCenterY</span> relatedBy:<span class="built_in">NSLayoutRelationEqual</span> toItem:<span class="keyword">self</span> attribute:<span class="built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="number">1</span> constant:<span class="number">0</span>];</div><div class="line"> [<span class="keyword">self</span> addConstraint:_labelCenterYConstraints];</div><div class="line"> label.text = @”I Am truly awesome!”;</div><div class="line"> …</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)updateConstraints &#123;</div><div class="line">  <span class="keyword">self</span>.labelCenterYConstraints.constant = <span class="keyword">self</span>.labelVerticalDisplacement;</div><div class="line">  [<span class="keyword">super</span> updateConstraints];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在需要的地方：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">awesome.labelVerticalDisplacement = <span class="number">40</span><span class="comment">;</span></div><div class="line">[awesome setNeedsUpdateConstraints]<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>调用<code>setNeedsUpdateConstraints</code>会使autoLayout重新计算布局，因此会调用<em> updateConstraints</em>，从而读取新的label状态并更新约束。</p>
<p>在上面的例子中，你本可以只更新<em> _labelCenterYConstraints</em>这个约束，如果你的视图暴露出约束，或者如果你可以简单获得一个约束，那就直接设置约束的常量好了，不必使用<em>updateConstraints</em>。所以，上面的代码也可以这么实现：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awesome.labelCenterYConstraints.constant = <span class="number">40</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>一个<strong>非常糟糕</strong>的<em> updateConstraints</em>的实现会长这个样子：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)updateConstraints &#123;</div><div class="line">  [<span class="keyword">self</span> removeConstraints:<span class="keyword">self</span>.constraints];</div><div class="line">  <span class="comment">/*</span></div><div class="line">  create the constraint here</div><div class="line">  */</div><div class="line">  [<span class="keyword">super</span> updateConstraints];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这么做是非常错误的，因为：</p>
<ul>
<li>系统调用<em> updateConstraints</em>很多次，因此移除或者重新创建可能会校验约束的合理性。</li>
<li><code>[self removeConstraints:self.constraints]</code>; 会移除包括xib或storyboard创建的所有约束条件，你该怎么重新创建这些约束？（赶紧说你不能！）</li>
<li>上面的<em>updateConstraints</em>实现会覆盖掉<em>intrinsicContentSize</em>的效果，因为你在调用<code>[super updateConstraints];</code>后移除了系统添加的约束条件。</li>
<li><code>updateConstraints</code>应该被用来创建约束条件一次，然后仅仅移除掉失效的约束。它绝不该是一个移除所有约束再把每个传过来的布局添加上的地方。（感谢Alexis提供以下补充。）</li>
</ul>
<p>正确的实现方式是这样：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)updateConstraints &#123;</div><div class="line">  <span class="keyword">if</span> (!didSetConstraints) &#123;</div><div class="line"> didSetConstraints = <span class="literal">YES</span>;</div><div class="line">  <span class="comment">//create the constraint here</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//Update the constraints if needed</span></div><div class="line">  [<span class="keyword">super</span> updateConstraints];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在上面的代码中，创建约束的动作只会执行一次，然后在接下来的<em>updateConstraints</em>调用中，只会对这些已创建的约束的常量进行修改。</p>
<p>我一直在追寻真理！所以如果你有很多更好的实践经验，请在twitter上和我分享。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> AutoLayout </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Be an independent explorer, not a lazy coder]]></title>
      <url>http://www.calios.gq/2015/12/11/Be-an-independent-explorer-not-a-lazy-coder/</url>
      <content type="html"><![CDATA[<p>Here’s an SOF <a href="http://stackoverflow.com/a/18837736/1594792" title="http://stackoverflow.com/a/18837736/1594792" target="_blank" rel="external">answer</a> that makes me think.</p>
<p>Obviously, the asker required for the method of <em>simple code</em> of <a href="https://github.com/enormego/EGOCache" title="https://github.com/enormego/EGOCache" target="_blank" rel="external">EGOCache</a>  Library, since its responser didn’t provide any example or demo for it.</p>
<p>Two answers provided are very interesting. One gives line-by-line code —- who will refuse attractive and brief code? While the other one just tells you how to dive your head first and find out on your own.</p>
<p>It says as below.</p>
<blockquote>
<p>In the Objective-C world in a case like this when there isn’t as much documentation as I think there <em>should</em> be, I go straight to the header file. Then in your case I would look for a method named something like <code>setData</code> (I assumed this name even before I had read the header to answer this) which is here. Then you would use <code>dataForKey:</code> from here and finally <code>clearCache</code> from here so in short, yep your assumptions looked correct.</p>
<p>Give a man a fish, and you feed him for a day.</p>
</blockquote>
<p>It seems that we are gradually doted by the <em>Step-By-Step</em> tutorials and lose our independence to have a try. Of course, the tutorials are so friendly and helpful to fresh fish, meanwhile, they also make developers lazier.</p>
<p>In my aspect, developers are meant that you dare to explore spaces even unfamiliar to them, get down to issues, and grow up steadily even compared with yourself several days before. </p>
<p>Or else, you’re just a lazy coder.</p>
]]></content>
      
        
        <tags>
            
            <tag> PragmaticProgrammer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Checklist for renaming an iOS project totally]]></title>
      <url>http://www.calios.gq/2015/12/09/Checklist-for-renaming-an-iOS-project-totally/</url>
      <content type="html"><![CDATA[<h4 id="Checklist"><a href="#Checklist" class="headerlink" title="Checklist:"></a>Checklist:</h4><ul>
<li>Project name：<ol>
<li>Select your project in the project navigator, then select your project again in the project editor.</li>
<li>Choose View > Utilities > Show File Inspector.</li>
<li>In the file inspector, in the Identity and Type area, enter the new project name in the Name field.</li>
<li>Press Enter.</li>
<li>Click Rename to perform the rename operation.</li>
</ol>
</li>
<li>Project folder name.</li>
<li>Pod install/update.</li>
<li>Project name > Targets > Build Settings, search for your old project name.</li>
<li>PCH file.</li>
<li>Class annotation and category name.</li>
</ul>
<hr>
<p><strong>Ref:</strong></p>
<p><a href="https://developer.apple.com/library/mac/recipes/xcode_help-project_editor/RenamingaProject/RenamingaProject.html" target="_blank" rel="external">https://developer.apple.com/library/mac/recipes/xcode_help-project_editor/RenamingaProject/RenamingaProject.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[EnjoyMyCoffee-1：项目自动编译及打包]]></title>
      <url>http://www.calios.gq/2015/12/01/EnjoyMyCoffee-1%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%E5%8F%8A%E6%89%93%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>每到项目提测之后，就需要几乎天天打包ipa上传到ftp上去，大体步骤如下：<br>1.在Xcode中将代码编译打包为ipa，并重命名为***-currentDateTime.ipa；<br>2.打开FileZilla，连接到服务器上的ftp；<br>3.下载已有的plist文件到本地，更改其中的小版本号；<br>4.删除ftp上已有的***_test.ipa文件和***_test.plst文件；<br>5.将本地打包好的***_test.ipa文件和更改后的plist文件上传；<br>6.关闭FileZilla。</p>
<p>好麻烦。。。</p>
<p>简直是浪费时间。所以，为什么不写段代码替我做这些无聊的事呢？至少可以每天留出品尝一杯咖啡的时间。</p>
<p>Let’s move.</p>
<hr>
<h4 id="编译Build"><a href="#编译Build" class="headerlink" title="编译Build"></a>编译Build</h4><p>Xcode提供了命令行build的命令，即xcodebuild。可以通过<code>man xcodebuild</code>查看该命令的所有详细说明，也可以用<code>xcodebuild -usage</code>查看所有的可用参数。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcodebuild -workspace YourProject<span class="selector-class">.xcworkspace</span> -scheme YourProject -configuration <span class="string">"Release"</span> -destination generic/platform=iOS <span class="selector-id">#build</span> BUILD_DIR=<span class="string">"$BUILD_DIR"</span> BUILD_ROOT=<span class="string">"$BUILD_ROOT"</span></div></pre></td></tr></table></figure></p>
<p>这里特别说明下<code>-destination</code>这个参数。如果要指定运行在某一个已连接设备，需要使用<code>iOS</code>选项。它支持<code>id</code>和<code>name</code>两个key，二者任取其一。<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">xcodebuild \</div><div class="line">  -<span class="ruby">workspace YourProject.xcworkspace \</span></div><div class="line">  -<span class="ruby">scheme MyApp \</span></div><div class="line">  -<span class="ruby">destination <span class="string">"platform=iOS,name=Gio's iPhone"</span> \</span></div><div class="line">  clean test</div><div class="line"></div><div class="line">xcodebuild \</div><div class="line">  -<span class="ruby">workspace YourProject.xcworkspace \</span></div><div class="line">  -<span class="ruby">scheme MyApp \</span></div><div class="line">  -<span class="ruby">destination <span class="string">'platform=iOS,id=YOUR_PHONE_UUID'</span> \</span></div><div class="line">  clean test</div></pre></td></tr></table></figure></p>
<p>同理，运行在模拟器中也是类似。更多详情见<a href="http://www.mokacoding.com/blog/xcodebuild-destination-options/" target="_blank" rel="external">这里</a>。由于我的使用场景通常是用企业账号来打包上传、供测试使用，所以这里使用的是<code>-destination generic/platform=iOS</code>，并不指定某一确切设备。</p>
<h4 id="打包成ipa"><a href="#打包成ipa" class="headerlink" title="打包成ipa"></a>打包成ipa</h4><p>上一步build后生成了YourProject.app文件，可以用xcrun来将其打包成ipa。<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">xcrun</span> -sdk iphoneos PackageApplication -v <span class="string">"<span class="variable">$APP_PATH</span>"</span> -o <span class="string">"<span class="variable">$IPA_PATH</span>"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>这里补充一个小的知识点：.app和.ipa的差别：<br>.app是应用程序包。它包括可执行文件、Info.plist文件、图标、launch图片和一些其他应用程序资源。应用程序包是最终安装在设备上的部分。<br>.ipa是对.app应用程序包和一些只是为了供iTunes使用的文件（比如iTunesArtwork）的归档。</p>
</blockquote>
<p>另外，这里有一个需要注意的地方，xcrun需要<strong>绝对路径</strong>，相对路径是不管用的，会报类似这样的错：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun fails with <span class="keyword">zip</span> I/O <span class="keyword">error</span>: <span class="keyword">No</span> such <span class="keyword">file</span> or directory <span class="keyword">zip</span> <span class="keyword">error</span>:…</div></pre></td></tr></table></figure></p>
<p>你可以用<code>$pwd/YourProject</code>来获取。</p>
<h4 id="重命名ipa"><a href="#重命名ipa" class="headerlink" title="重命名ipa"></a>重命名ipa</h4><p>如果每次打包的ipa都是同样的名字，估计你很快就会分不清哪个版本是哪个版本，所以将ipa重命名添加上打包时间不失为一个不错的选择。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BUILD_DATETIME=<span class="string">"$(date +%Y%m%d%H%M%S)"</span></div><div class="line">mv $IPA_PATH <span class="string">"$BUILD_DIR/$BUILD_CONFIG-iphoneos/$TARGET_NAME-$BUILD_DATETIME.ipa"</span></div></pre></td></tr></table></figure></p>
<p>到此为止，需要上传到ftp的ipa已经准备好了。详细代码在<a href="https://github.com/CaliosD/xcode_tool/blob/master/build_n_package.sh" target="_blank" rel="external">这里</a>：。接下来的一篇，就要开始上传啦～</p>
<hr>
<p><strong>Ref:</strong></p>
<ul>
<li><a href="http://www.mokacoding.com/blog/xcodebuild-destination-options/" target="_blank" rel="external">Xcodebuild Destination Cheatsheet</a></li>
<li><a href="http://stackoverflow.com/questions/2949916/what-is-different-betwen-ipa-and-app-format-in-using-iphone" target="_blank" rel="external">what is different betwen .ipa and .app format in using iphone?</a></li>
<li><a href="http://stackoverflow.com/questions/25415333/xcrun-fails-with-zip-i-o-error-no-such-file-or-directory-zip-error" target="_blank" rel="external">xcrun fails with zip I/O error: No such file or directory zip error</a></li>
<li><a href="http://blog.devtang.com/blog/2012/02/16/apply-daily-build-in-ios-project/" target="_blank" rel="external">给iOS工程增加Daily Build</a></li>
<li><a href="http://stackoverflow.com/questions/20551566/display-current-date-and-time-without-punctuation" target="_blank" rel="external">Display current date and time without punctuation</a></li>
<li><a href="http://objccn.io/issue-17-2/" target="_blank" rel="external">代码签名探析</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Bash </tag>
            
            <tag> EnjoyMyCoffee </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】如何避免程序崩溃-6：属性和存取器]]></title>
      <url>http://www.calios.gq/2015/11/26/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-6%EF%BC%9A%E5%B1%9E%E6%80%A7%E5%92%8C%E5%AD%98%E5%8F%96%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://inessential.com/2015/05/27/how_not_to_crash_6_properties_and_acce" target="_blank" rel="external">http://inessential.com/2015/05/27/how_not_to_crash_6_properties_and_acce</a></p>
<hr>
<p>这个东西让我有点发怵：<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> (void)someRandomMethod &#123;</span></div><div class="line">  some stuff…</div><div class="line">  _thing = otherThing;</div><div class="line">  other stuff…</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以证明这是正确的。你使用ARC，所以属性retain和release的计数会自动增减。又没有人在观察_thing.</p>
<p>好吧。它是合法的，也是管用的。</p>
<p>假设你发现那个thing应该是可观察的。所以每处设置thing的值，你都会添加调用的方法：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">[self willChangeValueForKey:kThingKey]</span><span class="comment">;</span></div><div class="line"><span class="attr">_thing</span> = otherThing;</div><div class="line"><span class="section">[self didChangeValueForKey:kThingKey]</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>也是合法的，也管用。</p>
<p>即将出现的问题是：以后，比如明天，或者六个月之后，你或者其他人给thing写了个自定义的setter —— 可能是因为你需要在设置thing的时候添加类似<code>self.needsDisplay = YES</code>这样的东西 —— 然后你就出现了一个bug，无论何时thing的改变都不会让view重新绘制。</p>
<p>或者更糟糕：可能未来的自定义setter打破了一个观察者，并在thing改变的时候添加一个新的。由于你是直接设置_thing的，观察模式不会正确的保留，然后你就崩溃了。</p>
<p>答案是遵循一个简单的规则：<strong>在set或get属性的时候，使用存取器。</strong></p>
<p>换句话说，这么写：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">－ (<span class="literal">void</span>)someRandomMethod &#123;</div><div class="line">  some stuff…</div><div class="line">  <span class="built_in">self</span>.thing = otherThing;</div><div class="line">  other stuff…</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不管你是否自定义setter，这么写都管用。当你设置thing的时候，就不用这也担心那也管了。</p>
<p>（这里是一个编程规则的简单测试：如果你遵循它就不会犯错，但是<em>不</em>遵循它就<em>可能</em>犯错，那你最好还是遵循它。）</p>
<p>（不要担心使用存取器引起的性能问题。我是一个性能推崇者，而我从未发现这样会引起问题。如果你的app出现了性能问题，剖析一下，找到真正的原因。）</p>
<h4 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h4><p>有四个地方你 <em>不</em> 应该使用存取器：<strong>init方法，dealloc，自定义的getter和自定义getter。</strong> 这样可以避免副作用。</p>
<p>如果你 <em>需要</em> 副作用 —— 比如说，在dealloc中移除观察者 —— 就是那些通常放在setter中的部分，可以把它放在单独的方法里，然后从setter和dealloc中调用它。（也要考虑到在init和dealloc之外添加和移除观察者可能标志着你的代码需要重构。）</p>
<h4 id="自动合成"><a href="#自动合成" class="headerlink" title="自动合成"></a>自动合成</h4><p>千万不要创建实例变量。而要声明属性。</p>
<p>属性会自动合成实例变量。只有当Xcode告诉你你需要的时候再用@synthesize。</p>
<h4 id="使用ARC"><a href="#使用ARC" class="headerlink" title="使用ARC"></a>使用ARC</h4><p>如果你有非ARC的代码，把它更新到ARC吧。手动管理内存是极易犯错的。即使是有多年经验的人也会一次次的犯错，而错误会导致崩溃（或者好一点，导致内存泄漏或内存被遗弃）。</p>
<p>通常情况下，我并不主张对于运行良好的代码进行编辑 —— 但是如果你有需要维护的代码，那就帮自己也帮同伴一个忙，把它转化成ARC吧。（随着时间推移，每个人都会在手动内存管理的路上越走越糟。而成为这样的英雄也不会有任何加分。）</p>
<p>（可能使用ARC会让你陷入性能问题，特别是当你在处理loop中的大量对象时。记得使用自动释放池。别轻易下断言：用分析器说话。）</p>
<p>（同时：ARC转换器可能不会总是如你所愿。如果你使用它的话，检查它改变的地方。记住每次转化一个文件。Target可以允许ARC和非ARC同时存在。）</p>
<h4 id="不要用-这个"><a href="#不要用-这个" class="headerlink" title="不要用 -> 这个"></a>不要用 -> 这个</h4><p>这个曾让我神经崩溃：thing->property。别这么干。</p>
<h4 id="dealloc"><a href="#dealloc" class="headerlink" title="dealloc"></a>dealloc</h4><p>如果你不需要dealloc（由于使用ARC），那就不要写它。没必要在dealloc中把属性设置为nil。</p>
<p>delegate是个明显的特例：把delegate置为空。</p>
<h4 id="使用weak"><a href="#使用weak" class="headerlink" title="使用weak"></a>使用weak</h4><p>Weak太棒了。比如，delegate就应该是weak。</p>
<p>父类应该持有它们的子类，但是子类应该持有它们父类的弱引用（如果存在引用的话）。设置weak会让你避开那些<a href="http://www.calios.gq/2015/11/12/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-1%EF%BC%9AKVO%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%BB%91%E5%AE%9A/" title="http://www.calios.gq/2015/11/12/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-1%EF%BC%9AKVO%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%BB%91%E5%AE%9A/">用来解除循环引用的invalidate方法</a>。</p>
<p>无论在任何情况下都不要使用unsafe_unretained。那是个陷阱。你可能也会这么写：</p>
<pre><code>define CRASHING_BUG unsafe_unretained
</code></pre><p>顾名思义，它叫做<em>不安全</em>。</p>
<p>不要带着剪刀跑。嘿 —— 甚至不要碰那些剪刀。剪刀有毒。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 译言 </tag>
            
            <tag> NotToCrashSeries </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】如何避免程序崩溃-5：线程（二）]]></title>
      <url>http://www.calios.gq/2015/11/26/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-5%EF%BC%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://inessential.com/2015/05/26/how_not_to_crash_5_threading_part_2" target="_blank" rel="external">http://inessential.com/2015/05/26/how_not_to_crash_5_threading_part_2</a></p>
<hr>
<p>我<a href="http://www.calios.gq/2015/11/19/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-4%EF%BC%9A%E7%BA%BF%E7%A8%8B/">上一篇关于线程</a>的文章留下来一个开放的问题：在主线程以外的代码是如何交流的，又如何 —— 安全地 —— 返回主线程。</p>
<p>哪个对象创造后台任务，哪个对象就处理相应的结果。这是硬性规定。</p>
<p>通常创建任务的对象都是持续在整个app生命周期中的。一个例子可能是图片缓存，缓存可能会在app的生命周期中被清空，但是缓存对象是一直存在的。</p>
<p>另一个例子：比如说Vesper有一个VSAccount对象。<em>一直</em> 都只有一个VSAccount对象。用户可能有也可能没有服务器的账号。他们可以选择使用哪个服务器的账号。但是只有唯一的VSAccount对象持续于整个app的生命周期。</p>
<p>(注意：显然，一个管理多个账户的应用会做一些不同的处理。但是Vesper最多管理一个服务器账户，所以这样做还不错。在Vesper的例子中，多个账户会遵守YAGNI规则。)</p>
<blockquote>
<p>译者注：YAGNI，即You Ain’t Gonna Need It，适可为止原则，指的是只需要将应用程序必需的功能包含进来，而不要试图添加任何其他你认为可能需要的功能。</p>
</blockquote>
<p>VSAccount对象负责向服务器发送http请求，处理返回的结果。它会在后台队列中把JSON转化成中间对象。</p>
<p>它通过NSData－to－process和一个回调block来调用JSON处理器。当处理器结束的时候，它会在主线程调用block：</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (callback) &#123;</div><div class="line">  dispatch\<span class="variable">_async</span>(dispatch\<span class="variable">_get</span>\<span class="variable">_main</span>\<span class="variable">_queue</span>(), ^&#123;</div><div class="line">	callback(parsedObjects)</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这对于我来说是一个如此常用的模式 —— 在主线程上调用需要一个参数的block —— 以至于我为它写了一个通用方法。JSON处理器的确就是做了这样的事情：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BSCallBlockWithParameter(<span class="name">callback</span>, parsedObjects)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>BSCallBlockWithParameter长这个样子：</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!callback)</div><div class="line">  return;</div><div class="line">&#125;</div><div class="line">dispatch\<span class="variable">_async</span>(dispatch\<span class="variable">_get</span>\<span class="variable">_main</span>\<span class="variable">_queue</span>(), ^&#123;</div><div class="line">  callback(parsedObjects);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我一直用这个。非常方便。</p>
<h4 id="使用这种方法的关键"><a href="#使用这种方法的关键" class="headerlink" title="使用这种方法的关键"></a>使用这种方法的关键</h4><p>我从来都不想担心创建后台任务的对象会不翼而飞，所以我只通过延续在app整个生命周期的对象创建后台任务。</p>
<p>你肯定也不想面临任务完成并回调之前、创建后台任务的对象不翼而飞的状况（或者部分或彻底分崩离析）。这是个潜在的复杂问题，我甚至不想去考虑它。（对于初学者而言，我<em>讨厌</em>weak－self满天飞。）</p>
<p>这也正是你在写不会崩溃的代码时需要的具备的心态：事情一旦是复杂的，那么它就是易出错的。想办法让它异常简单。</p>
<p>（你可能会举出复杂的例子，并且证明它的正确性 —— 但是以后你会不会有所质疑、觉得这样的代码需要验证？如果你稍有偏差它是不是就会挂掉？如果其他人使用它呢？）</p>
<p>所以，我用简单的办法解决问题：使用不会被释放的对象。</p>
<p>但是有一个需要谨记及避免的事：回调block可以安全地调用类方法和C语言函数。如果实例消失的话，实例方法就是不安全的 —— 但是类方法和C语言函数理论上是可以安全调用的。</p>
<p>我不经常使用这个知识点，但是我会不断的发现它的确有用。要么谨慎点使用它，要么干脆不用。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 译言 </tag>
            
            <tag> NotToCrashSeries </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过代码加载storyboard中的class]]></title>
      <url>http://www.calios.gq/2015/11/25/%E9%80%9A%E8%BF%87%E4%BB%A3%E7%A0%81%E5%8A%A0%E8%BD%BDstoryboard%E4%B8%AD%E7%9A%84class/</url>
      <content type="html"><![CDATA[<p>1.在attribute inspector中给要加载的view controller添加identifier；</p>
<p><img src="http://i12.tietuku.com/b2e09019a0d77401.png" alt=""></p>
<p>2.添加如下代码：</p>
<pre><code>UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@&quot;MainStoryboard&quot; bundle:nil];
DetailViewController *detailViewController = [storyboard instantiateViewControllerWithIdentifier:@&quot;DetailViewController&quot;];
[self.navigationController pushViewController:detailViewController animated:YES];
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Storyboard </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[“技术调研”时我们做些什么？]]></title>
      <url>http://www.calios.gq/2015/11/23/%E2%80%9C%E6%8A%80%E6%9C%AF%E8%B0%83%E7%A0%94%E2%80%9D%E6%97%B6%E6%88%91%E4%BB%AC%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>最近的一个项目涉及到视频播放，在一段时间的“技术调研”之后完成的项目的完整编码和测试。回过头看时，发现自己在所谓的“技术调研”阶段简直是在乱撞，毫无章法。因此总结一文于此。以备后查。</p>
<h4 id="脑洞开一下"><a href="#脑洞开一下" class="headerlink" title="脑洞开一下"></a>脑洞开一下</h4><p>和拍照相仿，都是需要一个主题，也就是要表现什么。同样，调研的主体要明确。比如说，要研究视频播放。那么，思维发散开来，视频播放涉及到哪些东西？（参考但并不仅限于下图）</p>
<p><img src="http://7xkwcv.com1.z0.glb.clouddn.com/What%27re%20we%20talking%20about%20with%20TR%20%3F.png" alt=""></p>
<p>终于，开始进入正题。</p>
<h4 id="As-A-…"><a href="#As-A-…" class="headerlink" title="As A …"></a>As A …</h4><p>作为一个视频播放的工具，要能播放视频（能够同时支持音频更好）。那么：</p>
<ul>
<li>视频来自哪里呢：要么是本地资源，要么是网络资源、流媒体一类。</li>
<li>能支持什么格式：mp4？m3u8？wav？mp3？</li>
</ul>
<blockquote>
<p>(PS: 打印audiovisualMIMETypes属性查看AVPlayer支持哪些格式：</p>
<p>“audio/aacp”,<br>“audio/mpeg3”,<br>“audio/mp3”,<br>“audio/x-caf”,<br>“audio/mpeg”,<br>“audio/x-mpeg3”,<br>“audio/wav”,<br>“audio/scpls”,<br>“audio/mp4”,<br>“audio/x-mpg”,<br>“audio/x-wav”,<br>“audio/x-aiff”,<br>“audio/x-m4p”,<br>“audio/x-scpls”,<br>“audio/x-mpegurl”,<br>“audio/x-aac”,<br>“audio/3gpp”,<br>“audio/basic”,<br>“audio/x-m4a”,<br>“audio/x-mpeg”,<br>“audio/wave”,<br>“audio/x-m4r”,<br>“audio/x-mp3”,<br>“audio/AMR”,<br>“audio/aiff”,<br>“audio/3gpp2”,<br>“audio/aac”,<br>“audio/mpg”,<br>“audio/mpegurl”,<br>“audio/x-m4b”,</p>
<p>“video/3gpp2”,<br>“video/quicktime”,<br>“video/mp4”,<br>“video/avi”,<br>“video/x-m4v”,<br>“video/3gpp”,</p>
<p>“text/vtt”,</p>
<p>“application/mp4”,<br>“application/x-mpegurl”<br>“application/vnd.apple.mpegurl”)</p>
</blockquote>
<ul>
<li>播放的场景：在应用中前台播放？扔到后台去了是自动暂停还是继续播放？</li>
<li>对于单一资源而言，要能够：<ul>
<li>播放／暂停；</li>
<li>改变播放进度；</li>
<li>音量控制；</li>
<li>全屏显示；</li>
<li>……</li>
</ul>
</li>
<li>对于多个资源而言，可能需要：<ul>
<li>视频队列的播放；</li>
<li>视频间的切换；</li>
<li>视频浏览；</li>
<li>……</li>
</ul>
</li>
</ul>
<h4 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h4><p>在iOS中，怎么实现这个播放视频的功能？</p>
<p><strong>1.需要系统的什么类库：</strong></p>
<ul>
<li>MediaPlayer.framework中的MPMoviePlayerController来实现的确简单，几句代码就够了，而且支持本地视频和网络视频，但是对于界面的自定义不强。pass掉。（<em>在iOS9开始被标记为了弃用，改用AVPlayerViewController了。</em>）</li>
<li>AVFoundation。AVPlayer存在于其中。它更接近底层，所以灵活性也更强。<em>但是，</em>AVPlayer本身并没有view属性，如果要显示必须创建一个播放器层AVPlayerLayer用于展示。*</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DPlayerLayerView.h</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DPlayerLayerView</span> : <span class="title">UIView</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVPlayer</span> *player;</div><div class="line">-(<span class="keyword">void</span>)setVideoFillMode:(<span class="built_in">NSString</span> *)fillMode;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// DPlayerLayerView.m</span></div><div class="line"><span class="meta">#import <span class="meta-string">"DPlayerLayerView.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DPlayerLayerView</span></span></div><div class="line"></div><div class="line">+(Class)layerClass</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">AVPlayerLayer</span> <span class="keyword">class</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 单纯使用AVPlayer类是无法显示视频的，要将视频层添加至AVPlayerLayer中，这样才能将视频显示出来。</span></div><div class="line">-(<span class="built_in">AVPlayer</span> *)player</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [(<span class="built_in">AVPlayerLayer</span> *)[<span class="keyword">self</span> layer] player];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)setPlayer:(<span class="built_in">AVPlayer</span> *)player</div><div class="line">&#123;</div><div class="line">    [(<span class="built_in">AVPlayerLayer</span> *)[<span class="keyword">self</span> layer] setPlayer:player];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 指定video在player layer的bounds内如何显示。（默认是AVLayerVideoGravityResizeAspect）</span></div><div class="line"><span class="comment">/* 可选项：</span></div><div class="line"> * AVLayerVideoGravityResizeAspect，保证宽高比，在layer的bounds内正常显示；</div><div class="line"> * AVLayerVideoGravityResizeAspectFill，保证宽高比，填充满layer的bounds；</div><div class="line"> * AVLayerVideoGravityResize，拉伸来填满layer的bounds。</div><div class="line"> */</div><div class="line">-(<span class="keyword">void</span>)setVideoFillMode:(<span class="built_in">NSString</span> *)fillMode</div><div class="line">&#123;</div><div class="line">    <span class="built_in">AVPlayerLayer</span> *playerLayer = (<span class="built_in">AVPlayerLayer</span> *)[<span class="keyword">self</span> layer];</div><div class="line">    playerLayer.videoGravity = fillMode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>AVKit。iOS8以来的新秀。用来代替MPMoviePlayerViewController。基于AVFoundation。它提供了视频播放的UI，又可以播放任何来自AVFoundation的<code>AVPlayer</code>对象。（由于项目需要支持iOS7，所以，只能忍痛割爱T_T）</li>
</ul>
<p><strong>2.API</strong></p>
<p>之前把AVPlayer类中的方法梳理了一遍，<a href="http://www.calios.gq/2015/09/24/AVPlayer-Class-Reference/" title="http://www.calios.gq/2015/09/24/AVPlayer-Class-Reference/">在这里</a>，AVPlayerItem和AVURLAsset时间允许的话也应该整理一下。比如AVPlayerItem中的<code>cancelPendingSeeks</code>和AVAsset中的<code>cancelLoading</code>，就帮我解决了一个困扰很久的问题。API就在那儿，不近不远。你看到了，就找到了光明；看不到，就继续在黑暗中摸索。</p>
<p><strong>3.来自苹果的demo</strong></p>
<p>这就是苹果赠予开发者的彩蛋啊。在网络上茫茫如海的资料中，官网demo永远是那个指引的灯塔，是经常让你感慨“原来可以这么写这么简单”的存在。</p>
<p>视频播放相关的demo有：</p>
<ul>
<li>MoviePlayer；</li>
<li>AVPlayerDemo；</li>
<li>AVLoupe。</li>
</ul>
<p>（PS：Xcode自带的Document其实很好用，Command ＋ Shift ＋ 数字0，调出来就可以直接搜索，可加标签，可看demo，和Dash的差别就是不能在这里看收藏的代码段，但是可以在Utility View中看啊～）</p>
<p><strong>4.其他教程</strong></p>
<p>能够在接触一个事物／模块的初期看到一篇通俗易懂、条理清晰的教程也是个幸运的事。以下列出几篇从中受益匪浅的，以此感谢各位作者。</p>
<p><a href="http://www.cnblogs.com/kenshincui/p/4186022.html" target="_blank" rel="external">http://www.cnblogs.com/kenshincui/p/4186022.html</a></p>
<p><a href="https://www.shinobicontrols.com/blog/ios8-day-by-day-day-26-avkit" target="_blank" rel="external">https://www.shinobicontrols.com/blog/ios8-day-by-day-day-26-avkit</a></p>
<h4 id="Trick-or-treat"><a href="#Trick-or-treat" class="headerlink" title="Trick or treat?"></a>Trick or treat?</h4><p>除了上面列出的基本功能外，还有一些可能现在不是必须、但很常见的功能点。比如：</p>
<ul>
<li>获取视频的缩略图；</li>
<li>清理缩略图的缓存；</li>
<li>资源的缓存；</li>
<li>本地视频资源的播放；</li>
<li>清理已下载资源的缓存；</li>
<li>资源队列；</li>
<li>跳到指定位置开始播放；</li>
<li>网络状况切换时的处理；</li>
<li>限制带宽的情况下，对于码流和清晰度的支持(一般来说，如果是IM的宽带，在网上只能看不超过128kbps的视频，超过128kbps的视频只能等视频缓冲才能顺利观看。)；</li>
<li>……</li>
</ul>
<h4 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h4><p>对于视频有以上的问题需要考虑，那么其他相关的呢？比如：</p>
<ul>
<li>音频的播放？AVPlayer本身可以播放mp3等格式的音频；同属AVFoundation中的<code>AVAudioPlayer</code>也可以播放音频，但仅限于本地文件。</li>
<li>在音频/视频播放时，对于耳机的支持？</li>
<li>尤其是视频的播放时，对于AirPlay的支持？</li>
<li>……</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>本文并没有很详细的列出在处理视频播放时具体的API，更多的是想给之后类似的“技术调研”提供一种思考的模式，不至于上来就一头乱撞。实现一个功能不难，通过实现功能来训练自己的思维能力，才能让自己更有效率的提升吧。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> PragmaticProgrammer </tag>
            
            <tag> 脑洞开一开 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Bash】grep常用命令及举例]]></title>
      <url>http://www.calios.gq/2015/11/19/%E3%80%90Bash%E3%80%91grep%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E4%B8%BE%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/" title="http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/" target="_blank" rel="external">http://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/</a></p>
<hr>
<p>1.忽略大小写 -i<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">语法：grep -i “<span class="keyword">string</span>” <span class="keyword">FILE</span></div></pre></td></tr></table></figure></p>
<p>2.查找完整的单词，而不是子字符串 -w<br>3.展示匹配后的N行<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">语法：<span class="keyword">grep</span> -A <span class="symbol">&lt;N&gt;</span> “<span class="built_in">string</span>” FILE</div><div class="line"></div><div class="line">$ <span class="keyword">grep</span> -A <span class="number">3</span> -i “example” demo_text</div></pre></td></tr></table></figure></p>
<p>4.展示匹配前的N行<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">语法：<span class="keyword">grep</span> -B <span class="symbol">&lt;N&gt;</span> “<span class="built_in">string</span>” FILENAME</div><div class="line"></div><div class="line">$ <span class="keyword">grep</span> -B <span class="number">2</span> “single” demo_text</div></pre></td></tr></table></figure></p>
<p>5.展示匹配附近的N行<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ grep -C “<span class="keyword">Example</span>” demo_text</div></pre></td></tr></table></figure></p>
<p>6.高亮显示搜索关键词 GREP_OPTIONS<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">export</span> GREP_OPTIONS=‘--color=<span class="keyword">auto</span>’ GREP_COLOR=‘<span class="number">100</span>;<span class="number">8</span>’</div></pre></td></tr></table></figure></p>
<p>7.递归搜索所有文件 -r<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grep -r “remiss” *</div></pre></td></tr></table></figure></p>
<p>8.计算匹配的数量 -c<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">语法：<span class="keyword">grep</span> -<span class="keyword">c</span> “pattern” filename</div><div class="line"></div><div class="line">$ <span class="keyword">grep</span> -<span class="keyword">c</span> “<span class="keyword">go</span>” demo_text</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>9.只显示匹配规则的文件名字 -l<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">grep</span> -l <span class="keyword">this</span> demo_*</div><div class="line">demo_file</div><div class="line">demo_file1</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Bash </tag>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vimium(Chrome扩展)常用按键列表]]></title>
      <url>http://www.calios.gq/2015/11/19/Vimium-Chrome%E6%89%A9%E5%B1%95-%E5%B8%B8%E7%94%A8%E6%8C%89%E9%94%AE%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h4 id="当前页面的导航："><a href="#当前页面的导航：" class="headerlink" title="当前页面的导航："></a>当前页面的导航：</h4><table>
<thead>
<tr>
<th>按键</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td>?</td>
<td>显示帮助对话框，列出所有可用按键  </td>
</tr>
<tr>
<td>h</td>
<td>向左滚  </td>
</tr>
<tr>
<td>j</td>
<td>向下滚  </td>
</tr>
<tr>
<td>k</td>
<td>向上滚  </td>
</tr>
<tr>
<td>l</td>
<td>向右滚  </td>
</tr>
<tr>
<td>gg</td>
<td>滚到页首  </td>
</tr>
<tr>
<td>G</td>
<td>滚到页尾  </td>
</tr>
<tr>
<td>d</td>
<td>向下滚半屏 J</td>
</tr>
<tr>
<td>u</td>
<td>向上滚半屏</td>
</tr>
<tr>
<td>f</td>
<td>在当前标签打开链接</td>
</tr>
<tr>
<td>F</td>
<td>在新标签打开链接</td>
</tr>
<tr>
<td>r</td>
<td>重新加载</td>
</tr>
<tr>
<td>gs</td>
<td>查看源代码</td>
</tr>
<tr>
<td>i</td>
<td>进入insert模式 —— 所有命令都会被忽略，直到你按下Esc来退出</td>
</tr>
<tr>
<td>yy</td>
<td>将当前url复制到剪切板</td>
</tr>
<tr>
<td>yf</td>
<td>将一个url复制到剪切板</td>
</tr>
</tbody>
</table>
<h4 id="导航至新页面："><a href="#导航至新页面：" class="headerlink" title="导航至新页面："></a>导航至新页面：</h4><table>
<thead>
<tr>
<th>按键</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td>o</td>
<td>打开url，书签，或者历史记录</td>
</tr>
<tr>
<td>O</td>
<td>在新标签打开url，书签，或者历史记录</td>
</tr>
<tr>
<td>b</td>
<td>打开书签</td>
</tr>
<tr>
<td>B</td>
<td>在新标签打开书签</td>
</tr>
</tbody>
</table>
<h4 id="使用查找："><a href="#使用查找：" class="headerlink" title="使用查找："></a>使用查找：</h4><table>
<thead>
<tr>
<th>按键</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td>/</td>
<td>进入查找模式 —— 输入你查找的内容，按enter开始搜索，或者Esc退出</td>
</tr>
<tr>
<td>n</td>
<td>向前循环查找下一个匹配项</td>
</tr>
<tr>
<td>N</td>
<td>向后循环查找前一个匹配项</td>
</tr>
</tbody>
</table>
<p>对于高级用法，可以查看wiki中的<a href="https://github.com/philc/vimium/wiki/Find-Mode" title="https://github.com/philc/vimium/wiki/Find-Mode" target="_blank" rel="external">正则表达式</a>。</p>
<h4 id="导航历史："><a href="#导航历史：" class="headerlink" title="导航历史："></a>导航历史：</h4><table>
<thead>
<tr>
<th>按键</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td>H</td>
<td>回退到历史中的上一页</td>
</tr>
<tr>
<td>L</td>
<td>前进到历史中的下一页</td>
</tr>
</tbody>
</table>
<h4 id="操作标签："><a href="#操作标签：" class="headerlink" title="操作标签："></a>操作标签：</h4><table>
<thead>
<tr>
<th>按键</th>
<th>作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td>J,gT</td>
<td>前往左边一个标签</td>
</tr>
<tr>
<td>K,gt</td>
<td>前往右边一个标签</td>
</tr>
<tr>
<td>g0</td>
<td>前往第一个标签</td>
</tr>
<tr>
<td>g$</td>
<td>前往最后一个标签</td>
</tr>
<tr>
<td>t</td>
<td>新建标签</td>
</tr>
<tr>
<td>yt</td>
<td>复制当前标签</td>
</tr>
<tr>
<td>x</td>
<td>关闭当前标签</td>
</tr>
<tr>
<td>X</td>
<td>重新打开关闭的标签</td>
</tr>
<tr>
<td>T</td>
<td>在打开的标签中搜索</td>
</tr>
<tr>
<td>\<a-p\></a-p\></td>
<td>钉住/取消钉住当前标签</td>
</tr>
</tbody>
</table>
<h4 id="切换模式"><a href="#切换模式" class="headerlink" title="切换模式"></a>切换模式</h4><p>这里主要说visual mode（可视模式）和caret mode（光标模式）之间的切换。</p>
<p>比如说我在网站上阅读一篇文章，想选择并复制一段文字，这时我应该怎样操作？</p>
<ul>
<li>假设我是在normal mode（普通模式）下，按<code>v</code>即可进入可视模式，通过hjkl进行左下上右的选择，按<code>V</code>即可选择行；</li>
<li>假设我已经进入可视模式，但光标所在位置并不是我想选择的地方，可以按<code>c</code>进入光标模式，通过hjkl进行光标移动，再按<code>v/V</code>在合适的位置开始选择；</li>
<li>在可视模式下，按<code>o</code>可以将光标切换到选中内容到另一端。</li>
<li>查找（/）在光标模式和可视模式中也可以使用。</li>
</ul>
<hr>
<p><strong>Ref:</strong></p>
<p><a href="https://github.com/philc/vimium/issues/1642" title="https://github.com/philc/vimium/issues/1642" target="_blank" rel="external">Caret mode in Github vimiim issues</a></p>
<p><a href="https://github.com/philc/vimium/blob/master/README.md" target="_blank" rel="external">https://github.com/philc/vimium/blob/master/README.md</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac常用快捷键记录]]></title>
      <url>http://www.calios.gq/2015/11/19/Mac%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:left">快捷键（组合）</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Finder中command + ↓</td>
<td style="text-align:left">相当于双击鼠标，即打开文件</td>
</tr>
<tr>
<td style="text-align:left">文档中command + ↑/↓</td>
<td style="text-align:left">光标移至文档首部/尾部</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】如何避免程序崩溃 -4：线程（一）]]></title>
      <url>http://www.calios.gq/2015/11/19/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-4%EF%BC%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://inessential.com/2015/05/22/how_not_to_crash_4_threading" title="http://inessential.com/2015/05/22/how_not_to_crash_4_threading" target="_blank" rel="external">http://inessential.com/2015/05/22/how_not_to_crash_4_threading</a></p>
<hr>
<p>有一个简单的规则：所有事情都在主线程上做。机器和设备如今都很快，你可以在主线程上做比你想象的多得多的事。</p>
<p>当你不必考虑并发的时候，那就是某种意义上的天堂了，因为并不存在并发的问题。</p>
<p>但是……</p>
<p>我是一个性能的推崇者。或者更贴切地说，我是个用户体验的推崇者，比反应迟钝更糟糕的是反应迟钝并且明显地阻塞在主线程。不要那么做。</p>
<p>我会讲解那件事。但是让我们先从主线程开始。</p>
<h4 id="主线程规则"><a href="#主线程规则" class="headerlink" title="主线程规则"></a>主线程规则</h4><p>我写的所有代码都希望运行在主线程上，并且除非特例，否则只运行在主线程上。（我们马上会讲到特例。）</p>
<p>这就解决了一堆的问题。比如说，我之前写过的一篇<a href="http://www.calios.gq/2015/11/16/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-3%EF%BC%9ANSNotification/" title="http://www.calios.gq/2015/11/16/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-3%EF%BC%9ANSNotification/">在dealloc中取消通知的注册</a>。有些人指出你不能保证dealloc在那个线程上被调用 —— 但是你实际上是可以的，对于任何运行在主线程上的给定对象，只在主线程上被引用。</p>
<p>这也就意味着，任何KVO的改变都会在主线程上传播，任何观察的对象都会运行在主线程上，同时等待来自主线程的通知。</p>
<p>不需要处理并发的好处简直是<em>巨大的</em>。我强烈建议你用这种方式写你整个应用，然后测试看是否有什么地方阻塞了主线程。如果没有，那就是完美了，你就可以结束战斗了。（当然，用合适的大量数据来测试。）</p>
<h4 id="生活在它们自己小圈子中的对象"><a href="#生活在它们自己小圈子中的对象" class="headerlink" title="生活在它们自己小圈子中的对象"></a>生活在它们自己小圈子中的对象</h4><p>如果 —— 只有如果 —— 当你发现主线程明显被阻塞时，你才应该想办法去清理阻塞。</p>
<p>第一选择是使用能够和你应用的其他部分彻底隔离的转换方式。举个处理JSON的例子。</p>
<p>当我从服务器获取JSON数据时，我喜欢把它转化成中间对象，以便之后可以归到模型对象中。原因如下：</p>
<ol>
<li>我不希望模型对象知道JSON的存在。</li>
<li>我希望能处理NSNull一类的值，日期转化，还有其他任何对象接手数据之前的所有其他的转化。</li>
</ol>
<p>所以我用一个NSOperationQueue或者GCD队列（最近通常是后者）来把服务器返回的NSData转化成中间对象。</p>
<p>（尽量使用队列。绝不要使用<code>detachThreadSelector</code>或者<code>performSelectorInBackground</code>。）</p>
<p>这些中间对象每次会被单一线程获取。它们在后台线程被创建，然后被传到主线程，在那里被用于更新模型，然后被丢弃。</p>
<p>因为它们在生命周期中被不同的线程引用，我确信这些对象除了它们自己之外什么都不知道，只知道被传入它们的init方法中的是神马。一旦在队列中被创建，它们就是不可变的了。它们不观察任何事，也没有人观察它们（毕竟，它们是不改变的）。</p>
<p>（从不改变的对象是线程安全的这个角度来看，那些对象是完全线程安全的。然而，没必要强迫线程安全，因为重要的是它们在单一线程的一次使用时是安全的，而非同时在多个线程。）</p>
<h4 id="对象和它的小伙伴"><a href="#对象和它的小伙伴" class="headerlink" title="对象和它的小伙伴"></a>对象和它的小伙伴</h4><p>有时候很多对象会协同工作。放下JSON，我们来考虑RSS解析器。在这个例子中，涉及到三个主要对象：一个SAX解析器的封装器，它的代理方法，和这个代理创建的中间对象。（概念上来说，和上面例子中的对象非常像。）</p>
<p>SAX解析器的封装器和它的代理的生命周期贯穿整个操作。它们不需要是线程安全的，尽管代码运行中单独的线程中 —— 因为它们<em>只</em>被那个线程获取。当它们在工作时，它们对外面的世界一无所知，而外贸的世界对于它们也是一无所知。</p>
<ol>
<li>SAX解析器的封装器知道它初始化时候用的NSData，知道它有一个代理。</li>
<li>SAX解析器的封装器知道它创建的中间对象。</li>
<li>中间对象什么都不知道。</li>
</ol>
<p>于是，这些对象协同工作，但是，重要的是，它们从不使用KVO或者通知模式。它们使用代理模式来取而代之（或者使用block和函数在理论上都不重要）。</p>
<p>这些对象协同工作，但同时也尽可能的保持这个团队与它的任务独立地分离开。</p>
<p>最后，只有中间对象会留存下来 —— 它们被传回主线程，也就是在那里它们被用来更新模型。然后它们也被丢弃。</p>
<h4 id="最糟糕的场景"><a href="#最糟糕的场景" class="headerlink" title="最糟糕的场景"></a>最糟糕的场景</h4><p>我多次重复了“更新模型”这个词组，并提到在主线程做这件事。几年前我从没有梦想过可以这么干 —— 但电脑和设备已经变得如此迅速，以至于可以实现优先考虑只运行在主线程，然后，只有当处理能够、并且应该被安全挪到队列中的其他所有事情时，再考虑其他可选项。</p>
<p>你不会<em>真的</em>想要在后台线程中更新模型。它是个生产崩溃的机器。但是测试和性能剖析可能会告诉你你需要这么做。</p>
<p>试着解决这个问题。如果更新模型<em>除了</em>一件事外其他都好 —— 比如说，涉及到将NSData转换成UIImage或者NSImage —— 那就<em>仅仅把慢的那部分</em>挪到后台任务中。（通过data或者文件来创建图片，把这个挪出主线程实在是一件完美的事。它很容易被隔离开。）</p>
<p>可能有问题的是数据库：可能你发现它在内存中创建对象、更新属性都很快，即使有一堆也是如此。在那种场景中，你可能就会像我一样，把数据库的调用从主线程中分离出来。（并没有那么难：数据库需要在一系列的后台线程中运行，它要按照严格的顺序来执行那些主线程中的任务。）</p>
<p>也就是说：是存在其他可选项的。</p>
<p>但是如果你仍然发现你不得不在后台线程中更新模型，那就不得不这么做吧。切记你应用的 其他部分是在主线程上，所以在发送通知或者做其他事情时，在主线程上处理。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在主线程上做每件事。对于队列和后台线程想都不要想。享受天堂吧！</p>
<p>如果在测试和性能分析后，你发现自己不得不把一些东西挪到后台队列中，挑那些可以被完美分离的部分，并保证它们被完美隔离开。使用代理模式；不要使用KVO或者通知模式。</p>
<p>最后，如果你仍然需要走些野路子 —— 比如说在后台队列中更新你的模型 —— 切记你应用的其他部分要么是运行在主线程上，要么是不分割的整体，能让你在走野路子时不必考虑它们。然后：小心行事，不要乐观太早。（乐观主义者创造崩溃。）</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 译言 </tag>
            
            <tag> NotToCrashSeries </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】如何避免程序崩溃-3：NSNotification]]></title>
      <url>http://www.calios.gq/2015/11/16/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-3%EF%BC%9ANSNotification/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://inessential.com/2015/05/21/how_not_to_crash_3_nsnotification" title="http://inessential.com/2015/05/21/how_not_to_crash_3_nsnotification" target="_blank" rel="external">http://inessential.com/2015/05/21/how_not_to_crash_3_nsnotification</a></p>
<hr>
<p>通常来说，和KVO与（特别是）绑定相比，我更喜欢NSNotification。我的确有时候用KVO —— 每当这时它都是那最敏感的部分。但是NSNotification像很多比较老的API一样，是很容易使用而不会导致崩溃的。</p>
<p>但是你还是要小心。</p>
<h4 id="一种导致崩溃的方式"><a href="#一种导致崩溃的方式" class="headerlink" title="一种导致崩溃的方式"></a>一种导致崩溃的方式</h4><p>当一个对象注册了一个通知，然后没有取消注册就被销毁了，然后应用就会在发送通知的时候崩溃掉。这是你需要避免的。文章余下的部分就来说说该怎么做。</p>
<h4 id="一条重要规则"><a href="#一条重要规则" class="headerlink" title="一条重要规则"></a>一条重要规则</h4><p>我有一条简单而粗暴有效的规则：<em>只在主线程</em> 发送NSNotification。无一例外。如果一些代码运行在另一个线程，而它需要发送一个通知，那它必须在主线程做这件事。</p>
<p>这就避免了所有你不希望的线程发来的通知所导致的问题。这样也避免了因为没有取消通知注册而带来的一团乱麻的情形。</p>
<p>一个应用基本上所有的代码都应在运行在主线程中。NSOperation或者GCD queue中运行的代码应该和其他所有代码分离开，当多个对象协同工作时应该用代理模式（用或者不用block）。</p>
<p>保证通知总是在主线程被发送应该是 <em>小菜一碟</em>。（我会在另一篇《如何避免程序崩溃》系列的文章中详细将线程和队列。）</p>
<h4 id="批量取消注册"><a href="#批量取消注册" class="headerlink" title="批量取消注册"></a>批量取消注册</h4><p>有些人喜欢在<code>dealloc</code>中做些额外的维护工作，来精确地给每个NSNotification取消注册。你会看到这样的代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[[NSNotificationCenter defaultCenter]</span> <span class="selector-tag">removeObserver</span><span class="selector-pseudo">:self</span> <span class="selector-tag">name</span><span class="selector-pseudo">:kSomeNotificationName</span> <span class="selector-tag">object</span><span class="selector-pseudo">:someObject</span>];</div><div class="line"><span class="selector-attr">[[NSNotificationCenter defaultCenter]</span> <span class="selector-tag">removeObserver</span><span class="selector-pseudo">:self</span> <span class="selector-tag">name</span><span class="selector-pseudo">:kSomeOtherNotificationName</span> <span class="selector-tag">object</span><span class="selector-pseudo">:someOtherObject</span>];</div><div class="line"><span class="selector-tag">etc</span>...</div></pre></td></tr></table></figure></p>
<p>你可以证明你写的是对的。但是简单扫一眼代码是不够的 —— 随着时间的增长，你不得不仔细思考自己的代码。</p>
<p>以后，你或者别人可能会添加另一个通知，然后忘了为那个通知调用<code>removeObserver</code>。然后，就崩溃了。</p>
<p>另一个问题是，未来接手的人可能不得不通读你的代码，仔细核查来确保每个注册的通知都被移除了。这就是痛点：手动工作而又易出错。</p>
<p>相反，经常这么写：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">[NSNotificationCenter defaultCenter removeObserver:self]</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>如果是印第安那·琼斯（《夺宝奇兵》的主角），他会这么做。</p>
<h4 id="当心多次注册"><a href="#当心多次注册" class="headerlink" title="当心多次注册"></a>当心多次注册</h4><p>如果一个对象注册了一个通知，然后又注册一遍，通知的处理函数会被调用两次。不会自动合并。</p>
<p>（这在过去的日子里经常发生在iOS中的viewDidLoad。人们会把注册代码放在那里 —— 但是，别忘了视图可以被卸载和重新加载，这就意味着对于同一个通知的多次注册。）</p>
<p>你的通知的处理函数应该对于被调用两次做相应处理。也不应该让给定对象注册两次相同的通知成为可能。二者都要注意。</p>
<h4 id="在init中注册，在dealloc中取消注册"><a href="#在init中注册，在dealloc中取消注册" class="headerlink" title="在init中注册，在dealloc中取消注册"></a>在init中注册，在dealloc中取消注册</h4><p>几乎在每种情况下，我都在init方法中注册观察者，然后在<code>dealloc</code>中移除观察者。如果我发现一个对象需要在它的生命周期里添加和移除观察者，我会视之为强壮的代码。</p>
<p>这是个很好的机会，1）要么是它并不是真正需要这么做 2）这个对象需要划分成更小的对象。</p>
<p>你知道对于一个给定的对象而言，init方法只会被调用一次。你也知道dealloc方法只会在没有其他对象引用这个对象时被调用一次。你可以使用这个知识点来保持注册和取消注册之间的平衡，而不必去思考或者跟踪它。如此简单。</p>
<h4 id="避免addObserverForName"><a href="#避免addObserverForName" class="headerlink" title="避免addObserverForName"></a>避免addObserverForName</h4><p>有些人喜欢<code>-[NSNotificationCenter addObserverForName: object: queue: usingBlock:]</code>。这感觉很时髦，因为是基于block的，而我们都喜欢block。（我确信）</p>
<p>但是这是个糟糕的主意。你可能本可以保留自己写的处理通知的方法，但是你也让你的整理工作更加糟糕，因为现在你就额外多了一个对象需要照看，又需要稍后调用<code>removeObserver</code>。这就意味着没有批量取消注册；它意味着你要回去做审核的工作，这就意味着你又多了一件事情要保障。</p>
<p>基于block的版本意味着你可以让注册和处理通知一起保留 —— 但是这么做的话，在整理工作和潜在崩溃方面的代价实在是太大了。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 译言 </tag>
            
            <tag> NotToCrashSeries </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】如何避免程序崩溃-2：可变对象的异常]]></title>
      <url>http://www.calios.gq/2015/11/13/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-2%EF%BC%9A%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://inessential.com/2015/05/16/how_not_to_crash_2_mutation_exceptions" target="_blank" rel="external">http://inessential.com/2015/05/16/how_not_to_crash_2_mutation_exceptions</a></p>
<hr>
<p>你从某处获取到一个集合并枚举它 —— 然后当你在改变这个集合的时候报错，因为它正在进行枚举。应用崩溃了。</p>
<p>你可以通过一个小技巧避免这种悲伤的命运：不要对可变的集合进行枚举操作。</p>
<h4 id="异议"><a href="#异议" class="headerlink" title="异议"></a>异议</h4><p>你可能持有某种合理的观点，说<em>真正</em>的答案是不要在对集合进行枚举的时候对可变的集合进行改变。你应该对于自己的应用有足够的了解，以便能够写出安全地对可变集合进行枚举的代码。</p>
<p>是的，你应该如此。你绝对应该如此。</p>
<p>然而：编写远离崩溃的代码就是在于消除疑点。就在于能够将错误的几率最小化，将未来的（由你或其他人带来的）改变引入崩溃的可能性最小化。</p>
<h4 id="可变集合不应该成为公有接口的一部分"><a href="#可变集合不应该成为公有接口的一部分" class="headerlink" title="可变集合不应该成为公有接口的一部分"></a>可变集合不应该成为公有接口的一部分</h4><p>一个对象拥有一个可变集合作为公有属性，这件事本来就应该尽量避免 —— 或者最好不要发生。可变集合应该被控制在对象内部。</p>
<p>（更进一步地说，公有的集合应该为只读。当然事实也并非总是如此。）</p>
<p>现在，它整体上可能是有一个公有集合，在内部又有一个可变的集合。想象一个跟踪operation的对象。它可能公有方法这么写：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">property</span><span class="title"> </span>(nonatomic, readonly) NSArray *<span class="keyword">operations</span>;</div></pre></td></tr></table></figure></p>
<p>内部私有方法这么写：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSMutableArray</span> *mutableOperations;</div><div class="line">- (<span class="built_in">NSArray</span> *)operations &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>.mutableOperations;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是完全合情合理的代码：因为mutableOperations是一个NSMutableArray，它又同时是一个NSArray。（我多年来都这么写。我对自己说：”Hey，我是个过来人了。我能<em>应付的了</em>。“但是我没有意识到的是，成熟的开发者是为了减少出错的可能而写代码。）</p>
<h4 id="被指定为不可变的属性应该名副其实"><a href="#被指定为不可变的属性应该名副其实" class="headerlink" title="被指定为不可变的属性应该名副其实"></a>被指定为不可变的属性应该名副其实</h4><p>在上面的例子中，你声明<code>operations</code>是一个在任何时候都可以安全枚举的数组。另一个人 —— 或者就是你自己 —— 在六个月之后看这段代码时，完全不会意识到你正在获取的可变数组，并<em>不能</em>足够安全地进行枚举。</p>
<p>这就是实现名副其实的解决方案：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSArray</span> *)operations &#123;</div><div class="line">  <span class="keyword">return</span> [<span class="keyword">self</span>.mutableOperations <span class="keyword">copy</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>（如果为了表达得更清晰，把属性声明为copy也不会有影响，但是我承认我不经常这么做。让API的使用者完全清晰地知道正在发生什么应该是有好处的。）</p>
<p>你可能会翻回去引用性能或者内存使用的问题或者二者皆有 —— 而我必须承认：我是一个性能的推崇者，我会在Instruments上花费超乎常理的时间，仅为了能够让代码快速运行、没有不合理的内存消耗。我从来没有发现这么做有任何问题。如果你的应用出现性能或者内存消耗的问题，可能是其他问题导致的，而不是这些copy。（尽管你可以考虑使用<code>@autoreleasepool</code>来让这些copy不留存那么长时间。）</p>
<p>copy一下吧。</p>
<h4 id="彩蛋：不要相信他们的谎言"><a href="#彩蛋：不要相信他们的谎言" class="headerlink" title="彩蛋：不要相信他们的谎言"></a>彩蛋：不要相信他们的谎言</h4><p>我最近解决了一个在枚举NSTextStorage layoutManager时可变量的问题：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span> *layoutManagers;</div></pre></td></tr></table></figure></p>
<p><em>显然</em> 枚举是安全的。它是一个NSArray，它声明自己是个copy。漂亮。枚举走起。</p>
<p>但是，它骗我。在调试器里，我发现它是一个NSMutableArray（__NSArrayM）—— 而且它根本就不是一个copy。它是NSTextStorage的名为<code>_layoutManagers</code>的实例变量，这个变量被声明为一个NSMutableArray。</p>
<p>而在我的枚举的block代码里面，触发了layoutManagers的改变，然后应用就崩溃了。</p>
<p>答案是：对layoutManagers的副本进行枚举。问题就解决了。</p>
<p>常言道：如果你从别人的代码中获取一个集合，对副本进行枚举总没坏处，防患于未然嘛。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 译言 </tag>
            
            <tag> NotToCrashSeries </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】如何避免程序崩溃-1：KVO与手动绑定]]></title>
      <url>http://www.calios.gq/2015/11/12/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-1%EF%BC%9AKVO%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<p>原文链接：<a href="http://inessential.com/2015/05/14/how_not_to_crash_1_kvo_and_manual_bind" title="http://inessential.com/2015/05/14/how_not_to_crash_1_kvo_and_manual_bind" target="_blank" rel="external">http://inessential.com/2015/05/14/how_not_to_crash_1_kvo_and_manual_bind</a></p>
<hr>
<p>我最近在修复系统崩溃的bug —— 但是，与写如何修复bug相比，我想，写写如何在最初就避免创造崩溃的bug会更有意思一些。</p>
<p>在第一部分，我会谈谈KVO，手动绑定，引用循环和无效方法。</p>
<h4 id="绑定意味着永远不会失联"><a href="#绑定意味着永远不会失联" class="headerlink" title="绑定意味着永远不会失联"></a>绑定意味着永远不会失联</h4><p>iOS开发者没有这个，但是Mac开发者的小伙伴们有：我们可以把一个属性绑定在另一个属性上。我们可以实现这点，即当x.foo更新的时候，y.foo也随之更新。</p>
<p>NSKeyValueBinding.h在AppKit中。我们来看下<code>bind:toObject:withKeyPath:options:</code>.</p>
<p>假设有一个有着title属性的button。每当controller的title更新的时候，这个title属性也应该随之更新。我们假设controller拥有这个button。你可以这样写代码：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> NSString kTitleKey = @<span class="string">"title"</span>;</div><div class="line">[self.button <span class="string">bind:</span>kTitleKey <span class="string">toObject:</span>self <span class="string">withKeyPath:</span>kTitleKey <span class="string">options:</span>nil];</div></pre></td></tr></table></figure></p>
<p>非常方便，而且很有效。</p>
<p>同时，你也离崩溃不远了。</p>
<p>问题在于：这个绑定引用了<code>toObject</code>。这就意味着这个button有效地引用了controller。如果controller又引用它的button（它本该如此），那么就造成了引用循环。二者都不会成为僵尸，但是都会被废弃。</p>
<p>一种崩溃的方式 —— 这也是真实场景 —— 是如果这个被废弃的controller监听着一个通知（我们称之为BSNotification），并且当接收到BSNotification的时候<em>做了点事</em>，当它<em>做这点事</em>的时候它就会崩溃，因为它在理论上已经失效，而它不知道该怎么处理这种情况。</p>
<h4 id="KVO意味着必须每次都把每件事做到完全正确"><a href="#KVO意味着必须每次都把每件事做到完全正确" class="headerlink" title="KVO意味着必须每次都把每件事做到完全正确"></a>KVO意味着必须每次都把每件事做到完全正确</h4><p>让我们加上第三个对象，一个model。我们<em>真正</em>想要的是这样的流程：<br>modelObject.title的更新，会使controller.title更新，而controller.title的更新，会使button.title更新。</p>
<p>这次我们来用KVO。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *)title &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>.modelObject.title;</div><div class="line">&#125;</div><div class="line">+ (<span class="built_in">NSSet</span> *)keyPaths​ForValues​AffectingTitle &#123;</div><div class="line">  <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObject:​<span class="string">@"modelObject.title"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了 —— 现在我们有了完整的流程。当modelObject.title改变的时候，会影响controller.title，同时button.title也随之更新为正确的值。</p>
<p>非常方便，而且很有效。</p>
<p>当然，它会崩溃，在modelObject被释放的时候（因为modelObject的实例在它还是一个观察者的时候被释放了）。</p>
<p>如果反过来，controller引用modelObject（它可能应该如此），然后你就有了一个被废弃的第三个对象，它永远不会被释放，是个随着时间变化不断增长变大的讨厌家伙。</p>
<h4 id="一个并不那么漂亮的解决办法"><a href="#一个并不那么漂亮的解决办法" class="headerlink" title="一个并不那么漂亮的解决办法"></a>一个并不那么漂亮的解决办法</h4><p>controller可以有一个类似于<code>invalidate</code>这样名字的函数，用来打破引用循环。一旦打破，<code>dealloc</code>方法就会因为controller、它的button和它的model对象而被调用。</p>
<p>你可以这么写代码，以便在你知道你用完了controller的时候调用：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)invalidate &#123;</div><div class="line">  [<span class="keyword">self</span>.button unbind:kTitleKey];</div><div class="line">  <span class="keyword">self</span>.modelObject = <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是这个解决办法不那么漂亮的地方：</p>
<p>引用计数是非常棒的解决方案 —— 它能保证在<code>dealloc</code>被调用的时候，没有哪个对象拥有对于这个即将释放的对象的强引用。这就使得<code>dealloc</code>成为一个移除观察者及其他类似需要移除的不错地点。</p>
<p>但是如果你使用了类似invalidate的函数，你就是在试图自己来接手引用计数这件事。你<em>不得不</em>调用invalidate，又不得不在<em>合适的</em>时候调用。你能对每一个拥有invalidate函数的对象做出永久的保证么？如果出现一些改变，不只有一个对象引用了controller，你该怎么办？谁来调用invalidate？什么时候调用？</p>
<p>那是一大堆额外需要考虑的工作，而编程的目的之一就是使错误尽可能的减少。依赖invalidate会使错误出现的可能<em>大大增加</em>。</p>
<h4 id="一个更好的解决办法"><a href="#一个更好的解决办法" class="headerlink" title="一个更好的解决办法"></a>一个更好的解决办法</h4><p>让我们回归到我们试图解决的问题上来：</p>
<p>modelObject.title的更新，会使controller.title更新，而controller.title的更新，会使button.title更新。</p>
<p>简而言之：controller知道modelObject和button，但是后两者之间并不知道彼此的存在，也不知道controller的存在。这就是我们怎么避开invalidate函数来解决问题。</p>
<p>在controller中，灭掉自定义getter。灭掉<code>keyPaths ForValues AffectingTitle</code>.灭掉<code>bind: toObject: withKeyPath: options:</code>的使用。</p>
<p>取而代之的是，创建自定义的setter —— 因为，无论如何，setter在改变的时候总是会被调用，所有需要解决的问题就是广播title属性的更新。<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(void)setTitle:(NSString *)<span class="built_in">title</span> &#123;</div><div class="line">  _<span class="built_in">title</span> = <span class="built_in">title</span>;</div><div class="line">  self.button.<span class="built_in">title</span> = <span class="built_in">title</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>问题解决了一半：当controller.title改变时，button.title也随之改变。</p>
<p>我们不能对modelObject做同样的事情，因为它不知道controller的存在。所以反过来，让controller来观察modelObject.title。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self.modelObject <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span> kTitleKey <span class="string">options:</span><span class="number">0</span> <span class="string">context:</span> kTitleContext];</div></pre></td></tr></table></figure></p>
<p>然后在KVO的观察函数里，监测kTitleContext，然后让<code>self.title = self.modelObject.title</code>。这会调用controller的<code>setTitle:</code>函数 —— 而该函数会更新button.title。</p>
<p>这个解决办法就不会存在引用循环的问题。还有一点移除的工作要做，但你可以在controller的<code>dealloc</code>函数中用一行代码了结：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[_modelObject <span class="string">removeObserver:</span> self <span class="string">forKeyPath:</span>kTitleKey <span class="string">context:</span> kTitleContext];</div></pre></td></tr></table></figure></p>
<h4 id="总结与建议"><a href="#总结与建议" class="headerlink" title="总结与建议"></a>总结与建议</h4><p>我们提出的解决方案避免了引用循环，不必时刻记得要调用invalidate函数，也不用担心调用的时机是否正确。这是更安全的代码。</p>
<p>更棒的是，它用了更少的代码，而且足够简洁。</p>
<p>一些建议：</p>
<ul>
<li>不要在任何场景中使用<code>bind: toObject: withKeyPath: options:</code>(iOS的小伙伴们：你们应该高兴自己没有这样的选择。也可以把它当做可能它之所以为Mac开发而非iOS的原因之一)。</li>
<li>当你广播数据更新时，用自定义的setter，而不是自定义getter（毕竟是在<em>setter</em>中更新的数据）。</li>
<li>避免invalidate这样的函数，尽量让引用计数做它自己的事情 —— 因为如果<em>你</em>是那个跟踪计数的角色，你多半会出错。（我发现我不是总能够避免invalidate这样的函数，但是可能性总是比你想的要多那么一点）</li>
<li>在思考你的应用中发生了什么时，任何形式的观察死锁都会带来困难：在任何时候它有足够理由出现时，都最好是准确的。一旦你有了足够多的这种藤蔓般无处不在的观察模式，你就建造了一个不见天日的丛林，对它的每一点改变都会让你如履薄冰。</li>
<li>理论上，绑定和KVO是为了解耦而生的，而实际上这种耦合就是那么紧密 —— 在某种程度上，如果没有更紧密的话 —— 更难debug，更难矫正。通常情况下，最好把观察模式明确写清（不要写成<code>keyPaths ForValues AffectingXyz</code>这种），避免在keyPath中出现”.”字符。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 译言 </tag>
            
            <tag> NotToCrashSeries </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】如何避免程序崩溃-0：目录]]></title>
      <url>http://www.calios.gq/2015/11/12/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-0%EF%BC%9A%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>原文索引：</p>
<p><a href="http://inessential.com/2015/05/14/how_not_to_crash_1_kvo_and_manual_bind" title="http://inessential.com/2015/05/14/how_not_to_crash_1_kvo_and_manual_bind" target="_blank" rel="external">#1: KVO与手动绑定</a><br><a href="http://inessential.com/2015/05/16/how_not_to_crash_2_mutation_exceptions" title="http://inessential.com/2015/05/16/how_not_to_crash_2_mutation_exceptions" target="_blank" rel="external">#2: 可变对象的异常</a><br><a href="http://inessential.com/2015/05/21/how_not_to_crash_3_nsnotification" title="http://inessential.com/2015/05/21/how_not_to_crash_3_nsnotification" target="_blank" rel="external">#3: NSNotification</a><br><a href="http://inessential.com/2015/05/22/how_not_to_crash_4_threading" title="http://inessential.com/2015/05/22/how_not_to_crash_4_threading" target="_blank" rel="external">#4: 线程</a><br><a href="http://inessential.com/2015/05/26/how_not_to_crash_5_threading_part_2" title="http://inessential.com/2015/05/26/how_not_to_crash_5_threading_part_2" target="_blank" rel="external">#5: 线程2</a><br><a href="http://inessential.com/2015/05/27/how_not_to_crash_6_properties_and_acce" title="http://inessential.com/2015/05/27/how_not_to_crash_6_properties_and_acce" target="_blank" rel="external">#6: 属性和存取器</a><br><a href="http://inessential.com/2015/05/29/how_not_to_crash_7_dealing_with_nothin" title="http://inessential.com/2015/05/29/how_not_to_crash_7_dealing_with_nothin" target="_blank" rel="external">#7: 什么都不做</a><br><a href="http://inessential.com/2015/06/10/how_not_to_crash_8_infrastructure" title="http://inessential.com/2015/06/10/how_not_to_crash_8_infrastructure" target="_blank" rel="external">#8: 基本架构</a><br><a href="http://inessential.com/2015/06/10/how_not_to_crash_9_mindset" title="http://inessential.com/2015/06/10/how_not_to_crash_9_mindset" target="_blank" rel="external">#9: 心态</a></p>
<hr>
<p>译文索引：</p>
<p><a href="http://www.calios.gq/2015/11/12/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-1%EF%BC%9AKVO%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%BB%91%E5%AE%9A/" title="http://www.calios.gq/2015/11/12/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-1%EF%BC%9AKVO%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%BB%91%E5%AE%9A/">#1: KVO与手动绑定</a><br><a href="http://www.calios.gq/2015/11/13/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-2%EF%BC%9A%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%82%E5%B8%B8/" title="http://www.calios.gq/2015/11/13/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-2%EF%BC%9A%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%82%E5%B8%B8/">#2: 可变对象的异常</a><br><a href="http://www.calios.gq/2015/11/16/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-3%EF%BC%9ANSNotification/" title="http://www.calios.gq/2015/11/16/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-3%EF%BC%9ANSNotification/">#3: NSNotification</a><br><a href="http://www.calios.gq/2015/11/19/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-4%EF%BC%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/" title="http://www.calios.gq/2015/11/19/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-4%EF%BC%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/">#4: 线程</a><br><a href="http://www.calios.gq/2015/11/26/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-5%EF%BC%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/" title="http://www.calios.gq/2015/11/26/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-5%EF%BC%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/">#5: 线程2</a><br><a href="http://www.calios.gq/2015/11/26/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-6%EF%BC%9A%E5%B1%9E%E6%80%A7%E5%92%8C%E5%AD%98%E5%8F%96%E5%99%A8/" title="http://www.calios.gq/2015/11/26/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-6%EF%BC%9A%E5%B1%9E%E6%80%A7%E5%92%8C%E5%AD%98%E5%8F%96%E5%99%A8/">#6: 属性和存取器</a><br><a href="http://www.calios.gq/2015/12/19/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-7%EF%BC%9A%E4%BB%80%E4%B9%88%E9%83%BD%E4%B8%8D%E5%81%9A/" title="http://www.calios.gq/2015/12/19/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-7%EF%BC%9A%E4%BB%80%E4%B9%88%E9%83%BD%E4%B8%8D%E5%81%9A/">#7: 什么都不做</a><br><a href="http://www.calios.gq/2016/01/21/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-8%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/" title="http://www.calios.gq/2016/01/21/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-8%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84/">#8: 基本架构</a><br><a href="http://www.calios.gq/2016/02/24/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-9%EF%BC%9A%E5%BF%83%E6%80%81/" title="http://www.calios.gq/2016/02/24/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83-9%EF%BC%9A%E5%BF%83%E6%80%81/">#9: 心态</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 译言 </tag>
            
            <tag> NotToCrashSeries </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OS X安装MongoDB]]></title>
      <url>http://www.calios.gq/2015/09/25/OS-X%E5%AE%89%E8%A3%85MongoDB/</url>
      <content type="html"><![CDATA[<p>在OS X中，使用<a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a>完成各种package的安装工作无疑是很方便的。如下是使用Homebrew安装MongoDB的步骤。</p>
<h4 id="1-更新Homebrew的package数据库"><a href="#1-更新Homebrew的package数据库" class="headerlink" title="1.更新Homebrew的package数据库"></a>1.更新Homebrew的package数据库</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">brew </span>update</div></pre></td></tr></table></figure>
<h4 id="2-安装MongoDB"><a href="#2-安装MongoDB" class="headerlink" title="2.安装MongoDB"></a>2.安装MongoDB</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ brew install mongodb</div><div class="line">==\&gt; Downloading https:<span class="comment">//homebrew.bintray.com/bottles/mongodb-3.0.6.yosemite.bottle.tar.gz</span></div><div class="line">###### \#\#########                                                          <span class="number">23.0</span>%</div><div class="line">curl: (<span class="number">56</span>) SSLRead() return error <span class="number">-9806</span></div><div class="line">Error: Failed to download resource <span class="string">"mongodb"</span></div><div class="line">Download failed: https:<span class="comment">//homebrew.bintray.com/bottles/mongodb-3.0.6.yosemite.bottle.tar.gz</span></div><div class="line">Warning: Bottle installation failed: building <span class="keyword">from</span> source.</div><div class="line">==\&gt; Downloading https:<span class="comment">//fastdl.mongodb.org/src/mongodb-src-r3.0.6.tar.gz</span></div><div class="line">###### \#\################################################################# <span class="number">100.0</span>%</div><div class="line">==\&gt; Cloning https:<span class="comment">//github.com/mongodb/mongo-tools.git</span></div><div class="line">Cloning into <span class="string">'/Library/Caches/Homebrew/mongodb--github.com-mongodb-mongo-tools--git'</span>...</div><div class="line">remote: Counting objects: <span class="number">1180</span>, done.</div><div class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">950</span>/<span class="number">950</span>), done.</div><div class="line">remote: Total <span class="number">1180</span> (delta <span class="number">184</span>), reused <span class="number">840</span> (delta <span class="number">136</span>), pack-reused <span class="number">0</span></div><div class="line">Receiving objects: <span class="number">100</span>% (<span class="number">1180</span>/<span class="number">1180</span>), <span class="number">1.86</span> MiB | <span class="number">230.00</span> KiB/s, done.</div><div class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">184</span>/<span class="number">184</span>), done.</div><div class="line">Checking connectivity... done.</div><div class="line">Note: checking out <span class="string">'7588eb887549bd5d2fc7bbc08f7c62d4b29b9d75'</span>.</div></pre></td></tr></table></figure>
<p>You are in ‘detached HEAD’ state. You can look around, make experimental<br>changes and commit them, and you can discard any commits you make in this<br>state without impacting any branches by performing another checkout.</p>
<p>If you want to create a new branch to retain commits you create, you may<br>do so (now or later) by using -b with the checkout command again. Example:<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  git checkout -b new\_branch\_name</div><div class="line"></div><div class="line">=<span class="ruby">=&gt; Checking out tag r3.<span class="number">0</span>.<span class="number">6</span></span></div><div class="line">=<span class="ruby">=&gt; ./build.sh</span></div><div class="line">=<span class="ruby">=&gt; /usr/local/opt/scons/bin/scons install --prefix=<span class="regexp">/usr/local</span><span class="regexp">/Cellar/mongodb</span><span class="regexp">/3.0.6 -j8 --osx-version-min=10.10 --cc=</span></span></div><div class="line">=<span class="ruby"><span class="regexp">=&gt; Caveats</span></span></div><div class="line">To have launchd start mongodb at login:</div><div class="line">  ln -sfv /usr/local/opt/mongodb/\*.plist \~/Library/LaunchAgents</div><div class="line">Then to load mongodb now:</div><div class="line">  launchctl load \~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist</div><div class="line">Or, if you don't want/need launchctl, you can just run:</div><div class="line">  mongod --config /usr/local/etc/mongod.conf</div><div class="line">=<span class="ruby"><span class="regexp">=&gt; Summary</span></span></div><div class="line">🍺  /usr/local/Cellar/mongodb/3.0.6: 17 files, 158M, built in 7.2 minutes</div></pre></td></tr></table></figure></p>
<p>看起来通过Homebrew的bottle来安装失败，于是开始下载源代码来编译，最终安装成功。</p>
<h4 id="3-启动MongoDB"><a href="#3-启动MongoDB" class="headerlink" title="3.启动MongoDB"></a>3.启动MongoDB</h4><p>按照Terminal中的提示，直接启动MongoDB。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mongod --config <span class="regexp">/usr/</span>local<span class="regexp">/etc/m</span>ongod.conf</div></pre></td></tr></table></figure>
<p>通过Terminal直接连接MongoDB。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mongo</div><div class="line">MongoDB <span class="built_in">shell</span> <span class="built_in">version</span>: <span class="number">3.0</span><span class="number">.6</span></div><div class="line">connecting <span class="built_in">to</span>: test</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref:</strong></p>
<p><a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/" target="_blank" rel="external">http://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AVPlayer Class Reference]]></title>
      <url>http://www.calios.gq/2015/09/24/AVPlayer-Class-Reference/</url>
      <content type="html"><![CDATA[<h4 id="1-Create-a-Player"><a href="#1-Create-a-Player" class="headerlink" title="1.Create a Player"></a>1.Create a Player</h4><ul>
<li><p>With a url: </p>
<ul>
<li>implicitly create an <code>AVPlayerItem</code> object. Getting it by <code>currentItem</code>.</li>
</ul>
</li>
<li><p>With a player item: </p>
<ul>
<li>used to play items for which an <code>AVAsset</code> object has previously been created.</li>
</ul>
</li>
</ul>
<h4 id="2-Managing-Playback"><a href="#2-Managing-Playback" class="headerlink" title="2.Managing Playback"></a>2.Managing Playback</h4><ul>
<li><p>play: </p>
<ul>
<li>same as setting <code>rate</code> to <code>1.0</code>.</li>
</ul>
</li>
<li><p>pause:</p>
<ul>
<li>same as setting <code>rate</code> to <code>0.0</code>.</li>
</ul>
</li>
<li><p>rate: </p>
<ul>
<li>other than <code>0.0</code> and <code>1.0</code>, rate can be used if the associated player item returns <code>YES</code> for the <code>AVPlayerItem</code> properties<code>canPlaySlowForward</code> or <code>canPlayFastForward</code>.</li>
</ul>
</li>
<li><p>actionAtItemEnd：</p>
<ul>
<li><code>AVPlayerActionAtItemEndAdvance</code>: only for <code>AVQueuePlayer</code></li>
<li><code>AVPlayerActionAtItemEndPause</code>: default </li>
<li><code>AVPlayerActionAtItemEndNone</code>: let it be free. :P</li>
</ul>
</li>
<li><p>replaceCurrentItemWithPlayerItem: </p>
<ul>
<li>only for player instances without queues. </li>
<li>Use key-value observing to observe the currentItem property for changes.</li>
<li><u>Well, what does it means by ‘The new item must have the same compositor as the item it replaces, or have no compositor.’ ?</u></li>
</ul>
</li>
<li><p>prerollAtRate:completionHandler:</p>
<ul>
<li>loads data starting at the item’s current playback time.</li>
<li>only be set when <code>status</code> of player is <code>AVPlayerStatusReadyToPlay</code>, otherwise an exception is thown.</li>
</ul>
</li>
<li><p>cancelPendingPrerolls: </p>
<ul>
<li>cancels any pending operations to prepare the render pipeline for the current item.</li>
</ul>
</li>
</ul>
<h4 id="3-Managing-Time"><a href="#3-Managing-Time" class="headerlink" title="3.Managing Time"></a>3.Managing Time</h4><ul>
<li><p>currentTime: </p>
<ul>
<li><code>CMTime</code>,  <code>CoreMediaFramework</code></li>
<li>not key-value observable.</li>
<li>use <code>addPeriodicTimeObserverForInterval:queue:usingBlock:</code> or <code>addBoundaryTimeObserverForTimes:queue:usingBlock:</code> instead.</li>
</ul>
</li>
<li><p>seekToTime:completionHandler::</p>
<ul>
<li>Moves the playback cursor and executes the specified block when the seek operation has either been completed or been interrupted.</li>
</ul>
</li>
<li><p>other <code>seek</code> functions: nearly the same.</p>
</li>
</ul>
<h4 id="4-Managing-External-Playback-abbr"><a href="#4-Managing-External-Playback-abbr" class="headerlink" title="4.Managing External Playback (abbr.)"></a>4.Managing External Playback (abbr.)</h4><h4 id="5-Synchronizing-Playback-to-an-External-Source-abbr"><a href="#5-Synchronizing-Playback-to-an-External-Source-abbr" class="headerlink" title="5.Synchronizing Playback to an External Source (abbr.)"></a>5.Synchronizing Playback to an External Source (abbr.)</h4><h4 id="6-Timed-Observations"><a href="#6-Timed-Observations" class="headerlink" title="6.Timed Observations"></a>6.Timed Observations</h4><ul>
<li><p><strong>addPeriodicTimeObserverForInterval:queue:usingBlock:</strong></p>
<ul>
<li>requests invocation of a given block during playback to report changing time.</li>
<li><u>** You must retain the returned value as long as you want the time observer to be invoked by the player. Each invocation of this method should be paired with a corresponding call to <code>removeTimeObserver:</code>.**</u></li>
<li><strong>Attention:</strong> Releasing the observer object without invoking <code>removeTimeObserver:</code> will result in undefined behavior.</li>
</ul>
</li>
<li><p>addBoundaryTimeObserverForTimes:queue:usingBlock: (abbr.)</p>
</li>
<li><strong>removeTimeObserver:</strong><ul>
<li>Upon return, the caller is guaranteed that no new time observer blocks will begin executing. Depending on the calling thread and the queue used to add the time observer, an in-flight block may continue to execute after this method returns. You can guarantee synchronous time observer removal by enqueuing the call to <code>removeTimeObserver</code> on that queue. Alternatively, call <code>dispatch_sync(queue, ^{})</code> after <code>removeTimeObserver</code> to wait for any in-flight blocks to finish executing.</li>
</ul>
</li>
</ul>
<h4 id="7-Managing-Closed-Caption-Display"><a href="#7-Managing-Closed-Caption-Display" class="headerlink" title="7.Managing Closed Caption Display"></a>7.Managing Closed Caption Display</h4><ul>
<li>closedCaptionDisplayEnabled:<ul>
<li>Indicates whether the player uses closed captioning.</li>
</ul>
</li>
</ul>
<h4 id="8-Managing-Audio-Output"><a href="#8-Managing-Audio-Output" class="headerlink" title="8.Managing Audio Output"></a>8.Managing Audio Output</h4><ul>
<li>muted:<ul>
<li>Indicates whether the audio output of the player is muted.</li>
</ul>
</li>
<li><strong>volume:</strong><ul>
<li>audio playback volume for the player, ranging from 0.0 through 1.0 on a linear scale.</li>
<li>To provide UI in iOS for adjusting system audio playback volume, use the <code>MPVolumeView</code> class, which provides media playback controls that iOS users expect and whose appearance you can customize.</li>
</ul>
</li>
</ul>
<h4 id="9-Player-Properties"><a href="#9-Player-Properties" class="headerlink" title="9.Player Properties"></a>9.Player Properties</h4><ul>
<li>status:<ul>
<li>Indicates whether the player can be used for playback. (read-only)</li>
<li>When the value of this property is <code>AVPlayerStatusFailed</code>, you can no longer use the player for playback and you need to create a new instance to replace it. If this happens, you can check the value of the error property to determine the nature of the failure.</li>
<li>This property is key value observable using <code>Key-value observing</code>.</li>
</ul>
</li>
<li>error:<ul>
<li>If the receiver’s status is AVPlayerStatusFailed, this describes the error that caused the failure. (read-only)</li>
</ul>
</li>
<li>currentItem:<ul>
<li>The player’s current item. (read-only)</li>
</ul>
</li>
<li>outputObscuredDueToInsufficientExternalProtection (abbr.)</li>
</ul>
<h4 id="10-Media-Selection-Criteria-Settings-abbr"><a href="#10-Media-Selection-Criteria-Settings-abbr" class="headerlink" title="10.Media Selection Criteria Settings (abbr.)"></a>10.Media Selection Criteria Settings (abbr.)</h4><h4 id="11-Constants"><a href="#11-Constants" class="headerlink" title="11.Constants"></a>11.Constants</h4><ul>
<li><p>AVPlayerStatus:</p>
<ul>
<li>Possible values of the status property, to indicate whether it can successfully play items.</li>
</ul>
</li>
<li><p>AVPlayerActionAtItemEnd (abbr.)</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> AVPlayer </tag>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【Bash】lsof——Mac查看端口占用情况]]></title>
      <url>http://www.calios.gq/2015/09/18/%E3%80%90Bash%E3%80%91lsof%E2%80%94%E2%80%94Mac%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5/</url>
      <content type="html"><![CDATA[<h4 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h4><p>在本地通过Node.js起了一个服务来监听3000端口，在Terminal执行<code>node index.js</code> 后对该文件进行修改，而后<strong>直接</strong>再次执行<code>node index.js</code>。报如下错误：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="string">Gulugulu:</span>myapp calios$ node index.js</div><div class="line">events.<span class="string">js:</span><span class="number">85</span></div><div class="line">	  <span class="keyword">throw</span> er; <span class="comment">// Unhandled 'error' event</span></div><div class="line">	        ^</div><div class="line"><span class="string">Error:</span> listen EADDRINUSE</div><div class="line">	at exports._errnoException (util.<span class="string">js:</span><span class="number">746</span>:<span class="number">11</span>)</div><div class="line">	at Server._listen2 (net.<span class="string">js:</span><span class="number">1156</span>:<span class="number">14</span>)</div><div class="line">	at listen (net.<span class="string">js:</span><span class="number">1182</span>:<span class="number">10</span>)</div><div class="line">	at Server.listen (net.<span class="string">js:</span><span class="number">1267</span>:<span class="number">5</span>)</div><div class="line">	at EventEmitter.listen (<span class="regexp">/Users/</span>calios<span class="regexp">/Documents/</span>MyWorkspace<span class="regexp">/Front/</span>Node<span class="regexp">/myapp/</span>node_modules<span class="regexp">/express/</span>lib/application.<span class="string">js:</span><span class="number">617</span>:<span class="number">24</span>)</div><div class="line">	at Object.&lt;anonymous&gt; (<span class="regexp">/Users/</span>calios<span class="regexp">/Documents/</span>MyWorkspace<span class="regexp">/Front/</span>Node<span class="regexp">/myapp/</span>index.<span class="string">js:</span><span class="number">10</span>:<span class="number">18</span>)</div><div class="line">	at Module._compile (module.<span class="string">js:</span><span class="number">460</span>:<span class="number">26</span>)</div><div class="line">	at Object.Module._extensions..js (module.<span class="string">js:</span><span class="number">478</span>:<span class="number">10</span>)</div><div class="line">	at Module.load (module.<span class="string">js:</span><span class="number">355</span>:<span class="number">32</span>)</div><div class="line">	at Function.Module._load (module.<span class="string">js:</span><span class="number">310</span>:<span class="number">12</span>)</div></pre></td></tr></table></figure>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>首先查看<code>3000</code>端口是否已被占用。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ lsof -i :<span class="number">3000</span> (<span class="number">3000</span>可替换为其他想查看的端口号)</div><div class="line">COMMAND   PID   <span class="keyword">USER</span>   <span class="title">FD</span>   <span class="keyword">TYPE</span>             DEVICE SIZE/OFF <span class="keyword">NODE</span> <span class="title">NAME</span></div><div class="line"><span class="keyword">node</span>    <span class="title">48002</span> calios   <span class="number">14</span>u  IPv6 <span class="number">0</span>x9534c78c493eedc3      <span class="number">0</span>t0  TCP \*:hbci (LISTEN)</div></pre></td></tr></table></figure>
<p>发现正是刚才node起来的服务正在占用，kill掉这个<code>PID</code>为<code>48002</code>的家伙。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ kill <span class="number">-9</span> <span class="number">48002</span></div></pre></td></tr></table></figure>
<p>此时再执行<code>node index.js</code>就不会报错了。</p>
<h4 id="More"><a href="#More" class="headerlink" title="More"></a>More</h4><h5 id="lsof-list-open-files"><a href="#lsof-list-open-files" class="headerlink" title="lsof(list open files)"></a>lsof(list open files)</h5><blockquote>
<p>Lsof lists on its standard output file information about files opened by processes.</p>
<p>An open file may be a regular file, a directory, a block special file, a character special  file,  an executing  text  reference,  a library, a stream or a network file (Internet socket, NFS file or UNIX domain socket.)  A specific file or all the files in a file system may be selected by path.</p>
<p>-i [i]  selects the listing of files any of whose Internet address matches the address specified  in i.   If  no  address  is specified, this option selects the listing of all Internet and x.25(HP-UX) network files.<br> [46][protocol][@hostname|hostaddr][:service|port]</p>
</blockquote>
<p>And here’s some functional commands.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">lsof `which httpd`           <span class="comment">//那个进程在使用apache的可执行文件</span></div><div class="line">lsof /etc/passwd             <span class="comment">//那个进程在占用/etc/passwd</span></div><div class="line">lsof /dev/hda6               <span class="comment">//那个进程在占用hda6</span></div><div class="line">lsof /dev/cdrom              <span class="comment">//那个进程在占用光驱</span></div><div class="line">lsof -c sendmail             <span class="comment">//查看sendmail进程的文件使用情况</span></div><div class="line">lsof -c courier -u ^zahn     <span class="comment">//显示出那些文件被以courier打头的进程打开，但是并不属于用户zahn</span></div><div class="line">lsof -<span class="selector-tag">p</span> <span class="number">30297</span>                <span class="comment">//显示那些文件被pid为30297的进程打开</span></div><div class="line">lsof -D /tmp                 <span class="comment">//显示所有在/tmp文件夹中打开的instance和文件的进程。但是symbol文件并不在列</span></div><div class="line"></div><div class="line">lsof -u1000                  <span class="comment">//查看uid是100的用户的进程的文件使用情况</span></div><div class="line">lsof -utony                  <span class="comment">//查看用户tony的进程的文件使用情况</span></div><div class="line">lsof -u^tony                 <span class="comment">//查看不是用户tony的进程的文件使用情况(^是取反的意思)</span></div><div class="line">lsof -<span class="selector-tag">i</span>                      <span class="comment">//显示所有打开的端口</span></div><div class="line">lsof -<span class="selector-tag">i</span>:<span class="number">80</span>                   <span class="comment">//显示所有打开80端口的进程</span></div><div class="line">lsof -<span class="selector-tag">i</span> -U                   <span class="comment">//显示所有打开的端口和UNIX domain文件</span></div><div class="line">lsof -<span class="selector-tag">i</span> UDP@[url]www<span class="selector-class">.akadia</span><span class="selector-class">.com</span>:<span class="number">123</span>     <span class="comment">//显示那些进程打开了到www.akadia.com的UDP的123(ntp)端口的链接</span></div><div class="line">lsof -<span class="selector-tag">i</span> tcp@ohaha<span class="selector-class">.ks</span><span class="selector-class">.edu</span><span class="selector-class">.tw</span>:ftp -r      <span class="comment">//不断查看目前ftp连接的情况(-r，lsof会永远不断的执行，直到收到中断信号,+r，lsof会一直执行，直到没有档案被显示,缺省是15s刷新)</span></div><div class="line">lsof -<span class="selector-tag">i</span> tcp@ohaha<span class="selector-class">.ks</span><span class="selector-class">.edu</span><span class="selector-class">.tw</span>:ftp -n      <span class="comment">//lsof -n 不将IP转换为hostname，缺省是不加上-n参数</span></div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref:</strong></p>
<p><a href="http://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316599.html" target="_blank" rel="external">http://www.cnblogs.com/ggjucheng/archive/2012/01/08/2316599.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Bash </tag>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【转】iOS9 HTTP 不能正常使用的解决办法]]></title>
      <url>http://www.calios.gq/2015/09/17/%E3%80%90%E8%BD%AC%E3%80%91iOS9-HTTP-%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><strong>原文链接：</strong> <a href="http://segmentfault.com/a/1190000002933776" target="_blank" rel="external">http://segmentfault.com/a/1190000002933776</a></p>
<p>今天升级Xcode 7.0 bata发现网络访问失败。<br>输出错误信息</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The resource could <span class="keyword">not</span> be loaded because <span class="keyword">the</span> App Transport Security policy requires <span class="keyword">the</span> use <span class="keyword">of</span> <span class="keyword">a</span> secure connection.</div></pre></td></tr></table></figure>
<p>Google后查证，iOS9引入了新特性<code>App Transport Security (ATS)</code>。详情：<a href="https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13" target="_blank" rel="external">App Transport Security (ATS)</a></p>
<p>新特性要求App内访问的网络必须使用<code>HTTPS</code>协议。<br>但是现在公司的项目使用的是<code>HTTP</code>协议，使用私有加密方式保证数据安全。现在也不能马上改成<code>HTTPS</code>协议传输。</p>
<p>最终找到以下解决办法：</p>
<p>1.在Info.plist中添加<code>NSAppTransportSecurity</code>类型<code>Dictionary</code>。</p>
<p>2.在<code>NSAppTransportSecurity</code>下添加<code>NSAllowsArbitraryLoads</code>类型<code>Boolean</code>,值设为<code>YES</code>。</p>
<hr>
<p><strong>参考：</strong></p>
<ul>
<li><a href="https://github.com/meteor/meteor/issues/4560" target="_blank" rel="external">App Transport Security support aka apps on iOS 9 don’t work #4560</a></li>
<li><a href="http://devstreaming.apple.com/videos/wwdc/2015/711y6zlz0ll/711/711_networking_with_nsurlsession.pdf?dl=1" target="_blank" rel="external">711_networking_with_nsurlsession.pdf</a></li>
</ul>
<hr>
<p><strong>总结：</strong></p>
<p>苹果正在加大应用安全的管控，这个举措可以看出苹果对信息安全的重视，也暴露出大部分应用传输数据时都是未经过加密的，或使用私有方式加密，以至于苹果开始对开发者提出要求。</p>
<p>私有加密虽然一定程度上是安全的，但是终究不是一个长久之计。全世界这么多安全专家在维护<code>HTTPS</code>安全，早日使用<code>HTTPS</code>确保信息安全才是王道！也省去了私有加密协议的安全隐患！</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> iOS9 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【译】KVO-如何检查一个对象是否是观察者？]]></title>
      <url>http://www.calios.gq/2015/09/12/%E3%80%90%E8%AF%91%E3%80%91KVO-%E5%A6%82%E4%BD%95%E6%A3%80%E6%9F%A5%E4%B8%80%E4%B8%AAobject%E6%98%AF%E5%90%A6%E6%98%AF%E8%A7%82%E5%AF%9F%E8%80%85%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p><strong>原文链接：<a href="http://stackoverflow.com/questions/9231896/kvo-how-to-check-if-an-object-is-an-observer" target="_blank" rel="external">KVO - How to check if an object is an observer?</a></strong></p>
<hr>
<h4 id="Nikolai-Ruhe的回答"><a href="#Nikolai-Ruhe的回答" class="headerlink" title="Nikolai Ruhe的回答:"></a><a href="http://stackoverflow.com/users/104790/nikolai-ruhe" target="_blank" rel="external">Nikolai Ruhe</a>的回答:</h4><blockquote>
<p>是否可能检查出一个对象实际上是否在观察某个属性？</p>
</blockquote>
<p>不能。当和KVO打交道时你应该谨记以下规则：</p>
<p><u>每当创建一个观察者（observer）的时候，你就要负责移除这个观察者。观察者是通过它的上下文（context）来标记唯一性的——因此，上下文必须是唯一的。当接收通知时（以及在苹果的Lion系统中，移除观察者时），你应该检查的是 <strong>上下文</strong> ，而不是path。</u></p>
<p>处理被观察对象的最佳方法是，在被观察对象的<code>setter</code>方法中移除和创建KVO事件。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> fooObservanceContext;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)<span class="string">setFoo:</span>(Foo \*)foo</div><div class="line">&#123;</div><div class="line">	[_foo <span class="string">removeObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"bar"</span> <span class="string">context:</span>&amp;fooObservanceContext];</div><div class="line"></div><div class="line">	_foo = foo; <span class="comment">// or whatever ownership handling is needed.</span></div><div class="line"></div><div class="line">	[foo <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"bar"</span> <span class="string">options:</span><span class="number">0</span> <span class="string">context:</span>&amp;fooObservanceContext];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)<span class="string">observeValueForKeyPath:</span>(NSString *)keyPath <span class="string">ofObject:</span>(id)object <span class="string">change:</span>(NSDictionary *)change <span class="string">context:</span>(<span class="keyword">void</span> \*)context</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (context == &amp;fooObservanceContext) &#123;</div><div class="line">	    <span class="comment">// handle change</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">	    <span class="comment">// not my observer callback</span></div><div class="line">	    [<span class="keyword">super</span> <span class="string">observeValueForKeyPath:</span>keyPath <span class="string">ofObject:</span>object <span class="string">change:</span>change <span class="string">context:</span>context];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc</div><div class="line">&#123;</div><div class="line">	self.foo = nil; <span class="comment">// removes observer</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当使用KVO时，你必须确保观察者和被观察者这两个对象的生命周期，和正在执行的KVO事件的生命周期一样长。</p>
<p>当添加一个KVO事件时，你需要衡量是否正确移除了同一个KVO事件。不要凭空假设，你是KVO的唯一使用者。框架中的类可能会根据它们自己的需求来使用KVO，所以需要在回调时检查上下文。</p>
<p>最后，我想指出的是：被观察的属性必须是支持KVO的。<a href="http://stackoverflow.com/questions/4874288/use-key-value-observing-to-get-a-kvo-callback-on-a-uiviews-frame/19701380#19701380" target="_blank" rel="external">你不可能观察任何属性</a>。</p>
<hr>
<h4 id="Rayfleck的回答"><a href="#Rayfleck的回答" class="headerlink" title="Rayfleck的回答:"></a><a href="http://stackoverflow.com/users/165050/rayfleck" target="_blank" rel="external">Rayfleck</a>的回答:</h4><p><code>NSKeyValueObserving</code> 协议中有部分是这样的：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="literal">void</span> <span class="string">\*)observationInfo</span></div></pre></td></tr></table></figure>
<p>它会列出观察者。但只有在debug的时候有用。<br>可以在控制台输入：<code>po [observedObject observationInfo]</code>，就可以得到一个漂亮的观察者和key path的概览。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 译言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS Developing Tricks]]></title>
      <url>http://www.calios.gq/2015/09/12/iOS-Developing-Tricks/</url>
      <content type="html"><![CDATA[<h4 id="1-How-to-set-the-title-of-UIButton-as-left-alignment"><a href="#1-How-to-set-the-title-of-UIButton-as-left-alignment" class="headerlink" title="1.How to set the title of UIButton as left alignment?"></a>1.How to set the title of UIButton as left alignment?</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yourBtn.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yourBtn.contentEdgeInsets = UIEdgeInsetsMake(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<h4 id="2-UINavigationController-Hide-Back-Button-on-Only-One-View"><a href="#2-UINavigationController-Hide-Back-Button-on-Only-One-View" class="headerlink" title="2.UINavigationController: Hide Back Button on Only One View"></a>2.UINavigationController: Hide Back Button on Only One View</h4><p>Sometimes, <code>controller.navigationItem.hidesBackButton = YES/NO</code> doesn’t work at all.</p>
<p>And here’s a workaround:</p>
<p>To hide the back button, set the left bar button view to an empty view.</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">UIView *tmpView = <span class="comment">[<span class="comment">[UIView alloc]</span> initWithFrame:CGRectZero]</span>;</div><div class="line">UIBarButtonItem *tmpButtonItem = <span class="comment">[<span class="comment">[UIBarButtonItem alloc]</span> initWithCustomView:tmpView]</span>;</div><div class="line"><span class="comment">[tmpView release]</span>;</div><div class="line">self.navigationItem.leftBarButtonItem = tmpButtonItem;</div><div class="line"><span class="comment">[tmpButtonItem release]</span>;</div></pre></td></tr></table></figure>
<p>To restore the back button, just set the left bar button item to <code>nil</code>.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span>.navigationItem setLeftBarButtonItem:<span class="literal">nil</span> animated:<span class="literal">YES</span>];</div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref:</strong></p>
<p><a href="http://stackoverflow.com/questions/2765024/how-to-set-the-title-of-uibutton-as-left-alignment" target="_blank" rel="external">http://stackoverflow.com/questions/2765024/how-to-set-the-title-of-uibutton-as-left-alignment</a></p>
<p><a href="http://stackoverflow.com/questions/5062405/uinavigationcontroller-hiding-back-button-on-one-view-hides-it-for-all-views" target="_blank" rel="external">http://stackoverflow.com/questions/5062405/uinavigationcontroller-hiding-back-button-on-one-view-hides-it-for-all-views</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UISearchBar二三事]]></title>
      <url>http://www.calios.gq/2015/09/12/UISearchBar%E4%BA%8C%E4%B8%89%E4%BA%8B/</url>
      <content type="html"><![CDATA[<h4 id="1-如何修改Cancel按钮的Title"><a href="#1-如何修改Cancel按钮的Title" class="headerlink" title="1.如何修改Cancel按钮的Title"></a>1.如何修改Cancel按钮的Title</h4><p><strong>注意</strong>：使用iOS8 SDK，本次 UISearchBar适用于iOS7(+)版本，如果想要适配iOS6，则需要对应适配iOS6.</p>
<ul>
<li>iOS7+: <code>for(id cc in [searchBar.subviews[0] subviews]){}</code></li>
<li>iOS7-: <code>for(id cc in [searchBar subviews]){}</code></li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)<span class="string">searchBarTextDidBeginEditing:</span>(UISearchBar *)searchBar</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(id cc <span class="keyword">in</span> [searchBar.subviews[<span class="number">0</span>] subviews])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>([cc <span class="string">isKindOfClass:</span>[UIButton <span class="class"><span class="keyword">class</span>]])</span></div><div class="line">        &#123;</div><div class="line">            UIButton *btn = (UIButton *)cc;</div><div class="line">            [btn <span class="string">setTitle:</span>[AppLanguageProcess <span class="string">getLanguageWithKey:</span>@<span class="string">"TEXT_CANCEL"</span>]  <span class="string">forState:</span>UIControlStateNormal];</div><div class="line">            [btn <span class="string">setTitleColor:</span>[UIColor whiteColor] <span class="string">forState:</span>UIControlStateNormal];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-iOS7中添加到NavigationBar上的UISearchBar不显示Cancel按钮"><a href="#2-iOS7中添加到NavigationBar上的UISearchBar不显示Cancel按钮" class="headerlink" title="2.iOS7中添加到NavigationBar上的UISearchBar不显示Cancel按钮"></a>2.iOS7中添加到NavigationBar上的UISearchBar不显示Cancel按钮</h4><p>由于某些原因，iOS中添加到NavigationBar上的UISearchBar不显示Cancel按钮。同样的情况也发生在将UISearchBar设置为navigationItem的titleView时。<br>你可以通过在UISearchBar外面包一层view来规避这个问题。如下是我将它放在titleView时的解决办法：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">UISearchBar *searchBar = [UISearchBar new]<span class="comment">;</span></div><div class="line">searchBar.<span class="keyword">showsCancelButton </span>= YES<span class="comment">;</span></div><div class="line">[searchBar sizeToFit]<span class="comment">;</span></div><div class="line">UIView *<span class="keyword">barWrapper </span>= [[UIView alloc]initWithFrame:searchBar.<span class="keyword">bounds];</span></div><div class="line">[<span class="keyword">barWrapper </span><span class="keyword">addSubview:searchBar];</span></div><div class="line">self.navigationItem.titleView = <span class="keyword">barWrapper;</span></div></pre></td></tr></table></figure></p>
<h4 id="3-如何将背景设置为clearColor"><a href="#3-如何将背景设置为clearColor" class="headerlink" title="3.如何将背景设置为clearColor"></a>3.如何将背景设置为clearColor</h4><p>Here’s a future-proof way:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">[searchBar setBackgroundImage:\[UIImage new]]</span><span class="comment">;</span></div><div class="line"><span class="section">[searchBar setTranslucent:YES]</span><span class="comment">;</span></div></pre></td></tr></table></figure></p>
<h4 id="4-如何在“搜索”按钮点击后“取消”按钮依然可点"><a href="#4-如何在“搜索”按钮点击后“取消”按钮依然可点" class="headerlink" title="4.如何在“搜索”按钮点击后“取消”按钮依然可点"></a>4.如何在“搜索”按钮点击后“取消”按钮依然可点</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (id view <span class="keyword">in</span> [[_searchBar.subviews lastObject] subviews]) &#123;</div><div class="line">    <span class="keyword">if</span> ([view <span class="string">isKindOfClass:</span>[UIButton <span class="class"><span class="keyword">class</span>]]) &#123;</span></div><div class="line">         [view <span class="string">setEnabled:</span>YES];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref:</strong></p>
<p><a href="http://www.cocoachina.com/bbs/read.php?tid=280249" target="_blank" rel="external">http://www.cocoachina.com/bbs/read.php?tid=280249</a><br><a href="http://stackoverflow.com/questions/18986407/ios7-when-uisearchbar-added-in-uinavigationbar-not-showing-cancel-button" target="_blank" rel="external">iOS7 when UIsearchbar added in UINavigationBar not showing cancel button</a><br><a href="http://stackoverflow.com/a/12598711/1594792" target="_blank" rel="external">UISearchBar clear background color or set background image</a><br><a href="http://stackoverflow.com/questions/22499379/uitextfield-from-uisearchbar-in-ios-7-1" target="_blank" rel="external">http://stackoverflow.com/questions/22499379/uitextfield-from-uisearchbar-in-ios-7-1</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[View Debugging]]></title>
      <url>http://www.calios.gq/2015/09/11/View-Debugging/</url>
      <content type="html"><![CDATA[<ul>
<li>将联机调试的设备截屏：Debug -> View Debugging -> Take Screenshot of **iPhone。</li>
</ul>
<ul>
<li><p>查看view的层级结构：Debug -> View Debugging -> Capture View Hierarchy. 特别是当某个view不显示或位置不正常时，用它可以很清楚的看到是被哪个view遮挡。</p>
</li>
<li><p>调试时显示view的尺寸和frame：Debug -> View Debugging -> Show View Frames/Show Alignment Rectangles。</p>
</li>
</ul>
<p>以上，均可在 Xcode -> Preferences -> Key Bindings -> Debug Menu 中设置快捷键。<br><img src="http://i12.tietuku.com/a137140412ce894c.png" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Xcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AutoLayout debug]]></title>
      <url>http://www.calios.gq/2015/09/10/AutoLayout-debug/</url>
      <content type="html"><![CDATA[<p>对于使用AutoLayout布局的view，如下是一个通用的debug方法。</p>
<p>1.打开Exception breakpoints。</p>
<p>2.在需要debug的view中添加如下方法：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">layoutSublayersOfLayer:</span>(CALayer *)layer</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> <span class="string">layoutSublayersOfLayer:</span>layer];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.运行代码，应该会在新增方法中停住。如果没有，在<code>[super layoutSublayersOfLayer:layer];</code> 一句添加断点。</p>
<p>4.在控制台中，输入<code>po [self _autolayoutTrace]</code>。</p>
<p>这会打印出window中的所有view，并且constraint有问题的view会用星号（*）或者<code>AMBIGUOUS LAYOUT</code> 标示出来。以此，就可以找到需要仔细斟酌的constraint了。</p>
<hr>
<p><strong>Ref:</strong></p>
<p><a href="http://stackoverflow.com/questions/23020326/assertion-failure-in-uitableview-layoutsublayersoflayer" target="_blank" rel="external">http://stackoverflow.com/questions/23020326/assertion-failure-in-uitableview-layoutsublayersoflayer</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> AutoLayout </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Orientation二三事]]></title>
      <url>http://www.calios.gq/2015/09/09/Orientation%E4%BA%8C%E4%B8%89%E4%BA%8B/</url>
      <content type="html"><![CDATA[<h4 id="一、如何用代码实现强制旋转"><a href="#一、如何用代码实现强制旋转" class="headerlink" title="一、如何用代码实现强制旋转"></a>一、如何用代码实现强制旋转</h4><p>以下方法已在iOS7 &amp; iOS8的ARC中测试过：</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[[UIDevice currentDevice] setValue:[NSNumber numberWithInteger: UIInterfaceOrientationPortrait]</div><div class="line">	                        forKey:@<span class="string">"orientation"</span>]<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>这种方法并不会像 <code>performSelector</code> 一样造成内存泄露。</p>
<p><strong>对于UIAlertView：</strong> 使用以上代码，当你在<code>view(will/Did)appear</code> 中打开UIAlertView时会发现所有view都是竖屏，除了UIAlertView。我没法强制它旋转，但是我发现如果你在打开UIAlertView之前稍微延迟一会儿，它就会有时间来改变自己的方向。</p>
<h4 id="二、如何在一个项目中只允许一个ViewController横屏-竖屏显示"><a href="#二、如何在一个项目中只允许一个ViewController横屏-竖屏显示" class="headerlink" title="二、如何在一个项目中只允许一个ViewController横屏/竖屏显示"></a>二、如何在一个项目中只允许一个ViewController横屏/竖屏显示</h4><p>我会建议将你的app设置为portrait，然后在需要横屏的地方允许landscape。</p>
<p><strong>首先，</strong> 点击 Project name -> General -> Deployment Info -> 在Device Orientation只选择Portrait。</p>
<p><strong>其次，</strong> 在你的<code>AppDelegate.h</code> 中添加如下属性：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">property</span><span class="title"> </span>(nonatomic) BOOL fullScreenVideoIsPlaying;</div></pre></td></tr></table></figure>
<p><strong>再次，</strong> 在你的<code>AppDelegate.m</code> 中添加如下方法：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSUInteger</span>)application:(<span class="built_in">UIApplication</span> *)application supportedInterfaceOrientationsForWindow:(<span class="built_in">UIWindow</span> *)window&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">self</span>.fullScreenVideoIsPlaying == <span class="literal">YES</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskAllButUpsideDown</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskPortrait</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>之后，</strong> 在需要landscape的view controller中，创建一个方法或直接把如下代码放在你的<code>viewWillAppear:</code> 中：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">((AppDelegate \*)[[<span class="built_in">UIApplication</span> sharedApplication] delegate]).fullScreenVideoIsPlaying = <span class="literal">YES</span>;</div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarOrientation:<span class="built_in">UIInterfaceOrientationPortrait</span> animated:<span class="literal">NO</span>];</div></pre></td></tr></table></figure>
<p>在需要改回portrait的地方这么写：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">AppDelegate *appDelegate = (AppDelegate *)[[<span class="built_in">UIApplication</span> sharedApplication] delegate];</div><div class="line">	appDelegate.fullScreenVideoIsPlaying = <span class="literal">NO</span>;</div><div class="line">[<span class="keyword">self</span> supportedInterfaceOrientations];</div><div class="line">[<span class="keyword">self</span> shouldAutorotate:<span class="built_in">UIInterfaceOrientationPortrait</span>];</div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarOrientation:<span class="built_in">UIInterfaceOrientationPortrait</span> animated:<span class="literal">NO</span>];</div></pre></td></tr></table></figure>
<p>在iOS8中需要添加如下方法：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)shouldAutorotateToInterfaceOrientation:(<span class="built_in">UIInterfaceOrientation</span>)interfaceOrientation &#123;</div><div class="line">	<span class="comment">// Return YES for supported orientations</span></div><div class="line">	<span class="keyword">return</span> (interfaceOrientation == <span class="built_in">UIInterfaceOrientationPortrait</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)shouldAutorotate:(<span class="built_in">UIInterfaceOrientation</span>)interfaceOrientation&#123;</div><div class="line">	<span class="comment">// Return YES for supported orientations</span></div><div class="line">	<span class="keyword">return</span> (interfaceOrientation == <span class="built_in">UIInterfaceOrientationPortrait</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="built_in">NSUInteger</span>)supportedInterfaceOrientations&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">UIInterfaceOrientationMaskPortrait</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>Ref:</strong></p>
<p><a href="http://stackoverflow.com/questions/12650137/how-to-change-the-device-orientation-programmatically-in-ios-6" target="_blank" rel="external">How to change the device orientation programmatically in iOS 6</a> (In fact, it also works for iOS7 &amp; iOS8. XD)</p>
<p><a href="http://stackoverflow.com/questions/26611646/ios7-ios8-allow-only-portrait-in-view-controller" target="_blank" rel="external">IOS7/IOS8 Allow only portrait in view controller</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UIKit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ 设备的抓包]]></title>
      <url>http://www.calios.gq/2015/09/07/Getting-a-Packet-Trace-for-%EF%A3%BF/</url>
      <content type="html"><![CDATA[<h4 id="抓包的方法取决于你的平台："><a href="#抓包的方法取决于你的平台：" class="headerlink" title="抓包的方法取决于你的平台："></a>抓包的方法取决于你的平台：</h4><ul>
<li>OS X系统上有很多工具可以帮助你收集、分析包。比如：Charles，CPA(Cocoa Packet Analyzer)，tcpdump，Wireshark等。</li>
<li>iOS并不直接支持抓包。但是，如果iOS设备通过USB连接到Mac上，就可以用OS X的抓包工具来收集并分析通过远程虚拟接口（Remote virtual interface）获取的包。</li>
</ul>
<h4 id="iOS的抓包方法"><a href="#iOS的抓包方法" class="headerlink" title="iOS的抓包方法"></a>iOS的抓包方法</h4><p>iOS并不直接支持抓包。但是如果你在做iOS开发，你可以用以下方式来抓包：</p>
<ul>
<li>如果你尝试解决的问题发生在WiFi上，你可以把iOS设备放到一个测试WiFi网络中。详情见 Wifi Capture。</li>
<li>如果你的app用的是HTTP，你可以设置一下设备的HTTP代理来调试。</li>
<li>在iOS5及以后，你可以使用远程虚拟接口（RVI）。</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span><span class="comment"># 获取当前端口的列表</span></div><div class="line"><span class="variable">$ </span>ifconfig -l</div><div class="line">lo<span class="number">0</span> gif<span class="number">0</span> stf<span class="number">0</span> en<span class="number">0</span> en1 p2p<span class="number">0</span> fw<span class="number">0</span> ppp<span class="number">0</span> utun<span class="number">0</span></div><div class="line"><span class="variable">$ </span><span class="comment"># 新建指定UUID设备的端口</span></div><div class="line"><span class="variable">$ </span>rvictl -s <span class="number">74</span>bd53c647548234ddcef0ee3abee616005051ed</div><div class="line"></div><div class="line">Starting device <span class="number">74</span>bd53c647548234ddcef0ee3abee616005051ed [SUCCEEDED]</div><div class="line"></div><div class="line"><span class="variable">$ </span><span class="comment"># 重新获取端口列表，会看到已经通过命令新增的虚拟网络端口，rvi0。</span></div><div class="line"><span class="variable">$ </span><span class="comment"># network interface, rvi0, added by the previous command.</span></div><div class="line"><span class="variable">$ </span>ifconfig -l</div><div class="line">lo<span class="number">0</span> gif<span class="number">0</span> stf<span class="number">0</span> en<span class="number">0</span> en1 p2p<span class="number">0</span> fw<span class="number">0</span> ppp<span class="number">0</span> utun<span class="number">0</span> rvi<span class="number">0</span></div><div class="line"></div><div class="line"><span class="variable">$ </span><span class="comment"># 列出全部虚拟端口</span></div><div class="line"><span class="variable">$ </span>rvictl -l</div><div class="line"></div><div class="line"><span class="variable">$ </span><span class="comment"># 关闭指定UUID设备的虚拟端口</span></div><div class="line"><span class="variable">$ </span>rvictl -x &lt;UUID&gt; 关闭虚拟端口</div></pre></td></tr></table></figure>
<p>Wireshark 监控rvi0端口。</p>
<p>使用Mac抓取iPhone数据包可通过共享和代理两种方式：</p>
<ul>
<li>使用Mac的网络共享功能将Mac的网络通过WiFi共享给iPhone连接；</li>
<li>使用代理软件（例如Charles）在Mac上建立HTTP代理服务器。</li>
</ul>
<p>这两种方式都是将iPhone的网络流量导入到Mac电脑中，通过Mac连接互联网。这就要求Mac本身是联网的，对于网络共享的方式还要求Mac本身的网络不能使用WiFi，而且在iPhone上只能使用WiFi连接，无法抓取到2G/3G网络包。</p>
<p>苹果在iOS 5中新引入了 <strong>“远程虚拟接口(Remote Virtual Interface,RVI)”</strong> 的特性,可以在Mac中建立一个虚拟网络接口来作为iOS设备的网络栈，这样所有经过iOS设备的流量都会经过此虚拟接口。此虚拟接口只是监听iOS设备本身的协议栈（但并没有将网络流量中转到Mac本身的网络连接上），所有网络连接都是iOS设备本身的，与Mac电脑本身联不联网或者联网类型无关。iOS设备本身可以为任意网络类型（WiFi/2G/3G），这样在Mac电脑上使用任意抓包工具（tcpdump、Wireshark、CPA）抓取RVI接口上的数据包就实现了对iPhone的抓。</p>
<p><strong>Ref:</strong></p>
<p><a href="https://developer.apple.com/library/mac/qa/qa1176/_index.html" target="_blank" rel="external">https://developer.apple.com/library/mac/qa/qa1176/_index.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maskWithHole-使用CAShapeLayer和UIBezierPath画图形]]></title>
      <url>http://www.calios.gq/2015/08/29/maskWithHole-%E4%BD%BF%E7%94%A8CAShapeLayer%E5%92%8CUIBezierPath%E7%94%BB%E5%9B%BE%E5%BD%A2/</url>
      <content type="html"><![CDATA[<p>使用CAShapeLayer和UIBezierPath画图形的步骤：</p>
<ul>
<li>新建CAShapeLayer对象shapeLayer</li>
<li>新建UIBezierPath对象bezierPath</li>
<li>使用bezierPath各种画图</li>
<li>将bezierPath的CGPath赋值给shapeLayer的path</li>
<li>使用shapeLayer</li>
</ul>
<p>使用场景：</p>
<ul>
<li>扫描二维码的页面，周边是灰黑色透明半背景，中间是完全透明的扫描框。</li>
</ul>
<p>实现代码：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CAShapeLayer</span> *maskWithHole = [<span class="built_in">CAShapeLayer</span> layer];</div><div class="line"></div><div class="line"><span class="comment">// Both frames are defined in the same coordinate system</span></div><div class="line"><span class="built_in">CGRect</span> biggerRect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, [[<span class="built_in">UIScreen</span> mainScreen] bounds].size.width,[[<span class="built_in">UIScreen</span> mainScreen] bounds].size.height - <span class="number">64</span>);</div><div class="line"><span class="built_in">CGRect</span> smallerRect = <span class="built_in">CGRectMake</span>((kScreenWidth - PickerSize)/<span class="number">2</span> + <span class="number">5</span>, <span class="number">100</span> + <span class="number">5</span>, PickerSize - <span class="number">10</span>, PickerSize/<span class="number">2</span> - <span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="built_in">UIBezierPath</span> *maskPath = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line">[maskPath moveToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(biggerRect), <span class="built_in">CGRectGetMinY</span>(biggerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(biggerRect), <span class="built_in">CGRectGetMaxY</span>(biggerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMaxX</span>(biggerRect), <span class="built_in">CGRectGetMaxY</span>(biggerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMaxX</span>(biggerRect), <span class="built_in">CGRectGetMinY</span>(biggerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(biggerRect), <span class="built_in">CGRectGetMinY</span>(biggerRect))];</div><div class="line"></div><div class="line">[maskPath moveToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(smallerRect), <span class="built_in">CGRectGetMinY</span>(smallerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(smallerRect), <span class="built_in">CGRectGetMaxY</span>(smallerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMaxX</span>(smallerRect), <span class="built_in">CGRectGetMaxY</span>(smallerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMaxX</span>(smallerRect), <span class="built_in">CGRectGetMinY</span>(smallerRect))];</div><div class="line">[maskPath addLineToPoint:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetMinX</span>(smallerRect), <span class="built_in">CGRectGetMinY</span>(smallerRect))];</div><div class="line"></div><div class="line">[maskWithHole setPath:[maskPath <span class="built_in">CGPath</span>]];</div><div class="line">[maskWithHole setFillRule:kCAFillRuleEvenOdd];</div><div class="line">[maskWithHole setFillColor:[[<span class="built_in">UIColor</span> colorWithWhite:<span class="number">0.45</span> alpha:<span class="number">0.45</span>] <span class="built_in">CGColor</span>]];</div><div class="line"></div><div class="line">[<span class="keyword">self</span>.view.layer insertSublayer:maskWithHole above:_preview];</div></pre></td></tr></table></figure>
<p><strong>Ref:</strong><br><a href="http://stackoverflow.com/questions/10856353/crop-a-cashapelayer-retrieving-the-external-path" target="_blank" rel="external">http://stackoverflow.com/questions/10856353/crop-a-cashapelayer-retrieving-the-external-path</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> CoreAnimation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iTerm2实用技巧]]></title>
      <url>http://www.calios.gq/2015/08/26/iTerm2%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h4 id="Command键"><a href="#Command键" class="headerlink" title="Command键"></a>Command键</h4><p>按住⌘键:</p>
<ul>
<li>可以拖拽选中的字符串；</li>
<li>点击 url：调用默认浏览器访问该网址；</li>
<li>点击文件：调用默认程序打开文件；</li>
<li>如果文件名是filename:42，且默认文本编辑器是 Macvim、Textmate或BBEdit，将会直接打开到这一行；</li>
<li>点击文件夹：在 finder 中打开该文件夹；</li>
<li>同时按住option键，可以以矩形选中，类似于vim中的ctrl v操作。</li>
</ul>
<h4 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h4><ul>
<li>切换 tab：<code>⌘+←</code>，<code>⌘+→</code>，<code>⌘+{</code>，<code>⌘+}</code>。<code>⌘+</code> 数字直接定位到该 tab；</li>
<li>新建 tab：<code>⌘+t</code>；</li>
<li>顺序切换 pane：<code>⌘+[</code>， <code>⌘+]</code>；</li>
<li>按方向切换 pane：<code>⌘+Option+</code> 方向键；</li>
<li>切分屏幕：<code>⌘+d</code> 水平切分，<code>⌘+Shift+d</code> 垂直切分；</li>
<li>智能查找：<code>⌘+f</code>，支持正则查找。</li>
</ul>
<h4 id="自动完成"><a href="#自动完成" class="headerlink" title="自动完成"></a>自动完成</h4><ul>
<li>自动补齐命令：输入若干字符，按 <code>⌘+</code>，弹出自动补齐窗口，列出曾经使用过的命令。</li>
<li>历史记录：按 <code>⌘+Shift+h</code> 弹出历史记录窗口。</li>
</ul>
<h4 id="高亮当前鼠标的位置"><a href="#高亮当前鼠标的位置" class="headerlink" title="高亮当前鼠标的位置"></a>高亮当前鼠标的位置</h4><ul>
<li><code>⌘+/</code>，高亮显示鼠标位置。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Terminal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xcode快捷键]]></title>
      <url>http://www.calios.gq/2015/08/09/Xcode%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<ul>
<li>在辅助编辑器中打开文件:在项目导航器中选中文件执行<code>Option+左键点击</code>操作。</li>
<li>文件跳转栏: <code>Control+6</code>（键入方法/变量名+Enter跳转）</li>
<li>移动光标到下一个editor：``Command + Option + ```</li>
<li>快速打开: <code>Command + Shift + O</code>，直接跳转到某个方法定义或者指定的代码文件。（键入首字母，以较少输入搜索更多。）</li>
<li>文档和参考: <code>Command + Shift + 0 (Zero)</code></li>
<li>清除控制台：<code>Command + k</code></li>
</ul>
<p>断点相关：</p>
<ul>
<li>Enable/Disable breakpoint: <code>Command + y</code>-</li>
<li>Pause/Continue: <code>Ctrl + Command + y</code></li>
<li>Add breakpoint at current line: <code>Command + \</code></li>
<li>Create symbolic breakpoint: <code>Command + Ctrl + \</code> (Customable)</li>
</ul>
<hr>
<p>附上一张完整快捷键的图。</p>
<p><img src="http://i12.tietuku.com/c65f289668849506.png" alt="" title="Xcode shortcuts"></p>
]]></content>
      
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Xcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[的毛玻璃效果]]></title>
      <url>http://www.calios.gq/2015/07/29/%EF%A3%BF%E7%9A%84%E6%AF%9B%E7%8E%BB%E7%92%83%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>先来看苹果的官方文档：</p>
<blockquote>
<p>Tab bars are translucent by default on iOS 7. Additionally, there is a system blur applied to all tab bars. This allows your content to show through underneath the bar.</p>
<p>Navigation bars are translucent by default in iOS 7. Additionally, there is a system blur applied to all navigation bars. This allows your content to show through underneath the bar.</p>
</blockquote>
<p>简而言之，iOS7及以后，TabBar和NavigationBar都有自带的毛玻璃效果。所以，作为deployment target为7.0的项目，之前是在折腾神马？o(╯□╰)o</p>
<p>因此，今后项目中，对于TabBar&amp;NavigationBar毛玻璃效果，当deployment target >= 7.0时无需特殊处理，天下无事。</p>
<p><br></p>
<hr>
<p><strong>Related:</strong><br>一些提供毛玻璃效果的Framework：</p>
<ul>
<li><a href="https://github.com/nicklockwood/FXBlurView" target="_blank" rel="external">FXBlurView</a>: UIView subclass that replicates the iOS 7 realtime background blur effect, but works on iOS 5 and above.</li>
<li><a href="https://github.com/romaonthego/REFrostedViewController" target="_blank" rel="external">REFrostedViewController</a>: iOS 7/8 style blurred view controller that appears on top of your view controller.</li>
<li><a href="https://github.com/JagCesar/iOS-blur" target="_blank" rel="external">JCRBlurView</a></li>
<li><a href="https://github.com/lukabernardi/LBBlurredImage" target="_blank" rel="external">LBBlurredImage</a>: LBBlurredImage is an UIImageView category that permit to set an image and make this blurred.</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NSLocalNotification]]></title>
      <url>http://www.calios.gq/2015/07/09/NSLocalNotification/</url>
      <content type="html"><![CDATA[<p>创建一个本地通知通常分为以下几个步骤：</p>
<p>1.创建<code>UILocalNotification</code>。 </p>
<p>2.设置处理通知的时间<code>fireDate</code>。 </p>
<p>3.配置通知的内容：通知主体、通知声音、图标数字等。 </p>
<p>4.配置通知传递的自定义数据参数<code>userInfo</code>（这一步可选）。 </p>
<p>5.调用通知，可以使用<code>scheduleLocalNotification:</code> 按计划调度一个通知，也可以使用<code>presentLocalNotificationNow</code> 立即调用通知。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Foundation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[What-About-Now?]]></title>
      <url>http://www.calios.gq/2015/07/05/What-About-Now/</url>
      <content type="html"><![CDATA[<p><strong>First, create a post：</strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WhereHexoInstalled calios$ hexo <span class="keyword">new</span> ForgetIt</div><div class="line">[INFO] Created: ~<span class="regexp">/WhereHexoInstalled/</span><span class="keyword">source</span><span class="regexp">/_posts/</span>forgetIt.md</div></pre></td></tr></table></figure></p>
<p><strong>Open it:</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WhereHexoInstalled calios<span class="variable">$ </span>open ~<span class="regexp">/WhereHexoInstalled/source</span><span class="regexp">/_posts/</span>What-About-Now.md</div></pre></td></tr></table></figure>
<p><strong>Then, try block quote:</strong></p>
<pre><code>&gt; Every interaction is both precious and an opportunity to delight.
&gt;
&gt; *Seth Godin ——*  [Welcome to Island Marketing]
</code></pre><blockquote>
<p>Every interaction is both precious and an opportunity to delight.</p>
<p><em>Seth Godin ——</em>  <a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="external">Welcome to Island Marketing</a></p>
</blockquote>
<p><strong>And then, try code block:</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIBarButtonItem</span> *search = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithBarButtonSystemItem:<span class="built_in">UIBarButtonSystemItemSearch</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(searchItemPressed)];</div><div class="line"><span class="keyword">self</span>.navigationItem.leftBarButtonItem = search;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIBarButtonItem</span> *search = [[<span class="built_in">UIBarButtonItem</span> alloc] initWithBarButtonSystemItem:<span class="built_in">UIBarButtonSystemItemSearch</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(searchItemPressed)];</div><div class="line"><span class="keyword">self</span>.navigationItem.leftBarButtonItem = search;</div></pre></td></tr></table></figure>
<p><strong>Now, link:</strong></p>
<pre><code>Here&apos;s [Github](http://github.com/).
</code></pre><p>Here’s <a href="https://github.com/" target="_blank" rel="external">Github</a>.</p>
<p><strong>Finally, image.</strong></p>
<pre><code>![img](http://img-storage.qiniudn.com/15-8-5/58389499.jpg)
</code></pre><p><img src="http://img-storage.qiniudn.com/15-8-5/58389499.jpg" alt="Here&#39;s an image"></p>
<hr>
<p><strong> Here’s a temp end. And enjoy yourself. XD </strong></p>
<p>Calios<br>5th, July</p>
<hr>
<p><strong>Update Nov 20th, 2015.</strong></p>
<p>I’ll list part of other syntax here to save.</p>
<p><strong>Table</strong></p>
<pre><code>| Title1 | Title2
| ---- | ----
|   Column1       |   Row1
|   Column2       |   Row2
</code></pre><p>It shows like this.</p>
<table>
<thead>
<tr>
<th>Title1</th>
<th>Title2</th>
</tr>
</thead>
<tbody>
<tr>
<td>Column1</td>
<td>Row1  </td>
</tr>
<tr>
<td>Column1</td>
<td>Row2</td>
</tr>
</tbody>
</table>
<hr>
<p><strong>Update Apr 20th, 2016.</strong></p>
<p>How to add code block in item list?</p>
<blockquote>
<ul>
<li>undo add a file before commit:</li>
</ul>
<!-- language: bash -->
<p>  $ svn revert –recursive folder_name</p>
</blockquote>
<p>As mentioned <a href="http://meta.stackexchange.com/questions/3122/formatting-sandbox/3431#3431" target="_blank" rel="external">here</a>:</p>
<blockquote>
<p>On the start of a line, specify a language inline using <code>&lt;!-- language: lang --&gt;</code> hints, and indent the code 4 spaces as usual.</p>
</blockquote>
<p>Like this.</p>
<pre><code>- undo add a file before commit:
</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- language: bash --&gt;</span></div><div class="line">    $ svn revert --recursive folder\_name</div></pre></td></tr></table></figure>
<hr>
<p><strong><em> Issues I occured in the blog and Refs:</em></strong></p>
<ul>
<li><a href="http://meta.stackexchange.com/questions/55437/how-can-the-backtick-character-be-included-in-code" target="_blank" rel="external">How can the backtick character ` be included in code?</a></li>
<li>How to add image for online blog?<ul>
<li>I tried to upload image <a href="http://yotuku.cn/" target="_blank" rel="external">here</a> and of course you can choose any “Cloud” you like. :P</li>
</ul>
</li>
<li>How to increase the speed for downloading from Github?<ul>
<li>Import the public repository of Github to some domestic code track website, and then download it from the domestic code. I tried <a href="http://www.coding.net" target="_blank" rel="external">coding.net</a> and it may be useful for others.</li>
</ul>
</li>
<li>Formatting sandbox: <a href="http://meta.stackexchange.com/questions/3122/formatting-sandbox/3431#3431" target="_blank" rel="external">http://meta.stackexchange.com/questions/3122/formatting-sandbox/3431#3431</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
